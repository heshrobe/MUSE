{
    "<net.smert.jreactphysics3d.mathematics.Vector2: float dot(net.smert.jreactphysics3d.mathematics.Vector2)>": [
        {
            "<com.flowpowered.react.math.Vector2: float lengthSquare()>": 0.5044440828918356
        }, 
        {
            "<org.jbox2d.common.Vec2: float lengthSquared()>": 0.5044440828918356
        }, 
        {
            "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 multiply(com.flowpowered.react.math.Matrix4x4,com.flowpowered.react.math.Matrix4x4)>": 0.49716803922516134
        }, 
        {
            "<Catalano.Math.Vector3: float Square()>": 0.4933120984548846
        }, 
        {
            "<com.flowpowered.react.math.Vector3: float lengthSquare()>": 0.4933120984548846
        }
    ], 
    "<net.smert.jreactphysics3d.constraint.SliderJoint: void setMinTranslationLimit(float)>": [
        {
            "<org.jbox2d.dynamics.joints.PrismaticJoint: void setLimits(float,float)>": 0.41423510955278897
        }, 
        {
            "<org.jbox2d.dynamics.joints.RevoluteJoint: void setLimits(float,float)>": 0.41423510955278897
        }, 
        {
            "<org.jbox2d.dynamics.joints.FrictionJoint: void setMaxTorque(float)>": 0.3922924831866709
        }, 
        {
            "<org.jbox2d.dynamics.joints.MotorJoint: void setMaxForce(float)>": 0.3922924831866709
        }, 
        {
            "<org.jbox2d.dynamics.joints.FrictionJoint: void setMaxForce(float)>": 0.3922924831866709
        }
    ], 
    "<net.smert.jreactphysics3d.engine.DynamicsWorld: void setSleepLinearVelocity(float)>": [
        {
            "<org.jbox2d.dynamics.joints.FrictionJoint: void setMaxTorque(float)>": 0.7178030303030303
        }, 
        {
            "<org.jbox2d.dynamics.joints.MotorJoint: void setMaxForce(float)>": 0.7178030303030303
        }, 
        {
            "<org.jbox2d.dynamics.joints.FrictionJoint: void setMaxForce(float)>": 0.7178030303030303
        }, 
        {
            "<org.jbox2d.dynamics.joints.MotorJoint: void setMaxTorque(float)>": 0.7178030303030303
        }, 
        {
            "<org.jbox2d.dynamics.Fixture: void setDensity(float)>": 0.7178030303030303
        }
    ], 
    "<net.smert.jreactphysics3d.constraint.HingeJoint: void warmstart(net.smert.jreactphysics3d.engine.ConstraintSolverData)>": [
        {
            "<boofcv.gui.feature.VisualizeOpticalFlow: void magnitudeAbs(boofcv.struct.flow.ImageFlow,float,java.awt.image.BufferedImage)>": 0.06998969139886899
        }, 
        {
            "<boofcv.gui.feature.VisualizeOpticalFlow: void magnitudeAbs(boofcv.struct.flow.ImageFlow,java.awt.image.BufferedImage)>": 0.0675695340375631
        }, 
        {
            "<org.jbox2d.dynamics.Island: void solve(org.jbox2d.dynamics.Profile,org.jbox2d.dynamics.TimeStep,org.jbox2d.common.Vec2,boolean)>": 0.06456723811377629
        }, 
        {
            "<boofcv.alg.distort.DistortImageOps: georegression.struct.shapes.RectangleLength2D_F32 boundBox_F32(int,int,boofcv.struct.distort.PixelTransform_F32)>": 0.06366141563142941
        }, 
        {
            "<boofcv.alg.filter.convolve.ConvolveNormalized: void convolve(boofcv.struct.convolve.Kernel2D_F32,boofcv.struct.image.GrayF32,boofcv.struct.image.GrayF32)>": 0.06254115631409787
        }
    ], 
    "<net.smert.jreactphysics3d.collision.narrowphase.EPA.EdgeEPA: int indexOfPreviousCounterClockwiseEdge(int)>": [
        {
            "<com.flowpowered.react.collision.narrowphase.EPA.EdgeEPA: int indexOfPreviousCounterClockwiseEdge(int)>": 0.9026631481046514
        }, 
        {
            "<net.coobird.thumbnailator.geometry.Positions$5: java.awt.Point calculate(int,int,int,int,int,int,int,int)>": 0.4883348366355907
        }, 
        {
            "<Catalano.Statistics.Regression.RegressionAnalysis: void setMaxDegree(int)>": 0.4864912615124042
        }, 
        {
            "<Catalano.Statistics.Regression.PolynomialRegression: void setDegree(int)>": 0.4864912615124042
        }, 
        {
            "<Catalano.Imaging.Tools.FastRadialSymmetryTransform: void setRadius(int)>": 0.4864912615124042
        }
    ], 
    "<net.smert.jreactphysics3d.engine.DynamicsWorld: void solvePositionCorrection()>": [
        {
            "<org.box2d.proto.Box2D$PbJoint: int getJoints(int)>": 0.29813612103798226
        }, 
        {
            "<org.box2d.proto.Box2D$PbJoint$Builder: int getJoints(int)>": 0.29813612103798226
        }, 
        {
            "<org.box2d.proto.Box2D$PbJoint: int getBodies(int)>": 0.29813612103798226
        }, 
        {
            "<org.box2d.proto.Box2D$PbJoint$Builder: int getBodies(int)>": 0.29813612103798226
        }, 
        {
            "<Catalano.Core.Structs.BinaryHeap: void downHeap(int,java.lang.Comparable)>": 0.2808705348034014
        }
    ], 
    "<net.smert.jreactphysics3d.engine.ContactPointSolver: void <init>()>": [
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.08366689800778684
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.TestbedMain: void main(java.lang.String[])>": 0.07744954388921926
        }, 
        {
            "<org.dyn4j.sandbox.Sandbox: void init(com.jogamp.opengl.GLAutoDrawable)>": 0.07693153429297092
        }, 
        {
            "<boofcv.demonstrations.transform.pyramid.EdgeIntensitiesApp: void main(java.lang.String[])>": 0.07398814140445686
        }, 
        {
            "<boofcv.demonstrations.tracker.CirculantVisualizationPanel: void <init>(boofcv.demonstrations.tracker.CirculantVisualizationPanel$Listener)>": 0.07251058742534171
        }
    ], 
    "<net.smert.jreactphysics3d.engine.DynamicsWorld: void setIsSolveFrictionAtContactManifoldCenterActive(boolean)>": [
        {
            "<boofcv.alg.feature.detect.extract.NonMaxBlockRelaxed: void <init>(boolean,boolean)>": 0.3438694806559756
        }, 
        {
            "<boofcv.alg.feature.detect.extract.NonMaxBlockStrict: void <init>(boolean,boolean)>": 0.3438694806559756
        }, 
        {
            "<boofcv.abst.feature.associate.EnforceUniqueByScore$Describe2D: void <init>(boofcv.abst.feature.associate.AssociateDescription2D,boolean,boolean)>": 0.3144163788737706
        }, 
        {
            "<boofcv.abst.feature.associate.EnforceUniqueByScore$Describe: void <init>(boofcv.abst.feature.associate.AssociateDescription,boolean,boolean)>": 0.3144163788737706
        }, 
        {
            "<boofcv.alg.geo.calibration.Zhang99ParamAll: void <init>(boolean,int,boolean)>": 0.3144163788737706
        }
    ], 
    "<net.smert.jreactphysics3d.body.RigidBody: void removeJointFromJointsList(net.smert.jreactphysics3d.constraint.Joint)>": [
        {
            "<net.imglib2.AbstractInterval: long min(int)>": 0.4424884873216103
        }, 
        {
            "<net.imglib2.AbstractInterval: long max(int)>": 0.4424884873216103
        }, 
        {
            "<net.imglib2.AbstractInterval: double realMax(int)>": 0.43532969757912565
        }, 
        {
            "<net.imglib2.AbstractInterval: double realMin(int)>": 0.43532969757912565
        }, 
        {
            "<org.dyn4j.collision.broadphase.DynamicAABBTree: void validate(org.dyn4j.collision.broadphase.DynamicAABBTreeNode)>": 0.42644534908374965
        }
    ], 
    "<net.smert.jreactphysics3d.collision.shapes.ConeShape: void <init>(net.smert.jreactphysics3d.collision.shapes.ConeShape)>": [
        {
            "<org.jbox2d.common.Vec2: void absLocal()>": 0.3647306829630053
        }, 
        {
            "<com.flowpowered.react.math.Vector4: com.flowpowered.react.math.Vector4 negate()>": 0.36342140604273626
        }, 
        {
            "<com.flowpowered.react.math.Vector3: com.flowpowered.react.math.Vector3 negate()>": 0.3596826644749031
        }, 
        {
            "<com.flowpowered.react.math.Quaternion: void <init>(float,com.flowpowered.react.math.Vector3)>": 0.3594431680346996
        }, 
        {
            "<org.jbox2d.testbed.perf.MathPerf: void runSinLUTTest(float)>": 0.35607545730076
        }
    ], 
    "<net.smert.jreactphysics3d.engine.DynamicsWorld: void updateRigidBodiesAABB()>": [
        {
            "<com.flowpowered.react.engine.DynamicsWorld: void updateRigidBodiesAABB()>": 0.46114205194779273
        }, 
        {
            "<com.flowpowered.react.engine.DynamicsWorld: void resetContactManifoldListsOfBodies()>": 0.44161544136874475
        }, 
        {
            "<com.flowpowered.react.engine.DynamicsWorld: void enableSleeping(boolean)>": 0.43582784165331645
        }, 
        {
            "<com.flowpowered.react.engine.DynamicsWorld: void resetBodiesMovementVariable()>": 0.42753284376566386
        }, 
        {
            "<com.flowpowered.react.engine.linked.LinkedDynamicsWorld: void clearLinkedBodies()>": 0.4230676197458741
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Matrix2x2: float getDeterminant()>": [
        {
            "<com.flowpowered.react.math.Vector2: float lengthSquare()>": 0.4808712234943334
        }, 
        {
            "<org.jbox2d.common.Vec2: float lengthSquared()>": 0.4808712234943334
        }, 
        {
            "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 multiply(com.flowpowered.react.math.Matrix4x4,com.flowpowered.react.math.Matrix4x4)>": 0.4750884319596102
        }, 
        {
            "<Catalano.Math.Vector3: float Square()>": 0.4715043824886351
        }, 
        {
            "<com.flowpowered.react.math.Vector3: float lengthSquare()>": 0.4715043824886351
        }
    ], 
    "<net.smert.jreactphysics3d.constraint.SliderJoint: void solveVelocityConstraint(net.smert.jreactphysics3d.engine.ConstraintSolverData)>": [
        {
            "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 multiply(com.flowpowered.react.math.Matrix4x4,com.flowpowered.react.math.Matrix4x4)>": 0.21704870958913577
        }, 
        {
            "<org.jbox2d.dynamics.contacts.PositionSolverManifold: void initialize(org.jbox2d.dynamics.contacts.ContactPositionConstraint,org.jbox2d.common.Transform,org.jbox2d.common.Transform,int)>": 0.21517392938252633
        }, 
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.21512262418262273
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.21511693057713024
        }, 
        {
            "<org.jbox2d.collision.shapes.ChainShape: void computeAABB(org.jbox2d.collision.AABB,org.jbox2d.common.Transform,int)>": 0.21399120866468338
        }
    ], 
    "<net.smert.jreactphysics3d.collision.broadphase.PairManager: int computePairOffset(net.smert.jreactphysics3d.collision.broadphase.BodyPair)>": [
        {
            "<com.flowpowered.react.Utilities: int indexOf(java.lang.Object[],java.lang.Object)>": 0.37934153445839863
        }, 
        {
            "<boofcv.alg.fiducial.calib.DetectFiducialSquareGrid: int isExpected(long)>": 0.31900827806718485
        }, 
        {
            "<boofcv.examples.sfm.ExampleMultiviewSceneReconstruction: int findBestFit(double[][],int)>": 0.21488529581820578
        }, 
        {
            "<org.dyn4j.dynamics.World: int removeAllListeners(java.lang.Class)>": 0.2122363931948942
        }, 
        {
            "<boofcv.io.image.ConvertRaster: int getOffset(sun.awt.image.IntegerInterleavedRaster)>": 0.20741916832496926
        }
    ], 
    "<net.smert.jreactphysics3d.body.RigidBody: void setLinearDamping(float)>": [
        {
            "<org.jbox2d.dynamics.joints.FrictionJoint: void setMaxTorque(float)>": 0.7178030303030303
        }, 
        {
            "<org.jbox2d.dynamics.joints.MotorJoint: void setMaxForce(float)>": 0.7178030303030303
        }, 
        {
            "<org.jbox2d.dynamics.joints.FrictionJoint: void setMaxForce(float)>": 0.7178030303030303
        }, 
        {
            "<org.jbox2d.dynamics.joints.MotorJoint: void setMaxTorque(float)>": 0.7178030303030303
        }, 
        {
            "<org.jbox2d.dynamics.Fixture: void setDensity(float)>": 0.7178030303030303
        }
    ], 
    "<net.smert.jreactphysics3d.engine.ContactSolver: net.smert.jreactphysics3d.engine.Impulse computeFriction1Impulse(float,net.smert.jreactphysics3d.engine.ContactPointSolver)>": [
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.05406969538743987
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.TestbedMain: void main(java.lang.String[])>": 0.0500517330712619
        }, 
        {
            "<org.dyn4j.sandbox.Sandbox: void init(com.jogamp.opengl.GLAutoDrawable)>": 0.04993793391089262
        }, 
        {
            "<boofcv.demonstrations.transform.pyramid.EdgeIntensitiesApp: void main(java.lang.String[])>": 0.0478148032648406
        }, 
        {
            "<boofcv.demonstrations.tracker.CirculantVisualizationPanel: void <init>(boofcv.demonstrations.tracker.CirculantVisualizationPanel$Listener)>": 0.04705600133945223
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Transform: net.smert.jreactphysics3d.mathematics.Transform setPosition(net.smert.jreactphysics3d.mathematics.Vector3)>": [
        {
            "<Catalano.Imaging.Filters.GaussianBlur: void <init>()>": 0.017251638983558856
        }, 
        {
            "<Catalano.Imaging.Concurrent.Filters.BradleyLocalThreshold: void <init>()>": 0.017251638983558856
        }, 
        {
            "<Catalano.Imaging.Filters.CosineTransform: void <init>()>": 0.017251638983558856
        }, 
        {
            "<Catalano.Imaging.Filters.BradleyLocalThreshold: void <init>()>": 0.017251638983558856
        }, 
        {
            "<Catalano.Imaging.Filters.UnsharpMasking: void <init>()>": 0.017251638983558856
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Vector3: net.smert.jreactphysics3d.mathematics.Vector3 normalize()>": [
        {
            "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 multiply(com.flowpowered.react.math.Matrix4x4,com.flowpowered.react.math.Matrix4x4)>": 0.5149158501688349
        }, 
        {
            "<org.jbox2d.common.Vec3: void crossToOutUnsafe(org.jbox2d.common.Vec3,org.jbox2d.common.Vec3,org.jbox2d.common.Vec3)>": 0.5112110795381744
        }, 
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.5107405572863283
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.5098264611272271
        }, 
        {
            "<org.jbox2d.dynamics.contacts.PositionSolverManifold: void initialize(org.jbox2d.dynamics.contacts.ContactPositionConstraint,org.jbox2d.common.Transform,org.jbox2d.common.Transform,int)>": 0.5068707653665837
        }
    ], 
    "<net.smert.jreactphysics3d.engine.DynamicsWorld: void setIsSleepingEnabled(boolean)>": [
        {
            "<com.flowpowered.react.engine.DynamicsWorld: void enableSleeping(boolean)>": 0.5014019510485425
        }, 
        {
            "<com.flowpowered.react.engine.DynamicsWorld: void updateRigidBodiesAABB()>": 0.4569573011448658
        }, 
        {
            "<com.flowpowered.react.engine.DynamicsWorld: void resetBodiesMovementVariable()>": 0.43048596584353843
        }, 
        {
            "<com.flowpowered.react.engine.DynamicsWorld: void resetContactManifoldListsOfBodies()>": 0.42056350051632624
        }, 
        {
            "<net.coobird.thumbnailator.makers.ThumbnailMaker$ReadinessTracker: boolean isReady()>": 0.4016143818679056
        }
    ], 
    "<net.smert.jreactphysics3d.collision.narrowphase.EPA.EPAAlgorithm: boolean computePenetrationDepthAndContactPoints(net.smert.jreactphysics3d.collision.shapes.CollisionShape,net.smert.jreactphysics3d.mathematics.Transform,net.smert.jreactphysics3d.collision.shapes.CollisionShape,net.smert.jreactphysics3d.mathematics.Transform,net.smert.jreactphysics3d.constraint.ContactPointInfo,net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex)>": [
        {
            "<com.flowpowered.react.collision.narrowphase.EPA.EPAAlgorithm: int isOriginInTetrahedron(com.flowpowered.react.math.Vector3,com.flowpowered.react.math.Vector3,com.flowpowered.react.math.Vector3,com.flowpowered.react.math.Vector3)>": 0.2434189687591803
        }, 
        {
            "<com.flowpowered.react.collision.narrowphase.EPA.TriangleEPA: boolean isClosestPointInternalToTriangle()>": 0.1686725071650957
        }, 
        {
            "<com.flowpowered.react.collision.shape.CylinderShape: boolean isEqualTo(com.flowpowered.react.collision.shape.CollisionShape)>": 0.15301126677744367
        }, 
        {
            "<com.flowpowered.react.collision.shape.ConeShape: boolean isEqualTo(com.flowpowered.react.collision.shape.CollisionShape)>": 0.15301126677744367
        }, 
        {
            "<com.flowpowered.react.collision.shape.CapsuleShape: boolean isEqualTo(com.flowpowered.react.collision.shape.CollisionShape)>": 0.15301126677744367
        }
    ], 
    "<net.smert.jreactphysics3d.collision.narrowphase.EPA.TriangleEPA: int getIndexVertex(int)>": [
        {
            "<net.imglib2.transform.integer.ComponentMappingTransform: int getComponentMapping(int)>": 0.8028812106614286
        }, 
        {
            "<net.imglib2.transform.integer.SlicingTransform: int getComponentMapping(int)>": 0.8028812106614286
        }, 
        {
            "<net.imglib2.transform.integer.MixedTransform: int getComponentMapping(int)>": 0.8028812106614286
        }, 
        {
            "<net.imglib2.transform.integer.SlicingTransform: boolean getComponentZero(int)>": 0.6834580649234657
        }, 
        {
            "<net.imglib2.transform.integer.MixedTransform: boolean getComponentZero(int)>": 0.6834580649234657
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Mathematics: float ArcTan2(float,float)>": [
        {
            "<org.jbox2d.testbed.perf.MathPerf: void runPowTest(float)>": 0.6804604489865763
        }, 
        {
            "<org.jbox2d.testbed.perf.MathPerf: void runAtan2Test(float)>": 0.6804604489865763
        }, 
        {
            "<org.jbox2d.common.MathUtils: float sqrt(float)>": 0.6748251204367338
        }, 
        {
            "<Catalano.Core.DoublePoint: void <init>(float,float)>": 0.5785272162750903
        }, 
        {
            "<boofcv.alg.interpolate.impl.NearestNeighborPixel_F32: float get_border(float,float)>": 0.509745724693318
        }
    ], 
    "<net.smert.jreactphysics3d.body.RigidBody: void setAngularDamping(float)>": [
        {
            "<org.jbox2d.dynamics.joints.FrictionJoint: void setMaxTorque(float)>": 0.7178030303030303
        }, 
        {
            "<org.jbox2d.dynamics.joints.MotorJoint: void setMaxForce(float)>": 0.7178030303030303
        }, 
        {
            "<org.jbox2d.dynamics.joints.FrictionJoint: void setMaxForce(float)>": 0.7178030303030303
        }, 
        {
            "<org.jbox2d.dynamics.joints.MotorJoint: void setMaxTorque(float)>": 0.7178030303030303
        }, 
        {
            "<org.jbox2d.dynamics.Fixture: void setDensity(float)>": 0.7178030303030303
        }
    ], 
    "<net.smert.jreactphysics3d.collision.broadphase.SweepAndPruneAlgorithm: boolean testIntersect2D(net.smert.jreactphysics3d.collision.broadphase.BoxAABB,net.smert.jreactphysics3d.collision.broadphase.BoxAABB,int,int)>": [
        {
            "<com.flowpowered.react.collision.broadphase.SweepAndPruneAlgorithm: boolean testIntersect2D(com.flowpowered.react.collision.broadphase.SweepAndPruneAlgorithm$BoxAABB,com.flowpowered.react.collision.broadphase.SweepAndPruneAlgorithm$BoxAABB,int,int)>": 0.636539130092894
        }, 
        {
            "<Catalano.Math.Dissimilarities.Dissimilarity: double SokalMichener(int[],int[])>": 0.6128024752506352
        }, 
        {
            "<Catalano.Math.Dissimilarities.Dissimilarity: double RogersTanimoto(int[],int[])>": 0.6128024752506352
        }, 
        {
            "<Catalano.Math.Dissimilarities.Dissimilarity: double Yule(int[],int[])>": 0.6098483232172071
        }, 
        {
            "<Catalano.Math.Dissimilarities.Dissimilarity: double Jaccard(int[],int[])>": 0.6083691609080899
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Vector3: boolean isZero()>": [
        {
            "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 multiply(com.flowpowered.react.math.Matrix4x4,com.flowpowered.react.math.Matrix4x4)>": 0.5121517490716333
        }, 
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.5041533632818173
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.5031047495966502
        }, 
        {
            "<com.flowpowered.react.math.Vector3: boolean isZero()>": 0.5029787421346106
        }, 
        {
            "<com.flowpowered.react.math.Vector4: boolean isZero()>": 0.5024371151166551
        }
    ], 
    "<net.smert.jreactphysics3d.collision.narrowphase.EPA.EdgeEPA: int getSourceVertexIndex()>": [
        {
            "<org.jbox2d.common.MathUtils: int max(int,int)>": 0.42101300312185536
        }, 
        {
            "<org.jbox2d.common.MathUtils: int min(int,int)>": 0.42101300312185536
        }, 
        {
            "<org.jbox2d.particle.ParticleSystem: int limitCapacity(int,int)>": 0.42101300312185536
        }, 
        {
            "<com.flowpowered.react.collision.narrowphase.EPA.EdgeEPA: int getTargetVertexIndex()>": 0.3845439992738321
        }, 
        {
            "<boofcv.alg.fiducial.calib.squares.SquaresIntoRegularClusters: int add(int,int)>": 0.37821769671933936
        }
    ], 
    "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: void backupClosestPointInSimplex(net.smert.jreactphysics3d.mathematics.Vector3)>": [
        {
            "<net.coobird.thumbnailator.util.exif.IfdStructure: boolean isOffset()>": 0.5229286850116575
        }, 
        {
            "<Catalano.Imaging.Texture.BinaryPattern.UniformLocalBinaryPattern: boolean isUniform(int)>": 0.5228729392857149
        }, 
        {
            "<com.flowpowered.react.collision.narrowphase.GJK.Simplex: boolean overlap(int,int)>": 0.4940055198644238
        }, 
        {
            "<com.flowpowered.react.collision.narrowphase.GJK.Simplex: boolean isSubset(int,int)>": 0.4940055198644238
        }, 
        {
            "<org.jbox2d.dynamics.World: int createParticle(org.jbox2d.particle.ParticleDef)>": 0.47693286729981654
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Quaternion: net.smert.jreactphysics3d.mathematics.Quaternion set(float,float,float,float)>": [
        {
            "<org.jbox2d.common.MathUtils: float clamp(float,float,float)>": 0.5091657929297426
        }, 
        {
            "<org.jbox2d.dynamics.contacts.Contact: float mixFriction(float,float)>": 0.5057392147091161
        }, 
        {
            "<org.jbox2d.common.Settings: float mixFriction(float,float)>": 0.5057392147091161
        }, 
        {
            "<boofcv.alg.color.ColorRgb: float rgbToGray_Weighted(float,float,float)>": 0.49093393586844536
        }, 
        {
            "<Catalano.Math.Matrix3x3: void <init>(float,float,float,float,float,float,float,float,float)>": 0.48707463778389637
        }
    ], 
    "<net.smert.jreactphysics3d.collision.shapes.AABB: void <init>(net.smert.jreactphysics3d.mathematics.Vector3,net.smert.jreactphysics3d.mathematics.Vector3)>": [
        {
            "<org.dyn4j.sandbox.panels.LineGraphPanel: void setStaticSize(java.awt.Dimension)>": 0.04134491152973615
        }, 
        {
            "<org.jbox2d.testbed.tests.DrawingParticles: void step(org.jbox2d.testbed.framework.TestbedSettings)>": 0.04003203845127178
        }, 
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.03967630926057839
        }, 
        {
            "<boofcv.gui.feature.SelectRegionDescriptionPanel: void <init>()>": 0.039254643313832986
        }, 
        {
            "<boofcv.gui.d3.Polygon3DSequenceViewer: void <init>()>": 0.03886011427237866
        }
    ], 
    "<net.smert.jreactphysics3d.constraint.BallAndSocketJoint: void <init>(net.smert.jreactphysics3d.constraint.BallAndSocketJointInfo)>": [
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.06946756588578082
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.TestbedMain: void main(java.lang.String[])>": 0.06430537549566229
        }, 
        {
            "<org.dyn4j.sandbox.Sandbox: void init(com.jogamp.opengl.GLAutoDrawable)>": 0.06425379885780227
        }, 
        {
            "<boofcv.demonstrations.transform.pyramid.EdgeIntensitiesApp: void main(java.lang.String[])>": 0.06143141684662695
        }, 
        {
            "<boofcv.demonstrations.tracker.CirculantVisualizationPanel: void <init>(boofcv.demonstrations.tracker.CirculantVisualizationPanel$Listener)>": 0.060540492070554106
        }
    ], 
    "<net.smert.jreactphysics3d.constraint.ContactPointInfo: void <init>()>": [
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.09861951779598739
        }, 
        {
            "<org.dyn4j.sandbox.Sandbox: void init(com.jogamp.opengl.GLAutoDrawable)>": 0.09168799670411341
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.TestbedMain: void main(java.lang.String[])>": 0.09129102253991894
        }, 
        {
            "<boofcv.demonstrations.transform.pyramid.EdgeIntensitiesApp: void main(java.lang.String[])>": 0.08721101178210013
        }, 
        {
            "<boofcv.demonstrations.tracker.CirculantVisualizationPanel: void <init>(boofcv.demonstrations.tracker.CirculantVisualizationPanel$Listener)>": 0.08636342648229997
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Matrix3x3: int hashCode()>": [
        {
            "<com.flowpowered.react.math.Quaternion: int hashCode()>": 0.5152018122410957
        }, 
        {
            "<com.flowpowered.react.math.Vector4: int hashCode()>": 0.5091367806890628
        }, 
        {
            "<org.jbox2d.testbed.pooling.ColorKey: int hashCode()>": 0.5091367806890628
        }, 
        {
            "<com.flowpowered.react.math.Vector3: int hashCode()>": 0.5026991034712223
        }, 
        {
            "<org.jbox2d.common.Vec3: int hashCode()>": 0.5026991034712223
        }
    ], 
    "<net.smert.jreactphysics3d.engine.ProfileNodeIterator: float getCurrentParentTotalTime()>": [
        {
            "<org.jbox2d.dynamics.contacts.Contact: float mixFriction(float,float)>": 0.3216542740930425
        }, 
        {
            "<org.jbox2d.common.Settings: float mixFriction(float,float)>": 0.3216542740930425
        }, 
        {
            "<Catalano.Math.Geometry.PointsCloud: void setQuadrilateralRelativeDistortionLimit(float)>": 0.31890119730361305
        }, 
        {
            "<org.jbox2d.common.Rot: float getAngle()>": 0.31672989028797055
        }, 
        {
            "<org.jbox2d.common.MathUtils: float fastAbs(float)>": 0.316544402091575
        }
    ], 
    "<net.smert.jreactphysics3d.engine.ProfileNode: boolean exitBlockOfCode()>": [
        {
            "<boofcv.alg.feature.detect.template.TemplateNCC$F32: void setupTemplate(boofcv.struct.image.GrayF32)>": 0.3978525633005135
        }, 
        {
            "<Catalano.Math.Tools: boolean isPowerOf2(int)>": 0.39561502160381756
        }, 
        {
            "<org.jbox2d.particle.ParticleSystem: void solve(org.jbox2d.dynamics.TimeStep)>": 0.3949874084230012
        }, 
        {
            "<boofcv.alg.feature.detect.template.TemplateNCC$U8: void setupTemplate(boofcv.struct.image.GrayU8)>": 0.3875864994855017
        }, 
        {
            "<boofcv.alg.feature.dense.DescribeDenseHogAlg: void computeCellHistograms()>": 0.38665407395570245
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Vector2: float get(int)>": [
        {
            "<boofcv.struct.image.Planar: boofcv.struct.image.ImageGray getBand(int)>": 0.4989634230479993
        }, 
        {
            "<boofcv.alg.InputSanityCheck: void checkSameShapeB(boofcv.struct.image.ImageMultiBand,boofcv.struct.image.ImageMultiBand)>": 0.48472056856245027
        }, 
        {
            "<boofcv.alg.InputSanityCheck: void checkSameShape(boofcv.struct.image.ImageBase,boofcv.struct.image.ImageBase)>": 0.4683484635819198
        }, 
        {
            "<boofcv.factory.feature.detect.template.FactoryTemplateMatching: boofcv.alg.feature.detect.template.TemplateMatchingIntensity createIntensity(boofcv.factory.feature.detect.template.TemplateScoreType,java.lang.Class)>": 0.4642216957350519
        }, 
        {
            "<boofcv.struct.convolve.KernelBase: void <init>(int)>": 0.44427139634129564
        }
    ], 
    "<net.smert.jreactphysics3d.collision.CollisionDetection: net.smert.jreactphysics3d.collision.narrowphase.NarrowPhaseAlgorithm selectNarrowPhaseAlgorithm(net.smert.jreactphysics3d.collision.shapes.CollisionShape,net.smert.jreactphysics3d.collision.shapes.CollisionShape)>": [
        {
            "<Catalano.Imaging.Filters.GaussianBlur: void <init>()>": 0.010838874619051498
        }, 
        {
            "<Catalano.Imaging.Concurrent.Filters.BradleyLocalThreshold: void <init>()>": 0.010838874619051498
        }, 
        {
            "<Catalano.Imaging.Filters.CosineTransform: void <init>()>": 0.010838874619051498
        }, 
        {
            "<Catalano.Imaging.Filters.BradleyLocalThreshold: void <init>()>": 0.010838874619051498
        }, 
        {
            "<Catalano.Imaging.Filters.UnsharpMasking: void <init>()>": 0.010838874619051498
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Quaternion: net.smert.jreactphysics3d.mathematics.Quaternion zero()>": [
        {
            "<org.jbox2d.dynamics.joints.MouseJoint: float getReactionTorque(float)>": 0.22010219462003328
        }, 
        {
            "<Catalano.Math.Matrix3x3: void <init>()>": 0.21976226824788314
        }, 
        {
            "<Catalano.Imaging.Filters.ImageNormalization: void setMean(float)>": 0.21964027974653352
        }, 
        {
            "<Catalano.Imaging.Filters.ImageNormalization: void setVariance(float)>": 0.21964027974653352
        }, 
        {
            "<Catalano.Imaging.Concurrent.Filters.ImageNormalization: void setMean(float)>": 0.21964027974653352
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Vector2: net.smert.jreactphysics3d.mathematics.Vector2 subtract(net.smert.jreactphysics3d.mathematics.Vector2)>": [
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.42276264863671775
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.42172549973877416
        }, 
        {
            "<com.flowpowered.react.math.Quaternion: void inverse()>": 0.41899531842228976
        }, 
        {
            "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 multiply(com.flowpowered.react.math.Matrix4x4,com.flowpowered.react.math.Matrix4x4)>": 0.4186608418743579
        }, 
        {
            "<org.jbox2d.common.Vec2: float length()>": 0.4161286348576426
        }
    ], 
    "<net.smert.jreactphysics3d.engine.DynamicsWorld: void setContactsPositionCorrectionTechnique(net.smert.jreactphysics3d.configuration.ContactsPositionCorrectionTechnique)>": [
        {
            "<boofcv.demonstrations.fiducial.FiducialTrackerApp: void process(boofcv.io.image.SimpleImageSequence)>": 0.10883925584302587
        }, 
        {
            "<boofcv.gui.StandardAlgConfigPanel: void <init>()>": 0.10702501252028128
        }, 
        {
            "<boofcv.struct.feature.NccFeatureQueue: void <init>(int)>": 0.10447399127850501
        }, 
        {
            "<boofcv.struct.feature.BriefFeatureQueue: void <init>(int)>": 0.10447399127850501
        }, 
        {
            "<boofcv.demonstrations.shapes.DetectPolygonControlPanel: void configureSpinnerFloat(javax.swing.JSpinner)>": 0.10409496476252574
        }
    ], 
    "<net.smert.jreactphysics3d.collision.narrowphase.EPA.EdgeEPA: boolean computeSilhouette(net.smert.jreactphysics3d.mathematics.Vector3[],int,net.smert.jreactphysics3d.collision.narrowphase.EPA.TrianglesStore)>": [
        {
            "<com.flowpowered.react.collision.narrowphase.EPA.EdgeEPA: int indexOfNextCounterClockwiseEdge(int)>": 0.4207446105636801
        }, 
        {
            "<Catalano.Imaging.Filters.GaussianBlur: void setSize(int)>": 0.40259602796952076
        }, 
        {
            "<Catalano.Math.Tools: int PreviousPowerOf2(int)>": 0.4014144806913259
        }, 
        {
            "<net.imglib2.type.numeric.NativeARGBDoubleType: void updateIndex(int)>": 0.3979804382538188
        }, 
        {
            "<org.box2d.proto.Box2D$PbFilter: int getSerializedSize()>": 0.3935818199037251
        }
    ], 
    "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: boolean isPointInSimplex(net.smert.jreactphysics3d.mathematics.Vector3)>": [
        {
            "<net.coobird.thumbnailator.util.exif.IfdStructure: boolean isOffset()>": 0.5528160007378194
        }, 
        {
            "<Catalano.Imaging.Texture.BinaryPattern.UniformLocalBinaryPattern: boolean isUniform(int)>": 0.5524577578041063
        }, 
        {
            "<com.flowpowered.react.collision.narrowphase.GJK.Simplex: boolean overlap(int,int)>": 0.5236223912328034
        }, 
        {
            "<com.flowpowered.react.collision.narrowphase.GJK.Simplex: boolean isSubset(int,int)>": 0.5236223912328034
        }, 
        {
            "<net.coobird.thumbnailator.util.exif.IfdStructure: boolean isValue()>": 0.5007962531783154
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Quaternion: net.smert.jreactphysics3d.mathematics.Vector3 getRotationAngleAxis(net.smert.jreactphysics3d.mathematics.Vector3,float[])>": [
        {
            "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 multiply(com.flowpowered.react.math.Matrix4x4,com.flowpowered.react.math.Matrix4x4)>": 0.49828374111882234
        }, 
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.48851358062215544
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.4877183686537551
        }, 
        {
            "<org.jbox2d.dynamics.contacts.PositionSolverManifold: void initialize(org.jbox2d.dynamics.contacts.ContactPositionConstraint,org.jbox2d.common.Transform,org.jbox2d.common.Transform,int)>": 0.47971622085203824
        }, 
        {
            "<org.jbox2d.common.Rot: void mulTrans(org.jbox2d.common.Rot,org.jbox2d.common.Vec2,org.jbox2d.common.Vec2)>": 0.474651414426697
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 computeSkewSymmetricMatrixForCrossProduct(net.smert.jreactphysics3d.mathematics.Vector3)>": [
        {
            "<com.flowpowered.react.math.Vector4: com.flowpowered.react.math.Vector4 negate()>": 0.47201969817760886
        }, 
        {
            "<org.jbox2d.common.Vec2: void absLocal()>": 0.470224130529721
        }, 
        {
            "<com.flowpowered.react.math.Quaternion: void <init>(float,com.flowpowered.react.math.Vector3)>": 0.4695546111567677
        }, 
        {
            "<org.jbox2d.testbed.perf.MathPerf: void runSinLUTTest(float)>": 0.46819044900867524
        }, 
        {
            "<com.flowpowered.react.math.Vector3: com.flowpowered.react.math.Vector3 negate()>": 0.46620215744167326
        }
    ], 
    "<net.smert.jreactphysics3d.constraint.HingeJoint: void initBeforeSolve(net.smert.jreactphysics3d.engine.ConstraintSolverData)>": [
        {
            "<org.jbox2d.common.MathUtils: float abs(float)>": 0.25927865128142896
        }, 
        {
            "<org.jbox2d.collision.shapes.ChainShape: void computeAABB(org.jbox2d.collision.AABB,org.jbox2d.common.Transform,int)>": 0.25796022897136295
        }, 
        {
            "<org.jbox2d.common.Vec3: void crossToOutUnsafe(org.jbox2d.common.Vec3,org.jbox2d.common.Vec3,org.jbox2d.common.Vec3)>": 0.25737498254972
        }, 
        {
            "<org.jbox2d.collision.shapes.CircleShape: boolean testPoint(org.jbox2d.common.Transform,org.jbox2d.common.Vec2)>": 0.2565898495032515
        }, 
        {
            "<boofcv.abst.feature.detect.extract.NonMaxLimiter$LocalExtreme: float getValue()>": 0.25576303436519143
        }
    ], 
    "<net.smert.jreactphysics3d.collision.shapes.SphereShape: void <init>(float,float)>": [
        {
            "<org.jbox2d.dynamics.joints.FrictionJoint: void setMaxTorque(float)>": 0.5531492921692639
        }, 
        {
            "<org.jbox2d.dynamics.joints.MotorJoint: void setMaxForce(float)>": 0.5531492921692639
        }, 
        {
            "<org.jbox2d.dynamics.joints.FrictionJoint: void setMaxForce(float)>": 0.5531492921692639
        }, 
        {
            "<org.jbox2d.dynamics.joints.MotorJoint: void setMaxTorque(float)>": 0.5531492921692639
        }, 
        {
            "<org.jbox2d.dynamics.Fixture: void setDensity(float)>": 0.5531492921692639
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 subtract(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": [
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.46747390172029724
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.4665444048817772
        }, 
        {
            "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 multiply(com.flowpowered.react.math.Matrix4x4,com.flowpowered.react.math.Matrix4x4)>": 0.4632065718356898
        }, 
        {
            "<com.flowpowered.react.math.Quaternion: void inverse()>": 0.46278530184059086
        }, 
        {
            "<org.jbox2d.particle.ParticleSystem: void raycast(org.jbox2d.callbacks.ParticleRaycastCallback,org.jbox2d.common.Vec2,org.jbox2d.common.Vec2)>": 0.4593263960937198
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Vector3: net.smert.jreactphysics3d.mathematics.Vector3 add(net.smert.jreactphysics3d.mathematics.Vector3)>": [
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.44723889114779497
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.44622978039980843
        }, 
        {
            "<com.flowpowered.react.math.Quaternion: void inverse()>": 0.44304320288574595
        }, 
        {
            "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 multiply(com.flowpowered.react.math.Matrix4x4,com.flowpowered.react.math.Matrix4x4)>": 0.44301393338148165
        }, 
        {
            "<org.jbox2d.common.Vec2: float length()>": 0.43954572292829897
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Quaternion: net.smert.jreactphysics3d.mathematics.Quaternion fromMatrix(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": [
        {
            "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 multiply(com.flowpowered.react.math.Matrix4x4,com.flowpowered.react.math.Matrix4x4)>": 0.5438828728937953
        }, 
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.5355278821076979
        }, 
        {
            "<com.flowpowered.react.math.Quaternion: void <init>(com.flowpowered.react.math.Matrix3x3)>": 0.5352415294592453
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.5345613380279611
        }, 
        {
            "<org.jbox2d.dynamics.contacts.PositionSolverManifold: void initialize(org.jbox2d.dynamics.contacts.ContactPositionConstraint,org.jbox2d.common.Transform,org.jbox2d.common.Transform,int)>": 0.5294481917457606
        }
    ], 
    "<net.smert.jreactphysics3d.collision.broadphase.NoBroadPhaseAlgorithm: void <init>(net.smert.jreactphysics3d.collision.CollisionDetection)>": [
        {
            "<com.flowpowered.react.collision.broadphase.NoBroadPhaseAlgorithm: void <init>(com.flowpowered.react.collision.CollisionDetection)>": 0.3055555555555556
        }, 
        {
            "<com.flowpowered.react.engine.DynamicsWorld: void <init>(com.flowpowered.react.math.Vector3,float)>": 0.26145723513664515
        }, 
        {
            "<com.flowpowered.react.engine.linked.LinkedDynamicsWorld: void <init>(com.flowpowered.react.math.Vector3,com.flowpowered.react.engine.linked.LinkedWorldInfo)>": 0.2520428752548545
        }, 
        {
            "<com.flowpowered.react.engine.linked.LinkedDynamicsWorld: void <init>(com.flowpowered.react.math.Vector3,float,com.flowpowered.react.engine.linked.LinkedWorldInfo)>": 0.2333463599154101
        }, 
        {
            "<com.flowpowered.react.engine.CollisionWorld: void <init>()>": 0.2232090545693804
        }
    ], 
    "<net.smert.jreactphysics3d.engine.Timer: float computeInterpolationFactor()>": [
        {
            "<com.flowpowered.react.engine.Timer: float computeInterpolationFactor()>": 0.4727047146401986
        }, 
        {
            "<net.imglib2.type.numeric.complex.AbstractComplexType: float getPowerFloat()>": 0.3972456578887348
        }, 
        {
            "<net.imglib2.type.numeric.complex.AbstractComplexType: float getPhaseFloat()>": 0.3722135034354335
        }, 
        {
            "<Catalano.Math.ComplexNumber: void Pow(double)>": 0.3562052976756162
        }, 
        {
            "<Catalano.Statistics.Distributions.GammaDistribution: double Entropy()>": 0.35305181261971597
        }
    ], 
    "<net.smert.jreactphysics3d.engine.ProfileNodeIterator: void <init>(net.smert.jreactphysics3d.engine.ProfileNode)>": [
        {
            "<org.dyn4j.sandbox.panels.LineGraphPanel: void setStaticSize(java.awt.Dimension)>": 0.04134491152973615
        }, 
        {
            "<org.jbox2d.testbed.tests.DrawingParticles: void step(org.jbox2d.testbed.framework.TestbedSettings)>": 0.04003203845127178
        }, 
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.03967630926057839
        }, 
        {
            "<boofcv.gui.feature.SelectRegionDescriptionPanel: void <init>()>": 0.039254643313832986
        }, 
        {
            "<boofcv.gui.d3.Polygon3DSequenceViewer: void <init>()>": 0.03886011427237866
        }
    ], 
    "<net.smert.jreactphysics3d.engine.ContactManifold: int getMaxArea(float,float,float,float)>": [
        {
            "<com.flowpowered.react.engine.ContactManifold: int getMaxArea(float,float,float,float)>": 0.9769573327227103
        }, 
        {
            "<net.imglib2.util.Util: boolean isApproxEqual(float,float,float)>": 0.4110231615457697
        }, 
        {
            "<boofcv.alg.color.ColorHsv: void rgbToHsv(float,float,float,float[])>": 0.3393111286938496
        }, 
        {
            "<boofcv.alg.filter.kernel.KernelMath: float minAbs(float[],int,float)>": 0.3244085960973922
        }, 
        {
            "<boofcv.alg.tracker.klt.KltTracker: boolean isFullyInside(float,float)>": 0.32380493625921725
        }
    ], 
    "<net.smert.jreactphysics3d.collision.BroadPhasePair: void <init>(net.smert.jreactphysics3d.body.CollisionBody,net.smert.jreactphysics3d.body.CollisionBody)>": [
        {
            "<org.dyn4j.examples.ExampleJOGL: void init(com.jogamp.opengl.GLAutoDrawable)>": 0.07568103438891795
        }, 
        {
            "<org.dyn4j.sandbox.Sandbox: void init(com.jogamp.opengl.GLAutoDrawable)>": 0.0743778787526217
        }, 
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.06872138349613734
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.TestbedMain: void main(java.lang.String[])>": 0.06361464251628643
        }, 
        {
            "<org.dyn4j.sandbox.panels.LineGraphPanel: void setStaticSize(java.awt.Dimension)>": 0.06266005147845038
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 set(net.smert.jreactphysics3d.mathematics.Matrix2x2)>": [
        {
            "<org.jbox2d.common.Vec2: void absLocal()>": 0.374452412208903
        }, 
        {
            "<com.flowpowered.react.math.Vector4: com.flowpowered.react.math.Vector4 negate()>": 0.3737571131043752
        }, 
        {
            "<com.flowpowered.react.math.Vector3: com.flowpowered.react.math.Vector3 negate()>": 0.36973266839555174
        }, 
        {
            "<com.flowpowered.react.math.Quaternion: void <init>(float,com.flowpowered.react.math.Vector3)>": 0.3678165696497011
        }, 
        {
            "<org.jbox2d.testbed.perf.MathPerf: void runSinLUTTest(float)>": 0.36521021397126996
        }
    ], 
    "<net.smert.jreactphysics3d.engine.ContactManifold: net.smert.jreactphysics3d.constraint.ContactPoint getContactPoint(int)>": [
        {
            "<net.imglib2.transform.integer.ComponentMappingTransform: int getComponentMapping(int)>": 0.6321035136951871
        }, 
        {
            "<net.imglib2.transform.integer.SlicingTransform: int getComponentMapping(int)>": 0.6321035136951871
        }, 
        {
            "<net.imglib2.transform.integer.MixedTransform: int getComponentMapping(int)>": 0.6321035136951871
        }, 
        {
            "<net.imglib2.transform.integer.SlicingTransform: boolean getComponentZero(int)>": 0.6186610555340056
        }, 
        {
            "<net.imglib2.transform.integer.MixedTransform: boolean getComponentZero(int)>": 0.6186610555340056
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Vector2: int getMaxAxis()>": [
        {
            "<com.flowpowered.react.math.Vector2: int getMaxAxis()>": 0.5697916666666667
        }, 
        {
            "<boofcv.abst.fiducial.CalibrationFiducialDetector: int totalFound()>": 0.43909242088545836
        }, 
        {
            "<com.flowpowered.react.math.Vector3: int getMaxAxis()>": 0.4354989515435984
        }, 
        {
            "<Catalano.Math.Vector3: int getMinIndex()>": 0.3941639721627793
        }, 
        {
            "<Catalano.Math.Vector3: int getMaxIndex()>": 0.3941639721627793
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Vector3: net.smert.jreactphysics3d.mathematics.Vector3 set(net.smert.jreactphysics3d.mathematics.Vector3)>": [
        {
            "<org.jbox2d.common.Vec2: void absLocal()>": 0.3519071052927769
        }, 
        {
            "<com.flowpowered.react.math.Vector4: com.flowpowered.react.math.Vector4 negate()>": 0.3507764882489585
        }, 
        {
            "<com.flowpowered.react.math.Vector3: com.flowpowered.react.math.Vector3 negate()>": 0.3471758244724553
        }, 
        {
            "<com.flowpowered.react.math.Quaternion: void <init>(float,com.flowpowered.react.math.Vector3)>": 0.34502476596314485
        }, 
        {
            "<org.jbox2d.testbed.perf.MathPerf: void runSinLUTTest(float)>": 0.3432737332383075
        }
    ], 
    "<net.smert.jreactphysics3d.collision.shapes.BoxShape: void <init>(net.smert.jreactphysics3d.collision.shapes.BoxShape)>": [
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.09047590555508965
        }, 
        {
            "<org.dyn4j.sandbox.Sandbox: void init(com.jogamp.opengl.GLAutoDrawable)>": 0.0854108662710455
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.TestbedMain: void main(java.lang.String[])>": 0.08375256863895691
        }, 
        {
            "<org.dyn4j.sandbox.panels.LineGraphPanel: void setStaticSize(java.awt.Dimension)>": 0.08249579113843054
        }, 
        {
            "<boofcv.gui.d3.Polygon3DSequenceViewer: void <init>()>": 0.08228507357554792
        }
    ], 
    "<net.smert.jreactphysics3d.engine.ContactSolver: void setConstrainedVelocitiesArrays(net.smert.jreactphysics3d.mathematics.Vector3[],net.smert.jreactphysics3d.mathematics.Vector3[])>": [
        {
            "<net.imglib2.AbstractInterval: long min(int)>": 0.5590983500645454
        }, 
        {
            "<net.imglib2.AbstractInterval: long max(int)>": 0.5590983500645454
        }, 
        {
            "<org.dyn4j.collision.broadphase.DynamicAABBTree: void validate(org.dyn4j.collision.broadphase.DynamicAABBTreeNode)>": 0.5505802201011953
        }, 
        {
            "<net.imglib2.AbstractInterval: double realMax(int)>": 0.5503136295915592
        }, 
        {
            "<net.imglib2.AbstractInterval: double realMin(int)>": 0.5503136295915592
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Vector2: net.smert.jreactphysics3d.mathematics.Vector2 add(net.smert.jreactphysics3d.mathematics.Vector2)>": [
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.42276264863671775
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.42172549973877416
        }, 
        {
            "<com.flowpowered.react.math.Quaternion: void inverse()>": 0.41899531842228976
        }, 
        {
            "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 multiply(com.flowpowered.react.math.Matrix4x4,com.flowpowered.react.math.Matrix4x4)>": 0.4186608418743579
        }, 
        {
            "<org.jbox2d.common.Vec2: float length()>": 0.4161286348576426
        }
    ], 
    "<net.smert.jreactphysics3d.engine.ContactManifold: void update(net.smert.jreactphysics3d.mathematics.Transform,net.smert.jreactphysics3d.mathematics.Transform)>": [
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void validate()>": 0.374733407026022
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void rebuildBottomUp()>": 0.3738113960029365
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTreeFlatNodes: void validate()>": 0.3672867303555103
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void validateMetrics(org.jbox2d.collision.broadphase.DynamicTreeNode)>": 0.3554598052501135
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void validateStructure(org.jbox2d.collision.broadphase.DynamicTreeNode)>": 0.3416777279499364
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Transform: net.smert.jreactphysics3d.mathematics.Transform set(net.smert.jreactphysics3d.mathematics.Transform)>": [
        {
            "<Catalano.Imaging.Filters.GaussianBlur: void <init>()>": 0.01349873117890097
        }, 
        {
            "<Catalano.Imaging.Concurrent.Filters.BradleyLocalThreshold: void <init>()>": 0.01349873117890097
        }, 
        {
            "<Catalano.Imaging.Filters.CosineTransform: void <init>()>": 0.01349873117890097
        }, 
        {
            "<Catalano.Imaging.Filters.BradleyLocalThreshold: void <init>()>": 0.01349873117890097
        }, 
        {
            "<Catalano.Imaging.Filters.UnsharpMasking: void <init>()>": 0.01349873117890097
        }
    ], 
    "<net.smert.jreactphysics3d.engine.CollisionWorld: void <init>()>": [
        {
            "<org.dyn4j.sandbox.persist.XmlReader: void <init>()>": 0.4296477892380885
        }, 
        {
            "<boofcv.gui.feature.FancyInterestPointRender: void <init>()>": 0.4057299811091506
        }, 
        {
            "<boofcv.alg.filter.binary.Contour: void <init>()>": 0.3967007244038944
        }, 
        {
            "<boofcv.demonstrations.calibration.ParseStereoCalibrationConfig: void <init>()>": 0.3967007244038944
        }, 
        {
            "<boofcv.gui.feature.ScaleSpacePyramidPointPanel: void <init>(double)>": 0.39129047186400845
        }
    ], 
    "<net.smert.jreactphysics3d.collision.broadphase.BodyPair: net.smert.jreactphysics3d.collision.BodyIndexPair newBodiesIndexPair()>": [
        {
            "<net.imglib2.transform.integer.ComponentMappingTransform: int getComponentMapping(int)>": 0.33318422828548167
        }, 
        {
            "<net.imglib2.transform.integer.SlicingTransform: int getComponentMapping(int)>": 0.33318422828548167
        }, 
        {
            "<net.imglib2.transform.integer.MixedTransform: int getComponentMapping(int)>": 0.33318422828548167
        }, 
        {
            "<net.imglib2.view.FullSourceMapSlicingRandomAccess: void move(int,int)>": 0.332527139887588
        }, 
        {
            "<net.imglib2.view.FullSourceMapSlicingRandomAccess: void setPosition(int,int)>": 0.332527139887588
        }
    ], 
    "<net.smert.jreactphysics3d.constraint.ContactPoint: void setWorldPointOnBody2(net.smert.jreactphysics3d.mathematics.Vector3)>": [
        {
            "<Catalano.Imaging.Filters.GaussianBlur: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Concurrent.Filters.BradleyLocalThreshold: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.CosineTransform: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.BradleyLocalThreshold: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.UnsharpMasking: void <init>()>": 0.018184824186332698
        }
    ], 
    "<net.smert.jreactphysics3d.engine.ProfileNodeIterator: void enterParent()>": [
        {
            "<Catalano.Imaging.Filters.GaussianBlur: void <init>()>": 0.008519977207387461
        }, 
        {
            "<Catalano.Imaging.Concurrent.Filters.BradleyLocalThreshold: void <init>()>": 0.008519977207387461
        }, 
        {
            "<Catalano.Imaging.Filters.CosineTransform: void <init>()>": 0.008519977207387461
        }, 
        {
            "<Catalano.Imaging.Filters.BradleyLocalThreshold: void <init>()>": 0.008519977207387461
        }, 
        {
            "<Catalano.Imaging.Filters.UnsharpMasking: void <init>()>": 0.008519977207387461
        }
    ], 
    "<net.smert.jreactphysics3d.constraint.HingeJoint: void enableMotor(boolean)>": [
        {
            "<Catalano.Imaging.Filters.Mirror: void <init>(boolean,boolean)>": 0.23077673742847993
        }, 
        {
            "<boofcv.alg.feature.detect.extract.NonMaxBlock: void <init>(boolean,boolean)>": 0.23077673742847993
        }, 
        {
            "<com.flowpowered.react.body.Body: void setIsSleeping(boolean)>": 0.22731469077833558
        }, 
        {
            "<boofcv.gui.calibration.CalibratedImageGridPanel: void setDisplay(boolean,boolean,boolean,boolean,boolean,double)>": 0.2221314806981181
        }, 
        {
            "<boofcv.demonstrations.calibration.SubpixelGridTargetDisplay: void setShow(boolean,boolean)>": 0.2217906806678106
        }
    ], 
    "<net.smert.jreactphysics3d.collision.shapes.CapsuleShape: net.smert.jreactphysics3d.mathematics.Vector3 getLocalSupportPointWithoutMargin(net.smert.jreactphysics3d.mathematics.Vector3,net.smert.jreactphysics3d.mathematics.Vector3)>": [
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector4 Inverse()>": 0.19669244243784256
        }, 
        {
            "<Catalano.Math.Vector3: Catalano.Math.Vector3 Inverse()>": 0.19333716870879597
        }, 
        {
            "<com.flowpowered.react.collision.narrowphase.EPA.TriangleEPA: boolean isClosestPointInternalToTriangle()>": 0.19102316326635344
        }, 
        {
            "<boofcv.alg.distort.DistortImageOps: void updateBoundBox(boofcv.struct.distort.PixelTransform_F32,boofcv.struct.ImageRectangle_F32)>": 0.18915531392155596
        }, 
        {
            "<org.jbox2d.common.MathUtils: float reduceAngle(float)>": 0.18735661776320933
        }
    ], 
    "<net.smert.jreactphysics3d.collision.shapes.ConvexMeshShape: void <init>(float[],int,int,float)>": [
        {
            "<Catalano.Math.Vector3: float getMin()>": 0.30216838500423265
        }, 
        {
            "<Catalano.Math.Vector3: float getMax()>": 0.30216838500423265
        }, 
        {
            "<Catalano.Math.Vector4: boolean equals(java.lang.Object)>": 0.29927139306784634
        }, 
        {
            "<boofcv.alg.distort.DistortImageOps: void updateBoundBox(boofcv.struct.distort.PixelTransform_F32,boofcv.struct.ImageRectangle_F32)>": 0.2989621541377119
        }, 
        {
            "<Catalano.Math.Vector3: boolean equals(java.lang.Object)>": 0.2891153925257658
        }
    ], 
    "<net.smert.jreactphysics3d.collision.broadphase.SweepAndPruneAlgorithm: void removeObject(net.smert.jreactphysics3d.body.CollisionBody)>": [
        {
            "<org.jbox2d.collision.broadphase.DynamicTreeFlatNodes: void validate()>": 0.6634586268626669
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTreeFlatNodes: void validateStructure(int)>": 0.6506691334041089
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void rebuildBottomUp()>": 0.5879299362188408
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTreeFlatNodes: void validateMetrics(int)>": 0.5807513468606437
        }, 
        {
            "<net.imglib2.transform.integer.SlicingTransform: void apply(int[],int[])>": 0.5784801650212823
        }
    ], 
    "<net.smert.jreactphysics3d.engine.ConstraintSolverData: void <init>(java.util.List,java.util.List,java.util.Map)>": [
        {
            "<boofcv.gui.calibration.CalibratedImageGridPanel: void setResults(java.util.List,java.util.List)>": 0.3732996032650896
        }, 
        {
            "<boofcv.alg.geo.triangulate.ResidualsTriangulateSampson: void setObservations(java.util.List,java.util.List)>": 0.3732996032650896
        }, 
        {
            "<boofcv.gui.feature.AssociationScorePanel: void setLocation(java.util.List,java.util.List,java.util.List,java.util.List)>": 0.3656144910624291
        }, 
        {
            "<boofcv.demonstrations.feature.associate.VisualizeAssociationScoreApp$1: void <init>(boofcv.demonstrations.feature.associate.VisualizeAssociationScoreApp,javax.swing.ProgressMonitor,java.util.List,java.util.List,java.util.List,java.util.List)>": 0.3635403029062809
        }, 
        {
            "<boofcv.gui.feature.CompareTwoImagePanel: void setLocation(java.util.List,java.util.List)>": 0.36148231840325296
        }
    ], 
    "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: boolean isEmpty()>": [
        {
            "<Catalano.Core.Structs.DoubleArrayList: boolean isEmpty()>": 0.6797385620915033
        }, 
        {
            "<net.coobird.thumbnailator.ThumbnailParameter: boolean useOriginalImageType()>": 0.6797385620915033
        }, 
        {
            "<com.flowpowered.react.collision.narrowphase.GJK.Simplex: boolean isEmpty()>": 0.6797385620915033
        }, 
        {
            "<com.flowpowered.react.collision.narrowphase.GJK.Simplex: boolean isFull()>": 0.6797385620915033
        }, 
        {
            "<boofcv.struct.WrapArrayIntoList: boolean isEmpty()>": 0.6797385620915033
        }
    ], 
    "<net.smert.jreactphysics3d.engine.Material: int hashCode()>": [
        {
            "<Catalano.Core.FloatPoint: int hashCode()>": 0.5108947425123896
        }, 
        {
            "<com.flowpowered.react.math.Quaternion: int hashCode()>": 0.5098894907733246
        }, 
        {
            "<com.flowpowered.react.math.Vector4: int hashCode()>": 0.49259409620915895
        }, 
        {
            "<org.jbox2d.testbed.pooling.ColorKey: int hashCode()>": 0.49259409620915895
        }, 
        {
            "<com.flowpowered.react.math.Vector3: int hashCode()>": 0.4899340231914684
        }
    ], 
    "<net.smert.jreactphysics3d.engine.Material: void set(net.smert.jreactphysics3d.engine.Material)>": [
        {
            "<org.jbox2d.common.Vec2: void absLocal()>": 0.33278749766013505
        }, 
        {
            "<com.flowpowered.react.math.Vector4: com.flowpowered.react.math.Vector4 negate()>": 0.3306510362366919
        }, 
        {
            "<com.flowpowered.react.math.Vector3: com.flowpowered.react.math.Vector3 negate()>": 0.32757828469452865
        }, 
        {
            "<com.flowpowered.react.math.Quaternion: void <init>(float,com.flowpowered.react.math.Vector3)>": 0.3251349005067746
        }, 
        {
            "<org.jbox2d.testbed.perf.MathPerf: void runSinLUTTest(float)>": 0.32508585835788745
        }
    ], 
    "<net.smert.jreactphysics3d.constraint.HingeJoint: void setMotorSpeed(float)>": [
        {
            "<org.jbox2d.common.MathUtils: float min(float,float)>": 0.27217205551146173
        }, 
        {
            "<org.jbox2d.dynamics.contacts.Contact: float mixRestitution(float,float)>": 0.27217205551146173
        }, 
        {
            "<org.jbox2d.common.MathUtils: float max(float,float)>": 0.27217205551146173
        }, 
        {
            "<org.jbox2d.common.Settings: float mixRestitution(float,float)>": 0.27217205551146173
        }, 
        {
            "<com.flowpowered.react.math.Mathematics: float clamp(float,float,float)>": 0.24734051295693768
        }
    ], 
    "<net.smert.jreactphysics3d.engine.ConstraintSolver: void <init>(java.util.List,java.util.List,java.util.Map)>": [
        {
            "<com.flowpowered.react.constraint.ConstraintSolver: void <init>(java.util.List,java.util.List,gnu.trove.map.TObjectIntMap)>": 0.27624806999485335
        }, 
        {
            "<boofcv.gui.feature.AssociationScorePanel: void setLocation(java.util.List,java.util.List,java.util.List,java.util.List)>": 0.25629771501010334
        }, 
        {
            "<boofcv.gui.SelectAlgorithmAndInputPanel: void setInputList(java.util.List)>": 0.2540063273064989
        }, 
        {
            "<boofcv.gui.feature.CompareTwoImagePanel: void setLocation(java.util.List,java.util.List)>": 0.23533624237379105
        }, 
        {
            "<boofcv.gui.calibration.CalibratedImageGridPanel: void setResults(java.util.List,java.util.List)>": 0.23295029985922444
        }
    ], 
    "<net.smert.jreactphysics3d.configuration.JointsPositionCorrectionTechnique: void <init>(java.lang.String,int)>": [
        {
            "<Catalano.Statistics.Analysis.PrincipalComponentAnalysis$AnalysisMethod: void <init>(java.lang.String,int)>": 0.4415584415584415
        }, 
        {
            "<Catalano.Imaging.Filters.Resize$Algorithm: void <init>(java.lang.String,int)>": 0.4415584415584415
        }, 
        {
            "<Catalano.Imaging.Filters.PeronaMalikAnisotropicDiffusion$Diffusion: void <init>(java.lang.String,int)>": 0.4415584415584415
        }, 
        {
            "<Catalano.Imaging.Filters.StereoAnaglyph$Algorithm: void <init>(java.lang.String,int)>": 0.4415584415584415
        }, 
        {
            "<Catalano.Imaging.Texture.GrayLevelCooccurrenceMatrix$Degree: void <init>(java.lang.String,int)>": 0.4415584415584415
        }
    ], 
    "<net.smert.jreactphysics3d.collision.CollisionDetection: void addNoCollisionPair(net.smert.jreactphysics3d.body.CollisionBody,net.smert.jreactphysics3d.body.CollisionBody)>": [
        {
            "<com.flowpowered.react.engine.DynamicsWorld: void addRigidBody(com.flowpowered.react.body.RigidBody)>": 0.1343369338343609
        }, 
        {
            "<com.flowpowered.react.engine.DynamicsWorld: void disperseCache()>": 0.1281911184839599
        }, 
        {
            "<com.flowpowered.react.engine.DynamicsWorld: void addRigidBodyIgnoreTick(com.flowpowered.react.body.RigidBody)>": 0.1246713492382436
        }, 
        {
            "<com.flowpowered.react.engine.DynamicsWorld: com.flowpowered.react.body.RigidBody createRigidBody(com.flowpowered.react.math.Transform,float,com.flowpowered.react.math.Matrix3x3,com.flowpowered.react.collision.shape.CollisionShape)>": 0.10226474967574431
        }, 
        {
            "<com.flowpowered.react.engine.linked.LinkedDynamicsWorld: void addLinkedBodies(java.util.Collection)>": 0.08814083565585298
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Transform: net.smert.jreactphysics3d.mathematics.Vector3 multiply(net.smert.jreactphysics3d.mathematics.Vector3,net.smert.jreactphysics3d.mathematics.Vector3)>": [
        {
            "<org.dyn4j.sandbox.panels.LineGraphPanel: void setStaticSize(java.awt.Dimension)>": 0.021516574145596757
        }, 
        {
            "<org.jbox2d.testbed.tests.DrawingParticles: void step(org.jbox2d.testbed.framework.TestbedSettings)>": 0.020833333333333332
        }, 
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.020648205993012324
        }, 
        {
            "<boofcv.gui.feature.SelectRegionDescriptionPanel: void <init>()>": 0.02042876407689417
        }, 
        {
            "<boofcv.gui.d3.Polygon3DSequenceViewer: void <init>()>": 0.020223444654044815
        }
    ], 
    "<net.smert.jreactphysics3d.constraint.FixedJointInfo: void <init>(net.smert.jreactphysics3d.body.RigidBody,net.smert.jreactphysics3d.body.RigidBody,net.smert.jreactphysics3d.mathematics.Vector3)>": [
        {
            "<org.dyn4j.sandbox.panels.LineGraphPanel: void setStaticSize(java.awt.Dimension)>": 0.04564354645876383
        }, 
        {
            "<org.jbox2d.testbed.tests.DrawingParticles: void step(org.jbox2d.testbed.framework.TestbedSettings)>": 0.044194173824159216
        }, 
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.04380145943098717
        }, 
        {
            "<boofcv.gui.feature.SelectRegionDescriptionPanel: void <init>()>": 0.04333595283009603
        }, 
        {
            "<boofcv.gui.d3.Polygon3DSequenceViewer: void <init>()>": 0.04290040456147775
        }
    ], 
    "<net.smert.jreactphysics3d.constraint.Joint: void <init>(net.smert.jreactphysics3d.constraint.JointInfo)>": [
        {
            "<org.dyn4j.collision.broadphase.DynamicAABBTree: void validate(org.dyn4j.collision.broadphase.DynamicAABBTreeNode)>": 0.46395047773222897
        }, 
        {
            "<net.imglib2.AbstractInterval: long min(int)>": 0.4626092921349669
        }, 
        {
            "<net.imglib2.AbstractInterval: long max(int)>": 0.4626092921349669
        }, 
        {
            "<net.imglib2.AbstractInterval: double realMax(int)>": 0.4554613812023092
        }, 
        {
            "<net.imglib2.AbstractInterval: double realMin(int)>": 0.4554613812023092
        }
    ], 
    "<net.smert.jreactphysics3d.collision.shapes.CapsuleShape: float getHeight()>": [
        {
            "<com.flowpowered.react.collision.shape.CylinderShape: float getHeight()>": 0.4907407407407407
        }, 
        {
            "<com.flowpowered.react.collision.shape.ConeShape: float getHeight()>": 0.4907407407407407
        }, 
        {
            "<com.flowpowered.react.collision.shape.CapsuleShape: float getHeight()>": 0.4907407407407407
        }, 
        {
            "<com.flowpowered.react.constraint.SliderJoint: float getMotorForce(float)>": 0.48845356531534173
        }, 
        {
            "<com.flowpowered.react.constraint.HingeJoint: float getMotorTorque(float)>": 0.48845356531534173
        }
    ], 
    "<net.smert.jreactphysics3d.collision.broadphase.PairManager: boolean isDifferentPair(net.smert.jreactphysics3d.collision.broadphase.BodyPair,int,int)>": [
        {
            "<boofcv.struct.image.ImageBase: boolean isInBounds(int,int)>": 0.6310932009032825
        }, 
        {
            "<boofcv.struct.flow.ImageFlow: boolean isInBounds(int,int)>": 0.6310932009032825
        }, 
        {
            "<boofcv.struct.feature.MatrixOfList: boolean isInBounds(int,int)>": 0.6310932009032825
        }, 
        {
            "<boofcv.core.image.border.ImageBorderValue$Value_I: void setOutside(int,int,int)>": 0.5924673496599778
        }, 
        {
            "<org.dyn4j.examples.ExampleJOGL: void reshape(com.jogamp.opengl.GLAutoDrawable,int,int,int,int)>": 0.5854825557165404
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Vector3: int getMaxAxis()>": [
        {
            "<com.flowpowered.react.math.Vector3: int getMaxAxis()>": 0.5610028165756717
        }, 
        {
            "<Catalano.Math.Vector3: int getMinIndex()>": 0.5288223330847253
        }, 
        {
            "<Catalano.Math.Vector3: int getMaxIndex()>": 0.5288223330847253
        }, 
        {
            "<com.flowpowered.react.math.Vector3: int getMinAxis()>": 0.5288223330847253
        }, 
        {
            "<Catalano.Math.Vector4: int getMinIndex()>": 0.45314458791176815
        }
    ], 
    "<net.smert.jreactphysics3d.engine.DynamicsWorld: int getNumJoints()>": [
        {
            "<com.flowpowered.react.engine.DynamicsWorld: int getNbRigidBodies()>": 0.5547619047619047
        }, 
        {
            "<com.flowpowered.react.engine.DynamicsWorld: int getNbJoints()>": 0.5547619047619047
        }, 
        {
            "<org.jbox2d.common.MathUtils: int max(int,int)>": 0.3652167676687162
        }, 
        {
            "<org.jbox2d.common.MathUtils: int min(int,int)>": 0.3652167676687162
        }, 
        {
            "<org.jbox2d.particle.ParticleSystem: int limitCapacity(int,int)>": 0.3652167676687162
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 inverse()>": [
        {
            "<org.jbox2d.collision.shapes.ChainShape: void computeAABB(org.jbox2d.collision.AABB,org.jbox2d.common.Transform,int)>": 0.4909495926705899
        }, 
        {
            "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 multiply(com.flowpowered.react.math.Matrix4x4,com.flowpowered.react.math.Matrix4x4)>": 0.48638509115985595
        }, 
        {
            "<org.jbox2d.common.Vec3: void crossToOutUnsafe(org.jbox2d.common.Vec3,org.jbox2d.common.Vec3,org.jbox2d.common.Vec3)>": 0.48526579810350423
        }, 
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.48365259381642617
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.48277336083655353
        }
    ], 
    "<net.smert.jreactphysics3d.engine.CollisionWorld: int computeNextAvailableBodyID()>": [
        {
            "<org.box2d.proto.Box2D$PbJoint: int getJoints(int)>": 0.49570856123589774
        }, 
        {
            "<org.box2d.proto.Box2D$PbJoint$Builder: int getJoints(int)>": 0.49570856123589774
        }, 
        {
            "<org.box2d.proto.Box2D$PbJoint: int getBodies(int)>": 0.49570856123589774
        }, 
        {
            "<org.box2d.proto.Box2D$PbJoint$Builder: int getBodies(int)>": 0.49570856123589774
        }, 
        {
            "<Catalano.Core.Structs.BinaryHeap: java.lang.Comparable remove()>": 0.40791721206340203
        }
    ], 
    "<net.smert.jreactphysics3d.engine.ProfileNodeIterator: int getCurrentParentNumTotalCalls()>": [
        {
            "<org.jbox2d.common.MathUtils: int max(int,int)>": 0.3652167676687162
        }, 
        {
            "<org.jbox2d.common.MathUtils: int min(int,int)>": 0.3652167676687162
        }, 
        {
            "<org.jbox2d.particle.ParticleSystem: int limitCapacity(int,int)>": 0.3652167676687162
        }, 
        {
            "<net.imglib2.display.ColorTable16: int get(int,int)>": 0.32170772231096606
        }, 
        {
            "<com.flowpowered.react.collision.narrowphase.EPA.EdgeEPA: int getTargetVertexIndex()>": 0.3184893664460647
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Mathematics: float Cos(float)>": [
        {
            "<org.jbox2d.common.MathUtils: float sqrt(float)>": 1.0
        }, 
        {
            "<org.jbox2d.testbed.perf.MathPerf: void runFloorTest(float)>": 0.6680293976951683
        }, 
        {
            "<org.jbox2d.testbed.perf.MathPerf: void runCeilTest(float)>": 0.6680293976951683
        }, 
        {
            "<org.jbox2d.testbed.perf.MathPerf: void runSinTest(float)>": 0.6680293976951683
        }, 
        {
            "<boofcv.alg.interpolate.impl.NearestNeighborPixel_F32: float get_border(float,float)>": 0.5521154917877251
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Quaternion: void <init>(float,float,float,float)>": [
        {
            "<com.flowpowered.react.math.Vector4: void <init>(float,float,float,float)>": 0.6180618128461138
        }, 
        {
            "<com.flowpowered.react.math.Quaternion: void <init>(float,float,float,float)>": 0.6180618128461138
        }, 
        {
            "<com.flowpowered.react.math.Vector3: void <init>(float,float,float)>": 0.6096428276718958
        }, 
        {
            "<org.jbox2d.testbed.pooling.ColorKey: void set(float,float,float)>": 0.5931139020795722
        }, 
        {
            "<com.flowpowered.react.math.Vector2: void <init>(float,float)>": 0.587286033968297
        }
    ], 
    "<net.smert.jreactphysics3d.collision.shapes.CapsuleShape: void getLocalBounds(net.smert.jreactphysics3d.mathematics.Vector3,net.smert.jreactphysics3d.mathematics.Vector3)>": [
        {
            "<com.flowpowered.react.math.Vector4: com.flowpowered.react.math.Vector4 negate()>": 0.36281498138003654
        }, 
        {
            "<org.jbox2d.common.Vec2: void absLocal()>": 0.3626231103459949
        }, 
        {
            "<org.jbox2d.common.Vec2: float length()>": 0.3589100371535545
        }, 
        {
            "<com.flowpowered.react.math.Vector3: com.flowpowered.react.math.Vector3 negate()>": 0.358539627203273
        }, 
        {
            "<org.jbox2d.testbed.perf.MathPerf: void runSinLUTTest(float)>": 0.3585032904662092
        }
    ], 
    "<net.smert.jreactphysics3d.body.CollisionBody: void resetContactManifoldsList()>": [
        {
            "<org.dyn4j.collision.broadphase.DynamicAABBTree: void validate(org.dyn4j.collision.broadphase.DynamicAABBTreeNode)>": 0.5225132424527937
        }, 
        {
            "<net.imglib2.transform.integer.SlicingTransform: boolean getComponentZero(int)>": 0.5081144094644451
        }, 
        {
            "<net.imglib2.transform.integer.MixedTransform: boolean getComponentZero(int)>": 0.5081144094644451
        }, 
        {
            "<net.imglib2.transform.integer.MixedTransform: boolean getComponentInversion(int)>": 0.5081144094644451
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void validateStructure(org.jbox2d.collision.broadphase.DynamicTreeNode)>": 0.4981282201938135
        }
    ], 
    "<net.smert.jreactphysics3d.constraint.HingeJoint: void solveVelocityConstraint(net.smert.jreactphysics3d.engine.ConstraintSolverData)>": [
        {
            "<com.flowpowered.react.math.Quaternion: com.flowpowered.react.math.Quaternion getInverse()>": 0.18537623095901168
        }, 
        {
            "<org.jbox2d.collision.shapes.ChainShape: void computeAABB(org.jbox2d.collision.AABB,org.jbox2d.common.Transform,int)>": 0.18530313641508667
        }, 
        {
            "<org.jbox2d.collision.shapes.CircleShape: boolean testPoint(org.jbox2d.common.Transform,org.jbox2d.common.Vec2)>": 0.18409902577227122
        }, 
        {
            "<org.jbox2d.common.Vec3: void crossToOutUnsafe(org.jbox2d.common.Vec3,org.jbox2d.common.Vec3,org.jbox2d.common.Vec3)>": 0.18362437637600793
        }, 
        {
            "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 multiply(com.flowpowered.react.math.Matrix4x4,com.flowpowered.react.math.Matrix4x4)>": 0.1827845756699409
        }
    ], 
    "<net.smert.jreactphysics3d.collision.shapes.ConvexMeshShape: void recalculateBounds()>": [
        {
            "<Catalano.Math.Vector3: float getMin()>": 0.3249378524416517
        }, 
        {
            "<Catalano.Math.Vector3: float getMax()>": 0.3249378524416517
        }, 
        {
            "<boofcv.alg.distort.DistortImageOps: void updateBoundBox(boofcv.struct.distort.PixelTransform_F32,boofcv.struct.ImageRectangle_F32)>": 0.32145530855790505
        }, 
        {
            "<Catalano.Math.Vector4: boolean equals(java.lang.Object)>": 0.31390453730400575
        }, 
        {
            "<Catalano.Math.Vector3: boolean equals(java.lang.Object)>": 0.3007384904846074
        }
    ], 
    "<net.smert.jreactphysics3d.body.RigidBody: void setLinearVelocity(net.smert.jreactphysics3d.mathematics.Vector3)>": [
        {
            "<boofcv.abst.sfm.d3.WrapVisOdomPixelDepthPnP: boolean isFault()>": 0.13717218052474262
        }, 
        {
            "<boofcv.abst.sfm.d3.VisOdomPixelDepthPnP_to_DepthVisualOdometry: boolean isFault()>": 0.13717218052474262
        }, 
        {
            "<boofcv.io.javacv.JavaCVVideoImageSequence: boolean hasNext()>": 0.13717218052474262
        }, 
        {
            "<net.imglib2.type.volatiles.AbstractVolatileRealType: boolean valueEquals(net.imglib2.type.volatiles.AbstractVolatileRealType)>": 0.13654731034339573
        }, 
        {
            "<net.imglib2.type.volatiles.AbstractVolatileNumericType: boolean valueEquals(net.imglib2.type.volatiles.AbstractVolatileNumericType)>": 0.13654731034339573
        }
    ], 
    "<net.smert.jreactphysics3d.body.CollisionBody: void updateAABB()>": [
        {
            "<org.dyn4j.sandbox.panels.LineGraphPanel: void setStaticSize(java.awt.Dimension)>": 0.06666666666666665
        }, 
        {
            "<org.jbox2d.testbed.tests.DrawingParticles: void step(org.jbox2d.testbed.framework.TestbedSettings)>": 0.06454972243679029
        }, 
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.06397612635199752
        }, 
        {
            "<boofcv.gui.feature.SelectRegionDescriptionPanel: void <init>()>": 0.06329621044272916
        }, 
        {
            "<boofcv.gui.d3.Polygon3DSequenceViewer: void <init>()>": 0.06266005147845038
        }
    ], 
    "<net.smert.jreactphysics3d.collision.narrowphase.EPA.Utils: void halfLink(net.smert.jreactphysics3d.collision.narrowphase.EPA.EdgeEPA,net.smert.jreactphysics3d.collision.narrowphase.EPA.EdgeEPA)>": [
        {
            "<net.imglib2.transform.integer.ComponentMappingTransform: int getComponentMapping(int)>": 0.4305863320519367
        }, 
        {
            "<net.imglib2.transform.integer.SlicingTransform: int getComponentMapping(int)>": 0.4305863320519367
        }, 
        {
            "<net.imglib2.transform.integer.MixedTransform: int getComponentMapping(int)>": 0.4305863320519367
        }, 
        {
            "<org.jbox2d.particle.ParticleSystem: void setParticleMaxCount(int)>": 0.42881010210899617
        }, 
        {
            "<net.imglib2.transform.integer.SlicingTransform: boolean getComponentZero(int)>": 0.4269694179785698
        }
    ], 
    "<net.smert.jreactphysics3d.engine.DynamicsWorld: void <init>(net.smert.jreactphysics3d.mathematics.Vector3,float)>": [
        {
            "<org.dyn4j.sandbox.persist.XmlReader: void <init>()>": 0.34094332857350057
        }, 
        {
            "<boofcv.gui.feature.FancyInterestPointRender: void <init>()>": 0.32810348511110604
        }, 
        {
            "<com.flowpowered.react.engine.DynamicsWorld: void <init>(com.flowpowered.react.math.Vector3,float)>": 0.32505012799277816
        }, 
        {
            "<boofcv.gui.feature.ScaleSpacePyramidPointPanel: void <init>(double)>": 0.3204034257424313
        }, 
        {
            "<boofcv.alg.filter.binary.Contour: void <init>()>": 0.32039781247108745
        }
    ], 
    "<net.smert.jreactphysics3d.collision.broadphase.PairManager: net.smert.jreactphysics3d.collision.broadphase.BodyPair findPairWithHashValue(int,int,int)>": [
        {
            "<org.jbox2d.common.MathUtils: int max(int,int)>": 0.6583990341264905
        }, 
        {
            "<org.jbox2d.common.MathUtils: int min(int,int)>": 0.6583990341264905
        }, 
        {
            "<org.jbox2d.particle.ParticleSystem: int limitCapacity(int,int)>": 0.6583990341264905
        }, 
        {
            "<Catalano.Imaging.Texture.BinaryPattern.UniformLocalBinaryPattern: boolean isUniform(int)>": 0.6394084890239877
        }, 
        {
            "<com.flowpowered.react.collision.broadphase.PairManager: com.flowpowered.react.collision.broadphase.PairManager$BodyPair findPairWithHashValue(int,int,int)>": 0.5776820346027153
        }
    ], 
    "<net.smert.jreactphysics3d.collision.shapes.CollisionShapeType: net.smert.jreactphysics3d.collision.shapes.CollisionShapeType valueOf(java.lang.String)>": [
        {
            "<Catalano.Statistics.Analysis.PrincipalComponentAnalysis$AnalysisMethod: Catalano.Statistics.Analysis.PrincipalComponentAnalysis$AnalysisMethod valueOf(java.lang.String)>": 0.260989010989011
        }, 
        {
            "<Catalano.Imaging.Filters.ExtractBoundary$Algorithm: Catalano.Imaging.Filters.ExtractBoundary$Algorithm valueOf(java.lang.String)>": 0.260989010989011
        }, 
        {
            "<Catalano.Imaging.FastBitmap$CoordinateSystem: Catalano.Imaging.FastBitmap$CoordinateSystem valueOf(java.lang.String)>": 0.260989010989011
        }, 
        {
            "<Catalano.Imaging.Filters.ExtractRGBChannel$Channel: Catalano.Imaging.Filters.ExtractRGBChannel$Channel valueOf(java.lang.String)>": 0.260989010989011
        }, 
        {
            "<Catalano.Imaging.Filters.ExtractYCbCrChannel$Channel: Catalano.Imaging.Filters.ExtractYCbCrChannel$Channel valueOf(java.lang.String)>": 0.260989010989011
        }
    ], 
    "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: boolean computeClosestPoint(net.smert.jreactphysics3d.mathematics.Vector3)>": [
        {
            "<Catalano.Imaging.Texture.BinaryPattern.UniformLocalBinaryPattern: boolean isUniform(int)>": 0.6244661251568818
        }, 
        {
            "<net.coobird.thumbnailator.util.exif.IfdStructure: boolean isOffset()>": 0.6123477118967917
        }, 
        {
            "<com.flowpowered.react.collision.narrowphase.GJK.Simplex: boolean overlap(int,int)>": 0.5912841435414424
        }, 
        {
            "<com.flowpowered.react.collision.narrowphase.GJK.Simplex: boolean isSubset(int,int)>": 0.5912841435414424
        }, 
        {
            "<net.coobird.thumbnailator.util.exif.IfdStructure: boolean isValue()>": 0.5646352633744229
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 abs()>": [
        {
            "<com.flowpowered.react.math.Vector4: com.flowpowered.react.math.Vector4 negate()>": 0.5232893931499558
        }, 
        {
            "<org.jbox2d.common.Vec2: void absLocal()>": 0.5208570062331547
        }, 
        {
            "<com.flowpowered.react.math.Vector3: com.flowpowered.react.math.Vector3 negate()>": 0.5167424406904956
        }, 
        {
            "<com.flowpowered.react.math.Quaternion: void <init>(float,com.flowpowered.react.math.Vector3)>": 0.5122097433874673
        }, 
        {
            "<com.flowpowered.react.math.Quaternion: void <init>(com.flowpowered.react.math.Quaternion)>": 0.501219689125599
        }
    ], 
    "<net.smert.jreactphysics3d.constraint.FixedJoint: void <init>(net.smert.jreactphysics3d.constraint.FixedJointInfo)>": [
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.07445774139675114
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.TestbedMain: void main(java.lang.String[])>": 0.06892472707262447
        }, 
        {
            "<org.dyn4j.sandbox.Sandbox: void init(com.jogamp.opengl.GLAutoDrawable)>": 0.0686327806861062
        }, 
        {
            "<boofcv.demonstrations.transform.pyramid.EdgeIntensitiesApp: void main(java.lang.String[])>": 0.06584431872455206
        }, 
        {
            "<boofcv.demonstrations.tracker.CirculantVisualizationPanel: void <init>(boofcv.demonstrations.tracker.CirculantVisualizationPanel$Listener)>": 0.06467939667340174
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Transform: int hashCode()>": [
        {
            "<Catalano.Core.IntRange: int hashCode()>": 0.4754907433632905
        }, 
        {
            "<Catalano.Core.IntPoint: int hashCode()>": 0.39244301178161445
        }, 
        {
            "<boofcv.alg.feature.describe.DescribeSiftCommon: int getDescriptorLength()>": 0.3869035467634413
        }, 
        {
            "<boofcv.alg.filter.misc.ImplAverageDownSampleN: void down(boofcv.struct.image.GrayS8,int,boofcv.struct.image.GrayI8)>": 0.38300339920480586
        }, 
        {
            "<boofcv.alg.filter.misc.ImplAverageDownSampleN: void down(boofcv.struct.image.GrayU8,int,boofcv.struct.image.GrayI8)>": 0.38222131364607825
        }
    ], 
    "<net.smert.jreactphysics3d.engine.DynamicsWorld: void addContactManifoldToBody(net.smert.jreactphysics3d.engine.ContactManifold,net.smert.jreactphysics3d.body.CollisionBody,net.smert.jreactphysics3d.body.CollisionBody)>": [
        {
            "<org.dyn4j.collision.broadphase.DynamicAABBTree: void validate(org.dyn4j.collision.broadphase.DynamicAABBTreeNode)>": 0.24539564986822143
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void validateStructure(org.jbox2d.collision.broadphase.DynamicTreeNode)>": 0.2381066930433852
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTreeFlatNodes: void validateStructure(int)>": 0.23512814100652465
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void validateMetrics(org.jbox2d.collision.broadphase.DynamicTreeNode)>": 0.22925427737952578
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void validate()>": 0.2283613107991762
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Transform: float[] getOpenGLMatrix(float[])>": [
        {
            "<Catalano.Math.Matrix3x3: float[] toArray()>": 0.37539567064477664
        }, 
        {
            "<Catalano.Math.Vector4: float[] toArray()>": 0.35604876636500604
        }, 
        {
            "<Catalano.Imaging.Filters.YCbCrFiltering: float[] getFillColor()>": 0.34051217943087564
        }, 
        {
            "<Catalano.Imaging.Concurrent.Filters.YCbCrFiltering: float[] getFillColor()>": 0.34051217943087564
        }, 
        {
            "<Catalano.Math.Vector3: float[] toArray()>": 0.34051217943087564
        }
    ], 
    "<net.smert.jreactphysics3d.collision.narrowphase.GJK.GJKAlgorithm: boolean addContactInfo(net.smert.jreactphysics3d.collision.shapes.CollisionShape,net.smert.jreactphysics3d.mathematics.Transform,net.smert.jreactphysics3d.collision.shapes.CollisionShape,net.smert.jreactphysics3d.mathematics.Transform,net.smert.jreactphysics3d.constraint.ContactPointInfo,net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex)>": [
        {
            "<org.jbox2d.common.Vec2: void crossToOutUnsafe(org.jbox2d.common.Vec2,float,org.jbox2d.common.Vec2)>": 0.17202662025502602
        }, 
        {
            "<org.jbox2d.common.Vec2: void crossToOutUnsafe(float,org.jbox2d.common.Vec2,org.jbox2d.common.Vec2)>": 0.17202662025502602
        }, 
        {
            "<org.jbox2d.common.MathUtils: float abs(float)>": 0.1673027503425279
        }, 
        {
            "<org.jbox2d.dynamics.joints.FrictionJoint: void setMaxTorque(float)>": 0.16393996479782014
        }, 
        {
            "<org.jbox2d.dynamics.joints.MotorJoint: void setMaxForce(float)>": 0.16393996479782014
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Vector2 getRow(int)>": [
        {
            "<boofcv.struct.image.Planar: boofcv.struct.image.ImageGray getBand(int)>": 0.34467242229591777
        }, 
        {
            "<boofcv.alg.InputSanityCheck: void checkSameShapeB(boofcv.struct.image.ImageMultiBand,boofcv.struct.image.ImageMultiBand)>": 0.3334972761205077
        }, 
        {
            "<boofcv.factory.feature.detect.template.FactoryTemplateMatching: boofcv.alg.feature.detect.template.TemplateMatchingIntensity createIntensity(boofcv.factory.feature.detect.template.TemplateScoreType,java.lang.Class)>": 0.32987151699980805
        }, 
        {
            "<boofcv.alg.InputSanityCheck: void checkSameShape(boofcv.struct.image.ImageBase,boofcv.struct.image.ImageBase)>": 0.3231577598010444
        }, 
        {
            "<boofcv.struct.convolve.KernelBase: void <init>(int)>": 0.31386683056432724
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Mathematics: float Tan(float)>": [
        {
            "<org.jbox2d.common.MathUtils: float sqrt(float)>": 1.0
        }, 
        {
            "<org.jbox2d.testbed.perf.MathPerf: void runFloorTest(float)>": 0.6680293976951683
        }, 
        {
            "<org.jbox2d.testbed.perf.MathPerf: void runCeilTest(float)>": 0.6680293976951683
        }, 
        {
            "<org.jbox2d.testbed.perf.MathPerf: void runSinTest(float)>": 0.6680293976951683
        }, 
        {
            "<boofcv.alg.interpolate.impl.NearestNeighborPixel_F32: float get_border(float,float)>": 0.5521154917877251
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Vector3: void <init>(float,float,float)>": [
        {
            "<com.flowpowered.react.math.Vector4: void <init>(float,float,float,float)>": 0.6064048416899118
        }, 
        {
            "<com.flowpowered.react.math.Quaternion: void <init>(float,float,float,float)>": 0.6064048416899118
        }, 
        {
            "<com.flowpowered.react.math.Vector3: void <init>(float,float,float)>": 0.5983705163570805
        }, 
        {
            "<org.jbox2d.testbed.pooling.ColorKey: void set(float,float,float)>": 0.5817182942597562
        }, 
        {
            "<com.flowpowered.react.math.Vector2: void <init>(float,float)>": 0.5768797800488626
        }
    ], 
    "<net.smert.jreactphysics3d.constraint.SliderJoint: void setMaxMotorForce(float)>": [
        {
            "<org.jbox2d.dynamics.joints.FrictionJoint: void setMaxTorque(float)>": 0.4790727853388627
        }, 
        {
            "<org.jbox2d.dynamics.joints.MotorJoint: void setMaxForce(float)>": 0.4790727853388627
        }, 
        {
            "<org.jbox2d.dynamics.joints.FrictionJoint: void setMaxForce(float)>": 0.4790727853388627
        }, 
        {
            "<org.jbox2d.dynamics.joints.MotorJoint: void setMaxTorque(float)>": 0.4790727853388627
        }, 
        {
            "<org.jbox2d.dynamics.Fixture: void setDensity(float)>": 0.4790727853388627
        }
    ], 
    "<net.smert.jreactphysics3d.constraint.BallAndSocketJoint: void solvePositionConstraint(net.smert.jreactphysics3d.engine.ConstraintSolverData)>": [
        {
            "<org.dyn4j.dynamics.World: void step(int)>": 0.10780739666490796
        }, 
        {
            "<net.imglib2.view.TransformBuilder: void <init>(net.imglib2.Interval,net.imglib2.RandomAccessible)>": 0.0994916428407433
        }, 
        {
            "<org.dyn4j.dynamics.World: void step()>": 0.09858117489606477
        }, 
        {
            "<net.imglib2.view.TransformBuilder: void simplifyTransforms()>": 0.0979023192924156
        }, 
        {
            "<org.dyn4j.sandbox.Sandbox: void renderBody(com.jogamp.opengl.GL2,org.dyn4j.sandbox.SandboxBody)>": 0.09690261539986675
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Vector2: net.smert.jreactphysics3d.mathematics.Vector2 divide(float)>": [
        {
            "<org.jbox2d.common.Vec2: void crossToOutUnsafe(org.jbox2d.common.Vec2,float,org.jbox2d.common.Vec2)>": 0.48351206692553145
        }, 
        {
            "<org.jbox2d.common.Vec2: void crossToOutUnsafe(float,org.jbox2d.common.Vec2,org.jbox2d.common.Vec2)>": 0.48351206692553145
        }, 
        {
            "<org.jbox2d.dynamics.joints.FrictionJoint: void setMaxTorque(float)>": 0.44427220179298915
        }, 
        {
            "<org.jbox2d.dynamics.joints.MotorJoint: void setMaxForce(float)>": 0.44427220179298915
        }, 
        {
            "<org.jbox2d.dynamics.joints.FrictionJoint: void setMaxForce(float)>": 0.44427220179298915
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Vector2: net.smert.jreactphysics3d.mathematics.Vector2 multiply(float)>": [
        {
            "<com.flowpowered.react.math.Matrix4x4: float determinant3x3(float,float,float,float,float,float,float,float,float)>": 0.49533228618860253
        }, 
        {
            "<org.jbox2d.common.MathUtils: float map(float,float,float,float,float)>": 0.47362072319969056
        }, 
        {
            "<org.jbox2d.common.MathUtils: float randomFloat(java.util.Random,float,float)>": 0.4566600847243744
        }, 
        {
            "<org.jbox2d.common.MathUtils: float randomFloat(float,float)>": 0.44289774895313405
        }, 
        {
            "<Catalano.Core.FloatPoint: void Subtract(float)>": 0.43786040026564693
        }
    ], 
    "<net.smert.jreactphysics3d.collision.CollisionDetection: void removeNoCollisionPair(net.smert.jreactphysics3d.body.CollisionBody,net.smert.jreactphysics3d.body.CollisionBody)>": [
        {
            "<com.flowpowered.react.engine.DynamicsWorld: void addRigidBody(com.flowpowered.react.body.RigidBody)>": 0.1343369338343609
        }, 
        {
            "<com.flowpowered.react.engine.DynamicsWorld: void disperseCache()>": 0.1281911184839599
        }, 
        {
            "<com.flowpowered.react.engine.DynamicsWorld: void addRigidBodyIgnoreTick(com.flowpowered.react.body.RigidBody)>": 0.1246713492382436
        }, 
        {
            "<com.flowpowered.react.engine.DynamicsWorld: com.flowpowered.react.body.RigidBody createRigidBody(com.flowpowered.react.math.Transform,float,com.flowpowered.react.math.Matrix3x3,com.flowpowered.react.collision.shape.CollisionShape)>": 0.10226474967574431
        }, 
        {
            "<com.flowpowered.react.engine.linked.LinkedDynamicsWorld: void addLinkedBodies(java.util.Collection)>": 0.08814083565585298
        }
    ], 
    "<net.smert.jreactphysics3d.engine.ProfileNodeIterator: float getCurrentTotalTime()>": [
        {
            "<org.jbox2d.dynamics.contacts.Contact: float mixFriction(float,float)>": 0.3216542740930425
        }, 
        {
            "<org.jbox2d.common.Settings: float mixFriction(float,float)>": 0.3216542740930425
        }, 
        {
            "<Catalano.Math.Geometry.PointsCloud: void setQuadrilateralRelativeDistortionLimit(float)>": 0.31890119730361305
        }, 
        {
            "<org.jbox2d.common.Rot: float getAngle()>": 0.31672989028797055
        }, 
        {
            "<org.jbox2d.common.MathUtils: float fastAbs(float)>": 0.316544402091575
        }
    ], 
    "<net.smert.jreactphysics3d.collision.shapes.CylinderShape: void getLocalBounds(net.smert.jreactphysics3d.mathematics.Vector3,net.smert.jreactphysics3d.mathematics.Vector3)>": [
        {
            "<org.jbox2d.common.Vec2: void absLocal()>": 0.34505910739395607
        }, 
        {
            "<com.flowpowered.react.math.Vector4: com.flowpowered.react.math.Vector4 negate()>": 0.3450529198944138
        }, 
        {
            "<com.flowpowered.react.math.Vector3: com.flowpowered.react.math.Vector3 negate()>": 0.34098344454146673
        }, 
        {
            "<com.flowpowered.react.math.Quaternion: void <init>(float,com.flowpowered.react.math.Vector3)>": 0.34029197662861754
        }, 
        {
            "<org.jbox2d.dynamics.contacts.Contact: float mixFriction(float,float)>": 0.3370425206919152
        }
    ], 
    "<net.smert.jreactphysics3d.constraint.ContactPoint: void setFrictionVector2(net.smert.jreactphysics3d.mathematics.Vector3)>": [
        {
            "<Catalano.Imaging.Filters.UnsharpMasking: void <init>()>": 0.057863756235784464
        }, 
        {
            "<Catalano.Imaging.Concurrent.Filters.SobelEdgeDetector: void <init>()>": 0.057863756235784464
        }, 
        {
            "<Catalano.Imaging.Corners.Fast12: void <init>()>": 0.057863756235784464
        }, 
        {
            "<Catalano.Imaging.Corners.Fast9: void <init>()>": 0.057863756235784464
        }, 
        {
            "<boofcv.gui.tracker.TrackerObjectQuadPanel: void enterSelectMode()>": 0.057863756235784464
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Vector3 getRow(int)>": [
        {
            "<boofcv.factory.background.FactoryBackgroundModel: boofcv.alg.background.stationary.BackgroundStationaryGaussian stationaryGaussian(boofcv.factory.background.ConfigBackgroundGaussian,boofcv.struct.image.ImageType)>": 0.31940454435690274
        }, 
        {
            "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 negate(com.flowpowered.react.math.Matrix4x4)>": 0.3187194946947619
        }, 
        {
            "<com.flowpowered.react.math.Matrix4x4: void setAllValues(float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float)>": 0.3187183513435457
        }, 
        {
            "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 set(com.flowpowered.react.math.Matrix4x4)>": 0.314898135874689
        }, 
        {
            "<com.flowpowered.react.math.Matrix3x3: com.flowpowered.react.math.Matrix3x3 negate(com.flowpowered.react.math.Matrix3x3)>": 0.313059183816465
        }
    ], 
    "<net.smert.jreactphysics3d.constraint.HingeJoint: float computeCurrentHingeAngle(net.smert.jreactphysics3d.mathematics.Quaternion,net.smert.jreactphysics3d.mathematics.Quaternion)>": [
        {
            "<com.flowpowered.react.constraint.HingeJoint: float computeCorrespondingAngleNearLimits(float,float,float)>": 0.4402303232586471
        }, 
        {
            "<com.flowpowered.react.constraint.HingeJoint: float computeCurrentHingeAngle(com.flowpowered.react.math.Quaternion,com.flowpowered.react.math.Quaternion)>": 0.4310184997368713
        }, 
        {
            "<boofcv.alg.distort.radtan.RemoveRadialPtoN_F32: void compute(float,float,georegression.struct.point.Point2D_F32)>": 0.37313257399412664
        }, 
        {
            "<org.jbox2d.collision.shapes.ChainShape: void computeAABB(org.jbox2d.collision.AABB,org.jbox2d.common.Transform,int)>": 0.3694886213011252
        }, 
        {
            "<org.jbox2d.particle.ParticleSystem: void raycast(org.jbox2d.callbacks.ParticleRaycastCallback,org.jbox2d.common.Vec2,org.jbox2d.common.Vec2)>": 0.367536102990365
        }
    ], 
    "<net.smert.jreactphysics3d.engine.DynamicsWorld: net.smert.jreactphysics3d.constraint.Joint createJoint(net.smert.jreactphysics3d.constraint.JointInfo)>": [
        {
            "<org.jbox2d.collision.broadphase.DynamicTreeFlatNodes: void validateStructure(int)>": 0.35479940618823597
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTreeFlatNodes: void validate()>": 0.34308623911012054
        }, 
        {
            "<net.imglib2.AbstractInterval: long min(int)>": 0.3401642355984363
        }, 
        {
            "<net.imglib2.AbstractInterval: long max(int)>": 0.3401642355984363
        }, 
        {
            "<net.imglib2.AbstractInterval: double realMax(int)>": 0.3350684991912381
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 abs()>": [
        {
            "<com.flowpowered.react.math.Vector4: com.flowpowered.react.math.Vector4 negate()>": 0.5273928443514424
        }, 
        {
            "<org.jbox2d.common.Vec2: void absLocal()>": 0.524389278447785
        }, 
        {
            "<com.flowpowered.react.math.Vector3: com.flowpowered.react.math.Vector3 negate()>": 0.5206146675935647
        }, 
        {
            "<com.flowpowered.react.math.Quaternion: void <init>(float,com.flowpowered.react.math.Vector3)>": 0.5163052203874557
        }, 
        {
            "<com.flowpowered.react.math.Quaternion: void <init>(com.flowpowered.react.math.Quaternion)>": 0.5051936669215925
        }
    ], 
    "<net.smert.jreactphysics3d.engine.ContactSolver: void computeFrictionVectors(net.smert.jreactphysics3d.mathematics.Vector3,net.smert.jreactphysics3d.engine.ContactPointSolver)>": [
        {
            "<org.jbox2d.dynamics.joints.FrictionJoint: void setMaxTorque(float)>": 0.16157592742015622
        }, 
        {
            "<org.jbox2d.dynamics.joints.MotorJoint: void setMaxForce(float)>": 0.16157592742015622
        }, 
        {
            "<org.jbox2d.dynamics.joints.FrictionJoint: void setMaxForce(float)>": 0.16157592742015622
        }, 
        {
            "<org.jbox2d.dynamics.joints.MotorJoint: void setMaxTorque(float)>": 0.16157592742015622
        }, 
        {
            "<org.jbox2d.dynamics.Fixture: void setDensity(float)>": 0.16157592742015622
        }
    ], 
    "<net.smert.jreactphysics3d.engine.ContactSolver: net.smert.jreactphysics3d.engine.Impulse computeFriction2Impulse(float,net.smert.jreactphysics3d.engine.ContactPointSolver)>": [
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.05406969538743987
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.TestbedMain: void main(java.lang.String[])>": 0.0500517330712619
        }, 
        {
            "<org.dyn4j.sandbox.Sandbox: void init(com.jogamp.opengl.GLAutoDrawable)>": 0.04993793391089262
        }, 
        {
            "<boofcv.demonstrations.transform.pyramid.EdgeIntensitiesApp: void main(java.lang.String[])>": 0.0478148032648406
        }, 
        {
            "<boofcv.demonstrations.tracker.CirculantVisualizationPanel: void <init>(boofcv.demonstrations.tracker.CirculantVisualizationPanel$Listener)>": 0.04705600133945223
        }
    ], 
    "<net.smert.jreactphysics3d.collision.shapes.CapsuleShape: void <init>(float,float,float)>": [
        {
            "<org.jbox2d.dynamics.joints.FrictionJoint: void setMaxTorque(float)>": 0.5303044553837413
        }, 
        {
            "<org.jbox2d.dynamics.joints.MotorJoint: void setMaxForce(float)>": 0.5303044553837413
        }, 
        {
            "<org.jbox2d.dynamics.joints.FrictionJoint: void setMaxForce(float)>": 0.5303044553837413
        }, 
        {
            "<org.jbox2d.dynamics.joints.MotorJoint: void setMaxTorque(float)>": 0.5303044553837413
        }, 
        {
            "<org.jbox2d.dynamics.Fixture: void setDensity(float)>": 0.5303044553837413
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Quaternion: boolean equals(java.lang.Object)>": [
        {
            "<org.jbox2d.testbed.pooling.ColorKey: boolean equals(java.lang.Object)>": 0.6650301812562168
        }, 
        {
            "<com.flowpowered.react.math.Quaternion: boolean equals(java.lang.Object)>": 0.6638889121434985
        }, 
        {
            "<com.flowpowered.react.math.Vector4: boolean equals(java.lang.Object)>": 0.662009833403327
        }, 
        {
            "<org.jbox2d.common.Vec3: boolean equals(java.lang.Object)>": 0.6546687736913049
        }, 
        {
            "<com.flowpowered.react.math.Vector3: boolean equals(java.lang.Object)>": 0.6539333556738265
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Transform: void <init>()>": [
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.11080990131310584
        }, 
        {
            "<org.dyn4j.sandbox.Sandbox: void init(com.jogamp.opengl.GLAutoDrawable)>": 0.10354988890711547
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.TestbedMain: void main(java.lang.String[])>": 0.10257552890643451
        }, 
        {
            "<boofcv.gui.d3.Polygon3DSequenceViewer: void <init>()>": 0.09819416488312337
        }, 
        {
            "<boofcv.demonstrations.transform.pyramid.EdgeIntensitiesApp: void main(java.lang.String[])>": 0.09799118698777318
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 add(net.smert.jreactphysics3d.mathematics.Matrix2x2)>": [
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.4568705818995089
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.4558853245183447
        }, 
        {
            "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 multiply(com.flowpowered.react.math.Matrix4x4,com.flowpowered.react.math.Matrix4x4)>": 0.4526111104230872
        }, 
        {
            "<com.flowpowered.react.math.Quaternion: void inverse()>": 0.45247493499710123
        }, 
        {
            "<org.jbox2d.particle.ParticleSystem: void raycast(org.jbox2d.callbacks.ParticleRaycastCallback,org.jbox2d.common.Vec2,org.jbox2d.common.Vec2)>": 0.4489439960330402
        }
    ], 
    "<net.smert.jreactphysics3d.engine.CollisionWorld: net.smert.jreactphysics3d.body.CollisionBody createCollisionBody(net.smert.jreactphysics3d.mathematics.Transform,net.smert.jreactphysics3d.collision.shapes.CollisionShape)>": [
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void rebuildBottomUp()>": 0.5094453761905289
        }, 
        {
            "<net.imglib2.AbstractInterval: long min(int)>": 0.5088066516279823
        }, 
        {
            "<net.imglib2.AbstractInterval: long max(int)>": 0.5088066516279823
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTreeFlatNodes: void validate()>": 0.5061881862649485
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTreeFlatNodes: void freeNode(int)>": 0.5058199963463107
        }
    ], 
    "<net.smert.jreactphysics3d.engine.ContactManifold: int getIndexToRemove(int,net.smert.jreactphysics3d.mathematics.Vector3)>": [
        {
            "<com.flowpowered.react.engine.ContactManifold: int getMaxArea(float,float,float,float)>": 0.12342593309418243
        }, 
        {
            "<org.jbox2d.dynamics.joints.PrismaticJoint: void setLimits(float,float)>": 0.08717262279281279
        }, 
        {
            "<org.jbox2d.dynamics.joints.RevoluteJoint: void setLimits(float,float)>": 0.08717262279281279
        }, 
        {
            "<boofcv.alg.feature.disparity.impl.ImplSelectSparseStandardWta_F32: boolean select(float[],int)>": 0.08631775019551534
        }, 
        {
            "<boofcv.alg.filter.kernel.KernelMath: float minAbs(float[],int,float)>": 0.0830897703169141
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 set(float,float,float,float)>": [
        {
            "<org.jbox2d.common.MathUtils: float clamp(float,float,float)>": 0.5091657929297426
        }, 
        {
            "<org.jbox2d.dynamics.contacts.Contact: float mixFriction(float,float)>": 0.5057392147091161
        }, 
        {
            "<org.jbox2d.common.Settings: float mixFriction(float,float)>": 0.5057392147091161
        }, 
        {
            "<boofcv.alg.color.ColorRgb: float rgbToGray_Weighted(float,float,float)>": 0.49093393586844536
        }, 
        {
            "<Catalano.Math.Matrix3x3: void <init>(float,float,float,float,float,float,float,float,float)>": 0.48707463778389637
        }
    ], 
    "<net.smert.jreactphysics3d.engine.ContactSolver: net.smert.jreactphysics3d.engine.Impulse computePenetrationImpulse(float,net.smert.jreactphysics3d.engine.ContactPointSolver)>": [
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.05406969538743987
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.TestbedMain: void main(java.lang.String[])>": 0.0500517330712619
        }, 
        {
            "<org.dyn4j.sandbox.Sandbox: void init(com.jogamp.opengl.GLAutoDrawable)>": 0.04993793391089262
        }, 
        {
            "<boofcv.demonstrations.transform.pyramid.EdgeIntensitiesApp: void main(java.lang.String[])>": 0.0478148032648406
        }, 
        {
            "<boofcv.demonstrations.tracker.CirculantVisualizationPanel: void <init>(boofcv.demonstrations.tracker.CirculantVisualizationPanel$Listener)>": 0.04705600133945223
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Mathematics: float Sqrt(float)>": [
        {
            "<org.jbox2d.common.MathUtils: float sqrt(float)>": 1.0
        }, 
        {
            "<org.jbox2d.testbed.perf.MathPerf: void runFloorTest(float)>": 0.6680293976951683
        }, 
        {
            "<org.jbox2d.testbed.perf.MathPerf: void runCeilTest(float)>": 0.6680293976951683
        }, 
        {
            "<org.jbox2d.testbed.perf.MathPerf: void runSinTest(float)>": 0.6680293976951683
        }, 
        {
            "<boofcv.alg.interpolate.impl.NearestNeighborPixel_F32: float get_border(float,float)>": 0.5521154917877251
        }
    ], 
    "<net.smert.jreactphysics3d.constraint.ContactPoint: void setWorldPointOnBody1(net.smert.jreactphysics3d.mathematics.Vector3)>": [
        {
            "<Catalano.Imaging.Filters.GaussianBlur: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Concurrent.Filters.BradleyLocalThreshold: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.CosineTransform: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.BradleyLocalThreshold: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.UnsharpMasking: void <init>()>": 0.018184824186332698
        }
    ], 
    "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: void computeDeterminants()>": [
        {
            "<com.flowpowered.react.collision.narrowphase.GJK.Simplex: void computeDeterminants()>": 0.6109305773324938
        }, 
        {
            "<com.flowpowered.react.collision.narrowphase.GJK.Simplex: void addPoint(com.flowpowered.react.math.Vector3,com.flowpowered.react.math.Vector3,com.flowpowered.react.math.Vector3)>": 0.5875232086081493
        }, 
        {
            "<Catalano.Imaging.Filters.ImagePyramids: void Downscale(Catalano.Imaging.FastBitmap)>": 0.4030932708142063
        }, 
        {
            "<Catalano.Math.Matrix: float[] MinMax(float[][])>": 0.38337990558473173
        }, 
        {
            "<Catalano.Imaging.Filters.ImagePyramids: float[][][] ConvolutionRGB(Catalano.Imaging.FastBitmap,float[][])>": 0.38288976177403355
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Quaternion: net.smert.jreactphysics3d.mathematics.Quaternion add(net.smert.jreactphysics3d.mathematics.Quaternion)>": [
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.4568705818995089
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.4558853245183447
        }, 
        {
            "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 multiply(com.flowpowered.react.math.Matrix4x4,com.flowpowered.react.math.Matrix4x4)>": 0.4526111104230872
        }, 
        {
            "<com.flowpowered.react.math.Quaternion: void inverse()>": 0.45247493499710123
        }, 
        {
            "<org.jbox2d.particle.ParticleSystem: void raycast(org.jbox2d.callbacks.ParticleRaycastCallback,org.jbox2d.common.Vec2,org.jbox2d.common.Vec2)>": 0.4489439960330402
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Matrix3x3: void <init>(float,float,float,float,float,float,float,float,float)>": [
        {
            "<com.flowpowered.react.math.Vector4: void <init>(float,float,float,float)>": 0.6305295083505689
        }, 
        {
            "<com.flowpowered.react.math.Quaternion: void <init>(float,float,float,float)>": 0.6305295083505689
        }, 
        {
            "<com.flowpowered.react.math.Vector3: void <init>(float,float,float)>": 0.6215615031380365
        }, 
        {
            "<org.jbox2d.testbed.pooling.ColorKey: void set(float,float,float)>": 0.6054569916310034
        }, 
        {
            "<com.flowpowered.react.math.Vector2: void <init>(float,float)>": 0.5980111707315988
        }
    ], 
    "<net.smert.jreactphysics3d.constraint.FixedJoint: void solvePositionConstraint(net.smert.jreactphysics3d.engine.ConstraintSolverData)>": [
        {
            "<net.imglib2.view.TransformBuilder: void <init>(net.imglib2.Interval,net.imglib2.RandomAccessible)>": 0.11187722973472419
        }, 
        {
            "<org.dyn4j.sandbox.Sandbox: void renderBody(com.jogamp.opengl.GL2,org.dyn4j.sandbox.SandboxBody)>": 0.10913434510203804
        }, 
        {
            "<org.dyn4j.dynamics.World: void step(int)>": 0.10802493049048356
        }, 
        {
            "<net.imglib2.view.TransformBuilder: void simplifyTransforms()>": 0.10776283738718916
        }, 
        {
            "<boofcv.factory.feature.detect.extract.FactoryFeatureExtractor: boofcv.abst.feature.detect.extract.NonMaxSuppression nonmax(boofcv.abst.feature.detect.extract.ConfigExtract)>": 0.10692763652810494
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Quaternion: float dot(net.smert.jreactphysics3d.mathematics.Quaternion)>": [
        {
            "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 multiply(com.flowpowered.react.math.Matrix4x4,com.flowpowered.react.math.Matrix4x4)>": 0.5324346903557875
        }, 
        {
            "<Catalano.Math.Vector4: float Square()>": 0.5239180928928826
        }, 
        {
            "<com.flowpowered.react.math.Vector4: float lengthSquare()>": 0.5239180928928826
        }, 
        {
            "<com.flowpowered.react.math.Quaternion: float lengthSquare()>": 0.5239180928928826
        }, 
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.5235437758925611
        }
    ], 
    "<net.smert.jreactphysics3d.collision.narrowphase.EPA.EdgeEPA: int getTargetVertexIndex()>": [
        {
            "<com.flowpowered.react.collision.narrowphase.EPA.EdgeEPA: int indexOfNextCounterClockwiseEdge(int)>": 0.49096103292622384
        }, 
        {
            "<Catalano.Imaging.Filters.GaussianBlur: void setSize(int)>": 0.4434237463277157
        }, 
        {
            "<Catalano.Math.Tools: int PreviousPowerOf2(int)>": 0.4373974620006968
        }, 
        {
            "<org.jbox2d.common.MathUtils: int max(int,int)>": 0.43268987086636657
        }, 
        {
            "<org.jbox2d.common.MathUtils: int min(int,int)>": 0.43268987086636657
        }
    ], 
    "<net.smert.jreactphysics3d.constraint.HingeJoint: void resetLimits()>": [
        {
            "<com.flowpowered.react.constraint.SliderJoint: void setMinTranslationLimit(float)>": 0.13364772704661354
        }, 
        {
            "<com.flowpowered.react.constraint.SliderJoint: void setMaxTranslationLimit(float)>": 0.13364772704661354
        }, 
        {
            "<org.jbox2d.common.Color3f: void <init>()>": 0.1310356045902398
        }, 
        {
            "<org.jbox2d.common.Vec3: void <init>()>": 0.1310356045902398
        }, 
        {
            "<net.imglib2.type.numeric.complex.AbstractComplexType: void setComplexNumber(float,float)>": 0.1309462316541243
        }
    ], 
    "<net.smert.jreactphysics3d.collision.broadphase.PairManager: void <init>(net.smert.jreactphysics3d.collision.CollisionDetection)>": [
        {
            "<Catalano.Imaging.Color: void <init>(int[])>": 0.18460246655488638
        }, 
        {
            "<org.jbox2d.pooling.stacks.DynamicIntStack: void <init>(int)>": 0.18423888166519406
        }, 
        {
            "<Catalano.Statistics.HistogramStatistics: int Mode(int[])>": 0.18178285375329817
        }, 
        {
            "<net.imglib2.transform.integer.permutation.SingleDimensionPermutationTransform: void applyInverse(int[],int[])>": 0.18042195912175807
        }, 
        {
            "<net.imglib2.transform.integer.permutation.SingleDimensionPermutationTransform: void apply(int[],int[])>": 0.18042195912175807
        }
    ], 
    "<net.smert.jreactphysics3d.engine.ContactManifold: void <init>(net.smert.jreactphysics3d.body.CollisionBody,net.smert.jreactphysics3d.body.CollisionBody)>": [
        {
            "<org.jbox2d.common.Color3f: void <init>()>": 0.10484701076891838
        }, 
        {
            "<org.jbox2d.common.Vec3: void <init>()>": 0.10484701076891838
        }, 
        {
            "<boofcv.alg.distort.DistortImageOps: georegression.struct.shapes.RectangleLength2D_F32 boundBox_F32(int,int,boofcv.struct.distort.PixelTransform_F32)>": 0.1013185531961442
        }, 
        {
            "<net.imglib2.type.numeric.complex.AbstractComplexType: void setComplexNumber(float,float)>": 0.09882973245595689
        }, 
        {
            "<boofcv.alg.distort.LensDistortionOps: georegression.struct.shapes.RectangleLength2D_F32 boundBoxInside(int,int,boofcv.struct.distort.PixelTransform_F32)>": 0.09803874967142331
        }
    ], 
    "<net.smert.jreactphysics3d.constraint.SliderJoint: void <init>(net.smert.jreactphysics3d.constraint.SliderJointInfo)>": [
        {
            "<org.dyn4j.collision.broadphase.DynamicAABBTree: void validate(org.dyn4j.collision.broadphase.DynamicAABBTreeNode)>": 0.28349096477658053
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void validateStructure(org.jbox2d.collision.broadphase.DynamicTreeNode)>": 0.2704059667270769
        }, 
        {
            "<org.jbox2d.dynamics.joints.FrictionJoint: void setMaxTorque(float)>": 0.269103872475263
        }, 
        {
            "<org.jbox2d.dynamics.joints.MotorJoint: void setMaxForce(float)>": 0.269103872475263
        }, 
        {
            "<org.jbox2d.dynamics.joints.FrictionJoint: void setMaxForce(float)>": 0.269103872475263
        }
    ], 
    "<net.smert.jreactphysics3d.collision.narrowphase.EPA.TrianglesStore: net.smert.jreactphysics3d.collision.narrowphase.EPA.TriangleEPA newTriangle(net.smert.jreactphysics3d.mathematics.Vector3[],int,int,int)>": [
        {
            "<boofcv.alg.feature.disparity.DisparityScoreWindowFive: void <init>(int,int,int,int)>": 0.44876602184597514
        }, 
        {
            "<boofcv.alg.feature.disparity.DisparityScoreSadRect: void <init>(int,int,int,int)>": 0.44876602184597514
        }, 
        {
            "<boofcv.struct.ImageRectangle: void <init>(int,int,int,int)>": 0.4426953435328841
        }, 
        {
            "<boofcv.struct.image.InterleavedS16: void <init>(int,int,int)>": 0.4391891957376453
        }, 
        {
            "<boofcv.struct.image.InterleavedS8: void <init>(int,int,int)>": 0.4391891957376453
        }
    ], 
    "<net.smert.jreactphysics3d.collision.broadphase.SweepAndPruneAlgorithm: void updateObject(net.smert.jreactphysics3d.body.CollisionBody,net.smert.jreactphysics3d.collision.shapes.AABB)>": [
        {
            "<org.jbox2d.collision.broadphase.DynamicTreeFlatNodes: int getMaxBalance()>": 0.5620946684648916
        }, 
        {
            "<boofcv.alg.fiducial.calib.squares.RegularClustersIntoGrids: int checkNumberOfConnections(java.util.List)>": 0.5372697507034508
        }, 
        {
            "<Catalano.Math.Dissimilarities.Dissimilarity: double SokalMichener(int[],int[])>": 0.527355295010214
        }, 
        {
            "<Catalano.Math.Dissimilarities.Dissimilarity: double RogersTanimoto(int[],int[])>": 0.527355295010214
        }, 
        {
            "<Catalano.Math.Dissimilarities.Dissimilarity: double Yule(int[],int[])>": 0.5239845524460816
        }
    ], 
    "<net.smert.jreactphysics3d.collision.CollisionDetection: void broadPhaseNotifyAddedOverlappingPair(net.smert.jreactphysics3d.collision.broadphase.BodyPair)>": [
        {
            "<net.imglib2.AbstractInterval: long min(int)>": 0.4874052117379034
        }, 
        {
            "<net.imglib2.AbstractInterval: long max(int)>": 0.4874052117379034
        }, 
        {
            "<org.dyn4j.collision.broadphase.DynamicAABBTree: void validate(org.dyn4j.collision.broadphase.DynamicAABBTreeNode)>": 0.48463203030136337
        }, 
        {
            "<net.imglib2.AbstractInterval: double realMax(int)>": 0.4798325180173669
        }, 
        {
            "<net.imglib2.AbstractInterval: double realMin(int)>": 0.4798325180173669
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Vector3: net.smert.jreactphysics3d.mathematics.Vector3 divide(float)>": [
        {
            "<org.jbox2d.common.Vec2: void crossToOutUnsafe(org.jbox2d.common.Vec2,float,org.jbox2d.common.Vec2)>": 0.46739054838066557
        }, 
        {
            "<org.jbox2d.common.Vec2: void crossToOutUnsafe(float,org.jbox2d.common.Vec2,org.jbox2d.common.Vec2)>": 0.46739054838066557
        }, 
        {
            "<org.jbox2d.common.Sweep: void advance(float)>": 0.4461396217030982
        }, 
        {
            "<org.jbox2d.common.Rot: void mulUnsafe(org.jbox2d.common.Rot,org.jbox2d.common.Rot,org.jbox2d.common.Rot)>": 0.44595739969912884
        }, 
        {
            "<org.jbox2d.common.Vec3: void crossToOutUnsafe(org.jbox2d.common.Vec3,org.jbox2d.common.Vec3,org.jbox2d.common.Vec3)>": 0.4428408698146866
        }
    ], 
    "<net.smert.jreactphysics3d.engine.ContactManifold: int getIndexOfDeepestPenetration(net.smert.jreactphysics3d.constraint.ContactPoint)>": [
        {
            "<net.imglib2.transform.integer.SlicingTransform: boolean getComponentZero(int)>": 0.3876275267298442
        }, 
        {
            "<net.imglib2.transform.integer.MixedTransform: boolean getComponentZero(int)>": 0.3876275267298442
        }, 
        {
            "<net.imglib2.transform.integer.MixedTransform: boolean getComponentInversion(int)>": 0.3876275267298442
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void validate()>": 0.38733672555937526
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void rebuildBottomUp()>": 0.3795970404151899
        }
    ], 
    "<net.smert.jreactphysics3d.engine.Material: void setFrictionCoefficient(float)>": [
        {
            "<org.jbox2d.dynamics.joints.FrictionJoint: void setMaxTorque(float)>": 0.7178030303030303
        }, 
        {
            "<org.jbox2d.dynamics.joints.MotorJoint: void setMaxForce(float)>": 0.7178030303030303
        }, 
        {
            "<org.jbox2d.dynamics.joints.FrictionJoint: void setMaxForce(float)>": 0.7178030303030303
        }, 
        {
            "<org.jbox2d.dynamics.joints.MotorJoint: void setMaxTorque(float)>": 0.7178030303030303
        }, 
        {
            "<org.jbox2d.dynamics.Fixture: void setDensity(float)>": 0.7178030303030303
        }
    ], 
    "<net.smert.jreactphysics3d.collision.shapes.AABB: net.smert.jreactphysics3d.mathematics.Vector3 getCenter()>": [
        {
            "<org.dyn4j.sandbox.panels.LineGraphPanel: void setStaticSize(java.awt.Dimension)>": 0.02309401076758503
        }, 
        {
            "<org.jbox2d.testbed.tests.DrawingParticles: void step(org.jbox2d.testbed.framework.TestbedSettings)>": 0.022360679774997897
        }, 
        {
            "<com.flowpowered.react.engine.Material: void <init>()>": 0.022360679774997894
        }, 
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.02216198026262117
        }, 
        {
            "<boofcv.gui.feature.SelectRegionDescriptionPanel: void <init>()>": 0.02192645048267573
        }
    ], 
    "<net.smert.jreactphysics3d.collision.shapes.CylinderShape: void <init>(float,float,float)>": [
        {
            "<org.jbox2d.dynamics.joints.FrictionJoint: void setMaxTorque(float)>": 0.5505680755397125
        }, 
        {
            "<org.jbox2d.dynamics.joints.MotorJoint: void setMaxForce(float)>": 0.5505680755397125
        }, 
        {
            "<org.jbox2d.dynamics.joints.FrictionJoint: void setMaxForce(float)>": 0.5505680755397125
        }, 
        {
            "<org.jbox2d.dynamics.joints.MotorJoint: void setMaxTorque(float)>": 0.5505680755397125
        }, 
        {
            "<org.jbox2d.dynamics.Fixture: void setDensity(float)>": 0.5505680755397125
        }
    ], 
    "<net.smert.jreactphysics3d.configuration.JointsPositionCorrectionTechnique: net.smert.jreactphysics3d.configuration.JointsPositionCorrectionTechnique valueOf(java.lang.String)>": [
        {
            "<Catalano.Statistics.Analysis.PrincipalComponentAnalysis$AnalysisMethod: Catalano.Statistics.Analysis.PrincipalComponentAnalysis$AnalysisMethod valueOf(java.lang.String)>": 0.260989010989011
        }, 
        {
            "<Catalano.Imaging.Filters.ExtractBoundary$Algorithm: Catalano.Imaging.Filters.ExtractBoundary$Algorithm valueOf(java.lang.String)>": 0.260989010989011
        }, 
        {
            "<Catalano.Imaging.FastBitmap$CoordinateSystem: Catalano.Imaging.FastBitmap$CoordinateSystem valueOf(java.lang.String)>": 0.260989010989011
        }, 
        {
            "<Catalano.Imaging.Filters.ExtractRGBChannel$Channel: Catalano.Imaging.Filters.ExtractRGBChannel$Channel valueOf(java.lang.String)>": 0.260989010989011
        }, 
        {
            "<Catalano.Imaging.Filters.ExtractYCbCrChannel$Channel: Catalano.Imaging.Filters.ExtractYCbCrChannel$Channel valueOf(java.lang.String)>": 0.260989010989011
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 zero()>": [
        {
            "<org.jbox2d.dynamics.joints.MouseJoint: float getReactionTorque(float)>": 0.22010219462003328
        }, 
        {
            "<Catalano.Math.Matrix3x3: void <init>()>": 0.21976226824788314
        }, 
        {
            "<Catalano.Imaging.Filters.ImageNormalization: void setMean(float)>": 0.21964027974653352
        }, 
        {
            "<Catalano.Imaging.Filters.ImageNormalization: void setVariance(float)>": 0.21964027974653352
        }, 
        {
            "<Catalano.Imaging.Concurrent.Filters.ImageNormalization: void setMean(float)>": 0.21964027974653352
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Matrix2x2: int hashCode()>": [
        {
            "<com.flowpowered.react.math.Quaternion: int hashCode()>": 0.5131060938244338
        }, 
        {
            "<com.flowpowered.react.math.Vector4: int hashCode()>": 0.5113415777572576
        }, 
        {
            "<org.jbox2d.testbed.pooling.ColorKey: int hashCode()>": 0.5113415777572576
        }, 
        {
            "<com.flowpowered.react.math.Vector3: int hashCode()>": 0.5062243573061735
        }, 
        {
            "<org.jbox2d.common.Vec3: int hashCode()>": 0.5062243573061735
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 multiply(float)>": [
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.44875023654098933
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.4478282990186694
        }, 
        {
            "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 multiply(com.flowpowered.react.math.Matrix4x4,com.flowpowered.react.math.Matrix4x4)>": 0.44161521362892453
        }, 
        {
            "<org.jbox2d.dynamics.contacts.ContactSolver: void solveVelocityConstraints()>": 0.4416095065129647
        }, 
        {
            "<org.jbox2d.dynamics.contacts.ContactSolver: void initializeVelocityConstraints()>": 0.4405493180965423
        }
    ], 
    "<net.smert.jreactphysics3d.engine.ProfileNode: void enterBlockOfCode()>": [
        {
            "<Catalano.Math.Tools: int DigitalRoot(int)>": 0.37785553809622047
        }, 
        {
            "<boofcv.alg.feature.dense.DescribeDenseHogAlg: void process()>": 0.3751634614841374
        }, 
        {
            "<boofcv.alg.feature.detect.intensity.impl.ImplSsdCorner_F32: void vertical(boofcv.struct.image.GrayF32)>": 0.3625372930731749
        }, 
        {
            "<boofcv.alg.feature.dense.DescribeDenseHogAlg: void computeCellHistograms()>": 0.3606488544547435
        }, 
        {
            "<boofcv.alg.filter.binary.impl.ThresholdSquareBlockMinMax_F32: void thresholdBlock(int,int,boofcv.struct.image.ImageGray,boofcv.struct.image.GrayU8)>": 0.36042804743521717
        }
    ], 
    "<net.smert.jreactphysics3d.collision.narrowphase.EPA.TriangleEPA: void <init>(int,int,int)>": [
        {
            "<com.flowpowered.react.collision.narrowphase.EPA.TriangleEPA: void <init>(int,int,int)>": 0.4465242477080186
        }, 
        {
            "<com.flowpowered.react.collision.broadphase.SweepAndPruneAlgorithm$BoxAABB: void setMax(int,int)>": 0.36095512113403644
        }, 
        {
            "<com.flowpowered.react.collision.broadphase.SweepAndPruneAlgorithm$BoxAABB: void setMin(int,int)>": 0.36095512113403644
        }, 
        {
            "<net.imglib2.img.basictypeaccess.array.IntArray: void setValue(int,int)>": 0.36095512113403644
        }, 
        {
            "<Sort10: void swapKeys(int[],int,int)>": 0.3498037401359194
        }
    ], 
    "<net.smert.jreactphysics3d.constraint.JointInfo: void <init>(net.smert.jreactphysics3d.constraint.JointType)>": [
        {
            "<boofcv.factory.geo.ConfigHomography: void <init>(boolean)>": 0.10224414231722057
        }, 
        {
            "<boofcv.gui.VideoProcessAppBase: void stopWorker()>": 0.09785852775349542
        }, 
        {
            "<boofcv.gui.DepthVideoAppBase: void stopWorker()>": 0.09785852775349542
        }, 
        {
            "<boofcv.gui.StereoVideoAppBase: void stopWorker()>": 0.09785852775349542
        }, 
        {
            "<Catalano.Imaging.Concurrent.Filters.SobelEdgeDetector: void <init>()>": 0.09505135099164813
        }
    ], 
    "<net.smert.jreactphysics3d.collision.shapes.BoxShape: void computeLocalInertiaTensor(net.smert.jreactphysics3d.mathematics.Matrix3x3,float)>": [
        {
            "<org.jbox2d.common.MathUtils: float clamp(float,float,float)>": 0.3900865941458778
        }, 
        {
            "<org.jbox2d.dynamics.contacts.Contact: float mixFriction(float,float)>": 0.38941877768641253
        }, 
        {
            "<org.jbox2d.common.Settings: float mixFriction(float,float)>": 0.38941877768641253
        }, 
        {
            "<boofcv.alg.feature.detect.intensity.impl.ImplHarrisCorner_F32: float computeIntensity()>": 0.3867960291593657
        }, 
        {
            "<boofcv.alg.feature.detect.intensity.impl.ImplHarrisCornerWeighted_F32: float computeResponse()>": 0.3867960291593657
        }
    ], 
    "<net.smert.jreactphysics3d.engine.ContactSolver: float computeMixedRestitutionFactor(net.smert.jreactphysics3d.body.RigidBody,net.smert.jreactphysics3d.body.RigidBody)>": [
        {
            "<org.jbox2d.common.MathUtils: float min(float,float)>": 0.38808889686675646
        }, 
        {
            "<org.jbox2d.dynamics.contacts.Contact: float mixRestitution(float,float)>": 0.38808889686675646
        }, 
        {
            "<org.jbox2d.common.MathUtils: float max(float,float)>": 0.38808889686675646
        }, 
        {
            "<org.jbox2d.common.Settings: float mixRestitution(float,float)>": 0.38808889686675646
        }, 
        {
            "<Catalano.Math.Vector4: float getMax()>": 0.32435534645709235
        }
    ], 
    "<net.smert.jreactphysics3d.engine.ContactManifold: void setFrictionVector2(net.smert.jreactphysics3d.mathematics.Vector3)>": [
        {
            "<Catalano.Imaging.Filters.GaussianBlur: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Concurrent.Filters.BradleyLocalThreshold: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.CosineTransform: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.BradleyLocalThreshold: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.UnsharpMasking: void <init>()>": 0.018184824186332698
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Transform: net.smert.jreactphysics3d.mathematics.Transform Interpolate(net.smert.jreactphysics3d.mathematics.Transform,net.smert.jreactphysics3d.mathematics.Transform,float,net.smert.jreactphysics3d.mathematics.Transform)>": [
        {
            "<org.jbox2d.dynamics.joints.FrictionJoint: void setMaxTorque(float)>": 0.28676914608543685
        }, 
        {
            "<org.jbox2d.dynamics.joints.MotorJoint: void setMaxForce(float)>": 0.28676914608543685
        }, 
        {
            "<org.jbox2d.dynamics.joints.FrictionJoint: void setMaxForce(float)>": 0.28676914608543685
        }, 
        {
            "<org.jbox2d.dynamics.joints.MotorJoint: void setMaxTorque(float)>": 0.28676914608543685
        }, 
        {
            "<org.jbox2d.dynamics.Fixture: void setDensity(float)>": 0.28676914608543685
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Transform: void <init>(net.smert.jreactphysics3d.mathematics.Transform)>": [
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.10408777784252261
        }, 
        {
            "<org.dyn4j.sandbox.Sandbox: void init(com.jogamp.opengl.GLAutoDrawable)>": 0.09726818365920656
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.TestbedMain: void main(java.lang.String[])>": 0.09635293180817431
        }, 
        {
            "<boofcv.gui.d3.Polygon3DSequenceViewer: void <init>()>": 0.09223735693894831
        }, 
        {
            "<boofcv.demonstrations.transform.pyramid.EdgeIntensitiesApp: void main(java.lang.String[])>": 0.09204669240601587
        }
    ], 
    "<net.smert.jreactphysics3d.constraint.SliderJoint: void setMaxTranslationLimit(float)>": [
        {
            "<org.jbox2d.dynamics.joints.PrismaticJoint: void setLimits(float,float)>": 0.41423510955278897
        }, 
        {
            "<org.jbox2d.dynamics.joints.RevoluteJoint: void setLimits(float,float)>": 0.41423510955278897
        }, 
        {
            "<org.jbox2d.dynamics.joints.FrictionJoint: void setMaxTorque(float)>": 0.3922924831866709
        }, 
        {
            "<org.jbox2d.dynamics.joints.MotorJoint: void setMaxForce(float)>": 0.3922924831866709
        }, 
        {
            "<org.jbox2d.dynamics.joints.FrictionJoint: void setMaxForce(float)>": 0.3922924831866709
        }
    ], 
    "<net.smert.jreactphysics3d.constraint.BallAndSocketJointInfo: void <init>(net.smert.jreactphysics3d.body.RigidBody,net.smert.jreactphysics3d.body.RigidBody,net.smert.jreactphysics3d.mathematics.Vector3)>": [
        {
            "<org.dyn4j.sandbox.panels.LineGraphPanel: void setStaticSize(java.awt.Dimension)>": 0.04564354645876383
        }, 
        {
            "<org.jbox2d.testbed.tests.DrawingParticles: void step(org.jbox2d.testbed.framework.TestbedSettings)>": 0.044194173824159216
        }, 
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.04380145943098717
        }, 
        {
            "<boofcv.gui.feature.SelectRegionDescriptionPanel: void <init>()>": 0.04333595283009603
        }, 
        {
            "<boofcv.gui.d3.Polygon3DSequenceViewer: void <init>()>": 0.04290040456147775
        }
    ], 
    "<net.smert.jreactphysics3d.collision.shapes.ConeShape: void <init>(float,float,float)>": [
        {
            "<org.jbox2d.common.Rot: void mulUnsafe(org.jbox2d.common.Rot,org.jbox2d.common.Rot,org.jbox2d.common.Rot)>": 0.5096246679163595
        }, 
        {
            "<org.jbox2d.common.Vec2: void crossToOutUnsafe(org.jbox2d.common.Vec2,float,org.jbox2d.common.Vec2)>": 0.47616008937415416
        }, 
        {
            "<org.jbox2d.common.Vec2: void crossToOutUnsafe(float,org.jbox2d.common.Vec2,org.jbox2d.common.Vec2)>": 0.47616008937415416
        }, 
        {
            "<org.jbox2d.common.Vec3: void crossToOutUnsafe(org.jbox2d.common.Vec3,org.jbox2d.common.Vec3,org.jbox2d.common.Vec3)>": 0.47559627473342825
        }, 
        {
            "<org.jbox2d.dynamics.joints.FrictionJoint: void setMaxTorque(float)>": 0.4573948395494837
        }
    ], 
    "<net.smert.jreactphysics3d.constraint.HingeJoint: float computeNormalizedAngle(float)>": [
        {
            "<com.flowpowered.react.constraint.HingeJoint: float computeNormalizedAngle(float)>": 0.35773218057892614
        }, 
        {
            "<org.jbox2d.common.MathUtils: float clamp(float,float,float)>": 0.3450264542715254
        }, 
        {
            "<org.jbox2d.dynamics.contacts.Contact: float mixFriction(float,float)>": 0.3434468797594525
        }, 
        {
            "<org.jbox2d.common.Settings: float mixFriction(float,float)>": 0.3434468797594525
        }, 
        {
            "<com.flowpowered.react.constraint.HingeJoint: float computeCorrespondingAngleNearLimits(float,float,float)>": 0.34093326629782317
        }
    ], 
    "<net.smert.jreactphysics3d.collision.shapes.CollisionShape: void updateAABB(net.smert.jreactphysics3d.collision.shapes.AABB,net.smert.jreactphysics3d.mathematics.Transform)>": [
        {
            "<boofcv.factory.background.FactoryBackgroundModel: boofcv.alg.background.stationary.BackgroundStationaryGaussian stationaryGaussian(boofcv.factory.background.ConfigBackgroundGaussian,boofcv.struct.image.ImageType)>": 0.15645630959178786
        }, 
        {
            "<com.flowpowered.react.collision.shape.SphereShape: void getLocalBounds(com.flowpowered.react.math.Vector3,com.flowpowered.react.math.Vector3)>": 0.15209623507190356
        }, 
        {
            "<boofcv.factory.background.FactoryBackgroundModel: boofcv.alg.background.moving.BackgroundMovingGaussian movingGaussian(boofcv.factory.background.ConfigBackgroundGaussian,boofcv.struct.distort.PointTransformModel_F32,boofcv.struct.image.ImageType)>": 0.14959721590372746
        }, 
        {
            "<boofcv.factory.background.FactoryBackgroundModel: boofcv.alg.background.stationary.BackgroundStationaryBasic stationaryBasic(boofcv.factory.background.ConfigBackgroundBasic,boofcv.struct.image.ImageType)>": 0.1466383514380693
        }, 
        {
            "<com.flowpowered.react.math.Matrix4x4: void setAllValues(float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float)>": 0.14434485767400765
        }
    ], 
    "<net.smert.jreactphysics3d.collision.broadphase.BodyPair: boolean equals(java.lang.Object)>": [
        {
            "<org.dyn4j.dynamics.AABBBroadphaseFilter: boolean isAllowed(org.dyn4j.geometry.AABB,org.dyn4j.dynamics.Body,org.dyn4j.dynamics.BodyFixture)>": 0.32849805357071954
        }, 
        {
            "<org.dyn4j.dynamics.RaycastBroadphaseFilter: boolean isAllowed(org.dyn4j.geometry.Ray,double,org.dyn4j.dynamics.Body,org.dyn4j.dynamics.BodyFixture)>": 0.323043694218619
        }, 
        {
            "<org.dyn4j.collision.narrowphase.PairwiseTypedFallbackCondition: boolean equals(java.lang.Object)>": 0.2640755571409724
        }, 
        {
            "<org.dyn4j.collision.broadphase.BroadphaseKey: boolean equals(java.lang.Object)>": 0.25917122610047005
        }, 
        {
            "<org.dyn4j.collision.narrowphase.SingleTypedFallbackCondition: boolean equals(java.lang.Object)>": 0.24549522455764275
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Vector3: int hashCode()>": [
        {
            "<com.flowpowered.react.math.Quaternion: int hashCode()>": 0.5094763681417921
        }, 
        {
            "<com.flowpowered.react.math.Vector4: int hashCode()>": 0.5079427269140799
        }, 
        {
            "<org.jbox2d.testbed.pooling.ColorKey: int hashCode()>": 0.5079427269140799
        }, 
        {
            "<com.flowpowered.react.math.Vector3: int hashCode()>": 0.5036563095897864
        }, 
        {
            "<org.jbox2d.common.Vec3: int hashCode()>": 0.5036563095897864
        }
    ], 
    "<net.smert.jreactphysics3d.collision.shapes.ConvexMeshShape: void addVertex(net.smert.jreactphysics3d.mathematics.Vector3)>": [
        {
            "<Catalano.Math.Vector3: float getMin()>": 0.35175030673031465
        }, 
        {
            "<Catalano.Math.Vector3: float getMax()>": 0.35175030673031465
        }, 
        {
            "<boofcv.alg.distort.DistortImageOps: void updateBoundBox(boofcv.struct.distort.PixelTransform_F32,boofcv.struct.ImageRectangle_F32)>": 0.3479937817287045
        }, 
        {
            "<Catalano.Math.Vector4: boolean equals(java.lang.Object)>": 0.3372638348240323
        }, 
        {
            "<Catalano.Math.Vector3: boolean equals(java.lang.Object)>": 0.32211676030939723
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Vector2: net.smert.jreactphysics3d.mathematics.Vector2 set(net.smert.jreactphysics3d.mathematics.Vector2)>": [
        {
            "<org.jbox2d.common.Vec2: void absLocal()>": 0.30516484304991076
        }, 
        {
            "<com.flowpowered.react.math.Vector4: com.flowpowered.react.math.Vector4 negate()>": 0.30338694540888556
        }, 
        {
            "<com.flowpowered.react.math.Vector3: com.flowpowered.react.math.Vector3 negate()>": 0.30056697427908347
        }, 
        {
            "<com.flowpowered.react.math.Quaternion: void <init>(float,com.flowpowered.react.math.Vector3)>": 0.29812046479753085
        }, 
        {
            "<org.jbox2d.testbed.perf.MathPerf: void runSinLUTTest(float)>": 0.2977696756978171
        }
    ], 
    "<net.smert.jreactphysics3d.engine.OverlappingPair: int getNumContactPoints()>": [
        {
            "<org.jbox2d.common.MathUtils: int max(int,int)>": 0.3652167676687162
        }, 
        {
            "<org.jbox2d.common.MathUtils: int min(int,int)>": 0.3652167676687162
        }, 
        {
            "<org.jbox2d.particle.ParticleSystem: int limitCapacity(int,int)>": 0.3652167676687162
        }, 
        {
            "<net.imglib2.display.ColorTable16: int get(int,int)>": 0.32170772231096606
        }, 
        {
            "<com.flowpowered.react.collision.narrowphase.EPA.EdgeEPA: int getTargetVertexIndex()>": 0.3184893664460647
        }
    ], 
    "<net.smert.jreactphysics3d.body.Body: void <init>(int)>": [
        {
            "<net.imglib2.transform.integer.SlicingTransform: boolean getComponentZero(int)>": 0.47185730174653157
        }, 
        {
            "<net.imglib2.transform.integer.MixedTransform: boolean getComponentZero(int)>": 0.47185730174653157
        }, 
        {
            "<net.imglib2.transform.integer.MixedTransform: boolean getComponentInversion(int)>": 0.47185730174653157
        }, 
        {
            "<org.jbox2d.particle.ParticleSystem: void setParticleMaxCount(int)>": 0.4553024599991479
        }, 
        {
            "<org.jbox2d.common.BufferUtils: int[] reallocateBuffer(int[],int,int,int,boolean)>": 0.4493055804557764
        }
    ], 
    "<net.smert.jreactphysics3d.engine.DynamicsWorld: void integrateRigidBodiesVelocities()>": [
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void validate()>": 0.39297582202616
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTreeFlatNodes: void validate()>": 0.38779150960267694
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void validateStructure(org.jbox2d.collision.broadphase.DynamicTreeNode)>": 0.3867691971059819
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void validateMetrics(org.jbox2d.collision.broadphase.DynamicTreeNode)>": 0.3860427657720613
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTreeFlatNodes: void validateStructure(int)>": 0.38240797926418246
        }
    ], 
    "<net.smert.jreactphysics3d.body.CollisionBody: void updateOldTransform()>": [
        {
            "<Catalano.Imaging.Filters.GaussianBlur: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Concurrent.Filters.BradleyLocalThreshold: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.CosineTransform: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.BradleyLocalThreshold: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.UnsharpMasking: void <init>()>": 0.018184824186332698
        }
    ], 
    "<net.smert.jreactphysics3d.engine.Timer: boolean isPossibleToTakeStep()>": [
        {
            "<Catalano.Core.DoubleRange: boolean IsOverlapping(Catalano.Core.DoubleRange)>": 0.5759718143893291
        }, 
        {
            "<com.flowpowered.react.engine.Timer: boolean isPossibleToTakeStep()>": 0.5697916666666667
        }, 
        {
            "<org.dyn4j.geometry.Interval: boolean isDegenerate()>": 0.5697916666666667
        }, 
        {
            "<org.dyn4j.dynamics.joint.WeldJoint: boolean isSpring()>": 0.540254105467014
        }, 
        {
            "<org.dyn4j.dynamics.joint.WheelJoint: boolean isSpring()>": 0.540254105467014
        }
    ], 
    "<net.smert.jreactphysics3d.engine.ProfileNode: void <init>(java.lang.String,net.smert.jreactphysics3d.engine.ProfileNode)>": [
        {
            "<org.jbox2d.profile.BasicPerformanceTest$ResultFormat: void <init>(java.lang.String,int,int,java.lang.String)>": 0.2668460704028347
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTreeFlatNodes: void validate()>": 0.25860853598582556
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void validate()>": 0.25792809378678216
        }, 
        {
            "<net.imglib2.transform.integer.SlicingTransform: boolean getComponentZero(int)>": 0.257203535682883
        }, 
        {
            "<net.imglib2.transform.integer.MixedTransform: boolean getComponentZero(int)>": 0.257203535682883
        }
    ], 
    "<net.smert.jreactphysics3d.configuration.ContactsPositionCorrectionTechnique: net.smert.jreactphysics3d.configuration.ContactsPositionCorrectionTechnique valueOf(java.lang.String)>": [
        {
            "<Catalano.Statistics.Analysis.PrincipalComponentAnalysis$AnalysisMethod: Catalano.Statistics.Analysis.PrincipalComponentAnalysis$AnalysisMethod valueOf(java.lang.String)>": 0.260989010989011
        }, 
        {
            "<Catalano.Imaging.Filters.ExtractBoundary$Algorithm: Catalano.Imaging.Filters.ExtractBoundary$Algorithm valueOf(java.lang.String)>": 0.260989010989011
        }, 
        {
            "<Catalano.Imaging.FastBitmap$CoordinateSystem: Catalano.Imaging.FastBitmap$CoordinateSystem valueOf(java.lang.String)>": 0.260989010989011
        }, 
        {
            "<Catalano.Imaging.Filters.ExtractRGBChannel$Channel: Catalano.Imaging.Filters.ExtractRGBChannel$Channel valueOf(java.lang.String)>": 0.260989010989011
        }, 
        {
            "<Catalano.Imaging.Filters.ExtractYCbCrChannel$Channel: Catalano.Imaging.Filters.ExtractYCbCrChannel$Channel valueOf(java.lang.String)>": 0.260989010989011
        }
    ], 
    "<net.smert.jreactphysics3d.engine.Profiler: void StartProfilingBlock(java.lang.String)>": [
        {
            "<org.dyn4j.sandbox.persist.XmlReader: void characters(char[],int,int)>": 0.27441209699130303
        }, 
        {
            "<org.dyn4j.sandbox.persist.XmlReader: void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)>": 0.2329030628570954
        }, 
        {
            "<org.dyn4j.sandbox.persist.XmlReader: void endElement(java.lang.String,java.lang.String,java.lang.String)>": 0.22438285253742657
        }, 
        {
            "<boofcv.io.image.UtilImageIO$1: boolean accept(java.io.File,java.lang.String)>": 0.2203555279741259
        }, 
        {
            "<boofcv.io.wrapper.images.BufferedFileImageSequence$Filter: boolean accept(java.io.File,java.lang.String)>": 0.2203555279741259
        }
    ], 
    "<net.smert.jreactphysics3d.engine.DynamicsWorld: void resetBodiesMovementVariable()>": [
        {
            "<com.flowpowered.react.engine.DynamicsWorld: void resetBodiesMovementVariable()>": 0.44547806991200656
        }, 
        {
            "<com.flowpowered.react.engine.DynamicsWorld: void resetContactManifoldListsOfBodies()>": 0.4312204973843289
        }, 
        {
            "<com.flowpowered.react.engine.linked.LinkedDynamicsWorld: void clearLinkedBodies()>": 0.4175783897057852
        }, 
        {
            "<com.flowpowered.react.engine.DynamicsWorld: void updateRigidBodiesAABB()>": 0.41343149745531993
        }, 
        {
            "<com.flowpowered.react.engine.DynamicsWorld: void enableSleeping(boolean)>": 0.3973307379307481
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Quaternion: int hashCode()>": [
        {
            "<com.flowpowered.react.math.Quaternion: int hashCode()>": 0.5219197279242994
        }, 
        {
            "<com.flowpowered.react.math.Vector4: int hashCode()>": 0.5113415777572576
        }, 
        {
            "<org.jbox2d.testbed.pooling.ColorKey: int hashCode()>": 0.5113415777572576
        }, 
        {
            "<Catalano.Core.FloatPoint: int hashCode()>": 0.5098894907733246
        }, 
        {
            "<com.flowpowered.react.math.Vector3: int hashCode()>": 0.5062243573061735
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Transform: boolean equals(java.lang.Object)>": [
        {
            "<org.dyn4j.dynamics.AABBBroadphaseFilter: boolean isAllowed(org.dyn4j.geometry.AABB,org.dyn4j.dynamics.Body,org.dyn4j.dynamics.BodyFixture)>": 0.36548152983256876
        }, 
        {
            "<org.dyn4j.dynamics.RaycastBroadphaseFilter: boolean isAllowed(org.dyn4j.geometry.Ray,double,org.dyn4j.dynamics.Body,org.dyn4j.dynamics.BodyFixture)>": 0.35943803875238545
        }, 
        {
            "<org.dyn4j.collision.narrowphase.PairwiseTypedFallbackCondition: boolean equals(java.lang.Object)>": 0.297875956756673
        }, 
        {
            "<org.dyn4j.collision.broadphase.BroadphaseKey: boolean equals(java.lang.Object)>": 0.2932140330238564
        }, 
        {
            "<org.dyn4j.collision.narrowphase.SingleTypedFallbackCondition: boolean equals(java.lang.Object)>": 0.27684414337630964
        }
    ], 
    "<net.smert.jreactphysics3d.collision.shapes.ConeShape: net.smert.jreactphysics3d.mathematics.Vector3 getLocalSupportPointWithMargin(net.smert.jreactphysics3d.mathematics.Vector3,net.smert.jreactphysics3d.mathematics.Vector3)>": [
        {
            "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 multiply(com.flowpowered.react.math.Matrix4x4,com.flowpowered.react.math.Matrix4x4)>": 0.38924214839816024
        }, 
        {
            "<org.jbox2d.common.Vec2: float length()>": 0.3868973005939404
        }, 
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.3843477465055024
        }, 
        {
            "<org.jbox2d.collision.shapes.ChainShape: void computeAABB(org.jbox2d.collision.AABB,org.jbox2d.common.Transform,int)>": 0.3842577506839733
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.383625595384255
        }
    ], 
    "<net.smert.jreactphysics3d.collision.broadphase.SweepAndPruneAlgorithm: void shrinkArrays()>": [
        {
            "<org.jbox2d.collision.broadphase.DynamicTreeFlatNodes: void validate()>": 0.7220973159903362
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void validate()>": 0.701898435830682
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTreeFlatNodes: void validateStructure(int)>": 0.7015017635239418
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void rebuildBottomUp()>": 0.6872582560453617
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void validateMetrics(org.jbox2d.collision.broadphase.DynamicTreeNode)>": 0.670692064073149
        }
    ], 
    "<net.smert.jreactphysics3d.engine.Timer: void setTimeStep(double)>": [
        {
            "<org.dyn4j.collision.broadphase.DynamicAABBTree: void validate(org.dyn4j.collision.broadphase.DynamicAABBTreeNode)>": 0.46715444854104726
        }, 
        {
            "<net.imglib2.transform.integer.SlicingTransform: boolean getComponentZero(int)>": 0.45582761598081944
        }, 
        {
            "<net.imglib2.transform.integer.MixedTransform: boolean getComponentZero(int)>": 0.45582761598081944
        }, 
        {
            "<net.imglib2.transform.integer.MixedTransform: boolean getComponentInversion(int)>": 0.45582761598081944
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void validateStructure(org.jbox2d.collision.broadphase.DynamicTreeNode)>": 0.4460616887463531
        }
    ], 
    "<net.smert.jreactphysics3d.constraint.ContactPoint: net.smert.jreactphysics3d.mathematics.Vector3 getFrictionVector1()>": [
        {
            "<Catalano.Math.Decompositions.SingularValueDecomposition: double norm2()>": 0.1525974025974026
        }, 
        {
            "<net.imglib2.display.awt.UnsignedIntDataBuffer: int[] getData()>": 0.1525974025974026
        }, 
        {
            "<net.imglib2.display.awt.SignedByteDataBuffer: byte[] getData()>": 0.1525974025974026
        }, 
        {
            "<boofcv.io.PathLabel: java.lang.String getPath()>": 0.1525974025974026
        }, 
        {
            "<org.dyn4j.geometry.Slice: org.dyn4j.geometry.Vector2 getCircleCenter()>": 0.1525974025974026
        }
    ], 
    "<net.smert.jreactphysics3d.collision.broadphase.PairManager: boolean removePair(int,int)>": [
        {
            "<org.jbox2d.collision.broadphase.DynamicTreeFlatNodes: void validate()>": 0.6586317070215671
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void rebuildBottomUp()>": 0.6159674843790105
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTreeFlatNodes: void validateStructure(int)>": 0.5989410460203223
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void validate()>": 0.5934246585974834
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTreeFlatNodes: void validateMetrics(int)>": 0.5585142374219377
        }
    ], 
    "<net.smert.jreactphysics3d.collision.broadphase.NoBroadPhaseAlgorithm: void addObject(net.smert.jreactphysics3d.body.CollisionBody,net.smert.jreactphysics3d.collision.shapes.AABB)>": [
        {
            "<com.flowpowered.react.engine.DynamicsWorld: void resetContactManifoldListsOfBodies()>": 0.3667365415767649
        }, 
        {
            "<com.flowpowered.react.engine.DynamicsWorld: void updateRigidBodiesAABB()>": 0.3634041565763521
        }, 
        {
            "<com.flowpowered.react.engine.DynamicsWorld: void resetBodiesMovementVariable()>": 0.3549680830568568
        }, 
        {
            "<com.flowpowered.react.engine.linked.LinkedDynamicsWorld: void clearLinkedBodies()>": 0.34646775517276485
        }, 
        {
            "<com.flowpowered.react.engine.DynamicsWorld: void enableSleeping(boolean)>": 0.33820688702830715
        }
    ], 
    "<net.smert.jreactphysics3d.collision.shapes.CollisionShape: java.lang.String toString()>": [
        {
            "<com.flowpowered.react.math.Transform: java.lang.String toString()>": 0.5324518530506555
        }, 
        {
            "<com.flowpowered.react.collision.shape.AABB: java.lang.String toString()>": 0.5030898695800998
        }, 
        {
            "<boofcv.struct.feature.Match: java.lang.String toString()>": 0.5019811111776067
        }, 
        {
            "<com.flowpowered.react.math.Vector2: java.lang.String toString()>": 0.4890273281763481
        }, 
        {
            "<org.jbox2d.common.Rot: java.lang.String toString()>": 0.4890273281763481
        }
    ], 
    "<net.smert.jreactphysics3d.collision.narrowphase.EPA.TriangleEPA: boolean isVisibleFromVertex(net.smert.jreactphysics3d.mathematics.Vector3[],int)>": [
        {
            "<Catalano.Math.Geometry.Line: boolean isHorizontal()>": 0.4259182485170937
        }, 
        {
            "<boofcv.struct.image.ImageBase: boolean isInBounds(int,int)>": 0.37156581794252375
        }, 
        {
            "<boofcv.struct.flow.ImageFlow: boolean isInBounds(int,int)>": 0.37156581794252375
        }, 
        {
            "<boofcv.struct.feature.MatrixOfList: boolean isInBounds(int,int)>": 0.37156581794252375
        }, 
        {
            "<net.coobird.thumbnailator.util.exif.IfdStructure: boolean isOffset()>": 0.37040053774421344
        }
    ], 
    "<net.smert.jreactphysics3d.collision.broadphase.PairManager: void reallocatePairs()>": [
        {
            "<com.flowpowered.react.collision.broadphase.PairManager: void reallocatePairs()>": 0.5651689901846177
        }, 
        {
            "<com.flowpowered.react.collision.broadphase.PairManager: int computeHashBodies(int,int)>": 0.5594083632063742
        }, 
        {
            "<com.flowpowered.react.collision.broadphase.PairManager: com.flowpowered.react.collision.broadphase.PairManager$BodyPair addPair(com.flowpowered.react.body.CollisionBody,com.flowpowered.react.body.CollisionBody)>": 0.5472652823646761
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTreeFlatNodes: void validate()>": 0.5186971447738628
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void rebuildBottomUp()>": 0.5132596963416485
        }
    ], 
    "<net.smert.jreactphysics3d.engine.ContactSolver: void setSplitVelocitiesArrays(net.smert.jreactphysics3d.mathematics.Vector3[],net.smert.jreactphysics3d.mathematics.Vector3[])>": [
        {
            "<net.imglib2.AbstractInterval: long min(int)>": 0.5590983500645454
        }, 
        {
            "<net.imglib2.AbstractInterval: long max(int)>": 0.5590983500645454
        }, 
        {
            "<org.dyn4j.collision.broadphase.DynamicAABBTree: void validate(org.dyn4j.collision.broadphase.DynamicAABBTreeNode)>": 0.5505802201011953
        }, 
        {
            "<net.imglib2.AbstractInterval: double realMax(int)>": 0.5503136295915592
        }, 
        {
            "<net.imglib2.AbstractInterval: double realMin(int)>": 0.5503136295915592
        }
    ], 
    "<net.smert.jreactphysics3d.constraint.FixedJoint: void warmstart(net.smert.jreactphysics3d.engine.ConstraintSolverData)>": [
        {
            "<Catalano.Imaging.Filters.Threshold: void applyInPlace(Catalano.Imaging.FastBitmap)>": 0.0713222182144452
        }, 
        {
            "<Catalano.Imaging.Filters.VerticalRunLengthSmoothing: void applyInPlace(Catalano.Imaging.FastBitmap)>": 0.06834204406482836
        }, 
        {
            "<Catalano.Imaging.Filters.HorizontalRunLengthSmoothing: void applyInPlace(Catalano.Imaging.FastBitmap)>": 0.06834204406482836
        }, 
        {
            "<com.flowpowered.react.engine.DynamicsWorld: void computeIslands()>": 0.06723736242985617
        }, 
        {
            "<net.imglib2.view.iteration.SlicingCursor: void <init>(net.imglib2.Cursor,net.imglib2.transform.integer.Slicing)>": 0.06713392727919112
        }
    ], 
    "<net.smert.jreactphysics3d.engine.ProfileNodeIterator: void enterChild(int)>": [
        {
            "<net.imglib2.display.projector.specialized.PlanarImgContainerSamplerImpl: void <init>(int)>": 0.05686972153554483
        }, 
        {
            "<boofcv.abst.feature.detect.interest.ConfigGeneralDetector: void <init>(int,int,float)>": 0.05639724849339025
        }, 
        {
            "<boofcv.abst.feature.detect.interest.ConfigGeneralDetector: void <init>(int,int,float,int,boolean)>": 0.05573702139336338
        }, 
        {
            "<net.coobird.thumbnailator.geometry.Positions$7: java.awt.Point calculate(int,int,int,int,int,int,int,int)>": 0.053958198560011
        }, 
        {
            "<net.coobird.thumbnailator.geometry.Positions$3: java.awt.Point calculate(int,int,int,int,int,int,int,int)>": 0.053958198560011
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Matrix3x3: boolean equals(java.lang.Object)>": [
        {
            "<com.flowpowered.react.math.Quaternion: boolean equals(java.lang.Object)>": 0.6790855393731939
        }, 
        {
            "<com.flowpowered.react.math.Vector4: boolean equals(java.lang.Object)>": 0.6763003407722021
        }, 
        {
            "<org.jbox2d.testbed.pooling.ColorKey: boolean equals(java.lang.Object)>": 0.6707939270783865
        }, 
        {
            "<com.flowpowered.react.math.Vector3: boolean equals(java.lang.Object)>": 0.6657001560298654
        }, 
        {
            "<org.jbox2d.common.Vec3: boolean equals(java.lang.Object)>": 0.6554998492342567
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Quaternion: net.smert.jreactphysics3d.mathematics.Vector3 multiply(net.smert.jreactphysics3d.mathematics.Vector3,net.smert.jreactphysics3d.mathematics.Vector3)>": [
        {
            "<boofcv.factory.background.FactoryBackgroundModel: boofcv.alg.background.stationary.BackgroundStationaryGaussian stationaryGaussian(boofcv.factory.background.ConfigBackgroundGaussian,boofcv.struct.image.ImageType)>": 0.15505550090461812
        }, 
        {
            "<com.flowpowered.react.collision.shape.SphereShape: void getLocalBounds(com.flowpowered.react.math.Vector3,com.flowpowered.react.math.Vector3)>": 0.15207455558046154
        }, 
        {
            "<com.flowpowered.react.math.Matrix4x4: void setAllValues(float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float)>": 0.1520461828006313
        }, 
        {
            "<com.flowpowered.react.math.Matrix3x3: com.flowpowered.react.math.Matrix3x3 computeSkewSymmetricMatrixForCrossProduct(com.flowpowered.react.math.Vector3)>": 0.15007951776311446
        }, 
        {
            "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 negate(com.flowpowered.react.math.Matrix4x4)>": 0.14993228411808956
        }
    ], 
    "<net.smert.jreactphysics3d.engine.ContactSolver: float computeMixedFrictionCoefficient(net.smert.jreactphysics3d.body.RigidBody,net.smert.jreactphysics3d.body.RigidBody)>": [
        {
            "<org.jbox2d.dynamics.contacts.Contact: float mixFriction(float,float)>": 0.4459585763862493
        }, 
        {
            "<org.jbox2d.common.Settings: float mixFriction(float,float)>": 0.4459585763862493
        }, 
        {
            "<org.jbox2d.particle.ParticleSystem: float getCriticalVelocitySquared(org.jbox2d.dynamics.TimeStep)>": 0.41079336846247516
        }, 
        {
            "<org.jbox2d.common.Vec2: float length()>": 0.3978838071529801
        }, 
        {
            "<org.jbox2d.common.MathUtils: float clamp(float,float,float)>": 0.37499792080397754
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Vector3: net.smert.jreactphysics3d.mathematics.Vector3 cross(net.smert.jreactphysics3d.mathematics.Vector3)>": [
        {
            "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 multiply(com.flowpowered.react.math.Matrix4x4,com.flowpowered.react.math.Matrix4x4)>": 0.5361512836524779
        }, 
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.5270124645085652
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.525997196947764
        }, 
        {
            "<org.jbox2d.dynamics.contacts.PositionSolverManifold: void initialize(org.jbox2d.dynamics.contacts.ContactPositionConstraint,org.jbox2d.common.Transform,org.jbox2d.common.Transform,int)>": 0.5198659353229385
        }, 
        {
            "<org.jbox2d.common.Rot: void mulTrans(org.jbox2d.common.Rot,org.jbox2d.common.Vec2,org.jbox2d.common.Vec2)>": 0.5182365647356655
        }
    ], 
    "<net.smert.jreactphysics3d.engine.Island: void addBody(net.smert.jreactphysics3d.body.RigidBody)>": [
        {
            "<net.imglib2.transform.integer.SlicingTransform: boolean getComponentZero(int)>": 0.5081541731116019
        }, 
        {
            "<net.imglib2.transform.integer.MixedTransform: boolean getComponentZero(int)>": 0.5081541731116019
        }, 
        {
            "<net.imglib2.transform.integer.MixedTransform: boolean getComponentInversion(int)>": 0.5081541731116019
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTreeFlatNodes: void validate()>": 0.48825343971856294
        }, 
        {
            "<org.jbox2d.particle.ParticleSystem: void setParticleMaxCount(int)>": 0.48754368896231837
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Vector2: boolean isUnit()>": [
        {
            "<com.flowpowered.react.math.Vector3: boolean isUnit()>": 0.48156017865757195
        }, 
        {
            "<com.flowpowered.react.math.Vector4: boolean isUnit()>": 0.4789838510590299
        }, 
        {
            "<com.flowpowered.react.math.Vector2: boolean isUnit()>": 0.47839361992080887
        }, 
        {
            "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 multiply(com.flowpowered.react.math.Matrix4x4,com.flowpowered.react.math.Matrix4x4)>": 0.47657459299191296
        }, 
        {
            "<com.flowpowered.react.math.Vector3: boolean isZero()>": 0.4754698661006136
        }
    ], 
    "<net.smert.jreactphysics3d.engine.ContactSolver: void initializeContactConstraints()>": [
        {
            "<org.jbox2d.common.MathUtils: float abs(float)>": 0.1293980821118307
        }, 
        {
            "<org.jbox2d.common.Vec3: void crossToOutUnsafe(org.jbox2d.common.Vec3,org.jbox2d.common.Vec3,org.jbox2d.common.Vec3)>": 0.12873432854791395
        }, 
        {
            "<org.jbox2d.common.Rot: void mulUnsafe(org.jbox2d.common.Rot,org.jbox2d.common.Rot,org.jbox2d.common.Rot)>": 0.12794639115092077
        }, 
        {
            "<org.jbox2d.collision.shapes.ChainShape: void computeAABB(org.jbox2d.collision.AABB,org.jbox2d.common.Transform,int)>": 0.12697005919168586
        }, 
        {
            "<org.jbox2d.common.Vec2: void crossToOutUnsafe(org.jbox2d.common.Vec2,float,org.jbox2d.common.Vec2)>": 0.12678786975642037
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Quaternion: net.smert.jreactphysics3d.mathematics.Quaternion subtract(net.smert.jreactphysics3d.mathematics.Quaternion)>": [
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.4568705818995089
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.4558853245183447
        }, 
        {
            "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 multiply(com.flowpowered.react.math.Matrix4x4,com.flowpowered.react.math.Matrix4x4)>": 0.4526111104230872
        }, 
        {
            "<com.flowpowered.react.math.Quaternion: void inverse()>": 0.45247493499710123
        }, 
        {
            "<org.jbox2d.particle.ParticleSystem: void raycast(org.jbox2d.callbacks.ParticleRaycastCallback,org.jbox2d.common.Vec2,org.jbox2d.common.Vec2)>": 0.4489439960330402
        }
    ], 
    "<net.smert.jreactphysics3d.engine.ConstraintSolver: void initializeForIsland(float,net.smert.jreactphysics3d.engine.Island)>": [
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void validate()>": 0.6550482102067072
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void validateStructure(org.jbox2d.collision.broadphase.DynamicTreeNode)>": 0.6537941570027886
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTreeFlatNodes: void validateStructure(int)>": 0.6456409515909289
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTreeFlatNodes: void validate()>": 0.6446613434238763
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void validateMetrics(org.jbox2d.collision.broadphase.DynamicTreeNode)>": 0.6428544141612266
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Mathematics: float ArcSin(float)>": [
        {
            "<org.jbox2d.common.MathUtils: float sqrt(float)>": 1.0
        }, 
        {
            "<org.jbox2d.testbed.perf.MathPerf: void runFloorTest(float)>": 0.6680293976951683
        }, 
        {
            "<org.jbox2d.testbed.perf.MathPerf: void runCeilTest(float)>": 0.6680293976951683
        }, 
        {
            "<org.jbox2d.testbed.perf.MathPerf: void runSinTest(float)>": 0.6680293976951683
        }, 
        {
            "<boofcv.alg.interpolate.impl.NearestNeighborPixel_F32: float get_border(float,float)>": 0.5521154917877251
        }
    ], 
    "<net.smert.jreactphysics3d.collision.narrowphase.GJK.GJKAlgorithm: boolean computePenetrationDepthForEnlargedObjects(net.smert.jreactphysics3d.collision.shapes.CollisionShape,net.smert.jreactphysics3d.mathematics.Transform,net.smert.jreactphysics3d.collision.shapes.CollisionShape,net.smert.jreactphysics3d.mathematics.Transform,net.smert.jreactphysics3d.constraint.ContactPointInfo)>": [
        {
            "<com.flowpowered.react.collision.narrowphase.GJK.GJKAlgorithm: boolean computePenetrationDepthForEnlargedObjects(com.flowpowered.react.collision.shape.CollisionShape,com.flowpowered.react.math.Transform,com.flowpowered.react.collision.shape.CollisionShape,com.flowpowered.react.math.Transform,com.flowpowered.react.constraint.ContactPoint$ContactPointInfo,com.flowpowered.react.math.Vector3)>": 0.13214549504403955
        }, 
        {
            "<Catalano.Core.FloatRange: boolean IsOverlapping(Catalano.Core.FloatRange)>": 0.12559453217947142
        }, 
        {
            "<Catalano.Math.Geometry.Line: boolean isHorizontal()>": 0.12463556560608496
        }, 
        {
            "<com.flowpowered.react.collision.narrowphase.EPA.TriangleEPA: boolean isClosestPointInternalToTriangle()>": 0.1240209348778159
        }, 
        {
            "<com.flowpowered.react.math.Mathematics: boolean approxEquals(float,float,float)>": 0.12041642959468685
        }
    ], 
    "<net.smert.jreactphysics3d.collision.shapes.CylinderShape: net.smert.jreactphysics3d.mathematics.Vector3 getLocalSupportPointWithMargin(net.smert.jreactphysics3d.mathematics.Vector3,net.smert.jreactphysics3d.mathematics.Vector3)>": [
        {
            "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 multiply(com.flowpowered.react.math.Matrix4x4,com.flowpowered.react.math.Matrix4x4)>": 0.332685413976137
        }, 
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.3280336575786219
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.3274660231623952
        }, 
        {
            "<org.jbox2d.common.Vec2: float length()>": 0.3268673434699137
        }, 
        {
            "<com.flowpowered.react.math.Matrix3x3: com.flowpowered.react.math.Matrix3x3 multiply(com.flowpowered.react.math.Matrix3x3,com.flowpowered.react.math.Matrix3x3)>": 0.3246171823218315
        }
    ], 
    "<net.smert.jreactphysics3d.collision.shapes.CapsuleShape: void <init>(net.smert.jreactphysics3d.collision.shapes.CapsuleShape)>": [
        {
            "<org.jbox2d.common.Vec2: void absLocal()>": 0.3238221377459168
        }, 
        {
            "<com.flowpowered.react.math.Vector4: com.flowpowered.react.math.Vector4 negate()>": 0.32169234601105995
        }, 
        {
            "<com.flowpowered.react.math.Quaternion: void <init>(float,com.flowpowered.react.math.Vector3)>": 0.31874502853311304
        }, 
        {
            "<com.flowpowered.react.math.Vector3: com.flowpowered.react.math.Vector3 negate()>": 0.31870301235341136
        }, 
        {
            "<org.jbox2d.testbed.perf.MathPerf: void runSinLUTTest(float)>": 0.3164214267019176
        }
    ], 
    "<net.smert.jreactphysics3d.collision.narrowphase.EPA.TrianglesStore: void <init>()>": [
        {
            "<Catalano.Imaging.Filters.HistogramShrink: void <init>()>": 0.14476650603589652
        }, 
        {
            "<Catalano.Imaging.Filters.HistogramStretch: void <init>()>": 0.14476650603589652
        }, 
        {
            "<Catalano.Imaging.Concurrent.Filters.SobelEdgeDetector: void <init>()>": 0.13442290969427412
        }, 
        {
            "<boofcv.gui.tracker.TrackerObjectQuadPanel: void enterSelectMode()>": 0.13442290969427412
        }, 
        {
            "<org.jbox2d.dynamics.Filter: void <init>()>": 0.1329726164507926
        }
    ], 
    "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: boolean isFull()>": [
        {
            "<Catalano.Core.Structs.DoubleArrayList: boolean isEmpty()>": 0.6797385620915033
        }, 
        {
            "<net.coobird.thumbnailator.ThumbnailParameter: boolean useOriginalImageType()>": 0.6797385620915033
        }, 
        {
            "<com.flowpowered.react.collision.narrowphase.GJK.Simplex: boolean isEmpty()>": 0.6797385620915033
        }, 
        {
            "<com.flowpowered.react.collision.narrowphase.GJK.Simplex: boolean isFull()>": 0.6797385620915033
        }, 
        {
            "<boofcv.struct.WrapArrayIntoList: boolean isEmpty()>": 0.6797385620915033
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Quaternion: float lengthSquare()>": [
        {
            "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 multiply(com.flowpowered.react.math.Matrix4x4,com.flowpowered.react.math.Matrix4x4)>": 0.5371664283705748
        }, 
        {
            "<Catalano.Math.Vector4: float Square()>": 0.5285884824131092
        }, 
        {
            "<com.flowpowered.react.math.Vector4: float lengthSquare()>": 0.5285884824131092
        }, 
        {
            "<com.flowpowered.react.math.Quaternion: float lengthSquare()>": 0.5285884824131092
        }, 
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.5281755726526416
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Mathematics: float ArcCos(float)>": [
        {
            "<org.jbox2d.common.MathUtils: float sqrt(float)>": 1.0
        }, 
        {
            "<org.jbox2d.testbed.perf.MathPerf: void runFloorTest(float)>": 0.6680293976951683
        }, 
        {
            "<org.jbox2d.testbed.perf.MathPerf: void runCeilTest(float)>": 0.6680293976951683
        }, 
        {
            "<org.jbox2d.testbed.perf.MathPerf: void runSinTest(float)>": 0.6680293976951683
        }, 
        {
            "<boofcv.alg.interpolate.impl.NearestNeighborPixel_F32: float get_border(float,float)>": 0.5521154917877251
        }
    ], 
    "<net.smert.jreactphysics3d.body.RigidBody: net.smert.jreactphysics3d.mathematics.Matrix3x3 getInertiaTensorWorld()>": [
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.042355466240778634
        }, 
        {
            "<org.dyn4j.sandbox.Sandbox: void init(com.jogamp.opengl.GLAutoDrawable)>": 0.03958043254139215
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.TestbedMain: void main(java.lang.String[])>": 0.039207997663044995
        }, 
        {
            "<boofcv.gui.d3.Polygon3DSequenceViewer: void <init>()>": 0.037533285261185205
        }, 
        {
            "<boofcv.demonstrations.transform.pyramid.EdgeIntensitiesApp: void main(java.lang.String[])>": 0.03745569992546835
        }
    ], 
    "<net.smert.jreactphysics3d.constraint.SliderJoint: void warmstart(net.smert.jreactphysics3d.engine.ConstraintSolverData)>": [
        {
            "<boofcv.alg.distort.DistortImageOps: georegression.struct.shapes.RectangleLength2D_F32 boundBox_F32(int,int,boofcv.struct.distort.PixelTransform_F32)>": 0.06285155614836016
        }, 
        {
            "<boofcv.gui.feature.VisualizeOpticalFlow: void magnitudeAbs(boofcv.struct.flow.ImageFlow,float,java.awt.image.BufferedImage)>": 0.062334092711811694
        }, 
        {
            "<com.flowpowered.react.collision.shape.CapsuleShape: void getLocalBounds(com.flowpowered.react.math.Vector3,com.flowpowered.react.math.Vector3)>": 0.06029248699284509
        }, 
        {
            "<boofcv.gui.feature.VisualizeOpticalFlow: void magnitudeAbs(boofcv.struct.flow.ImageFlow,java.awt.image.BufferedImage)>": 0.059905568226086406
        }, 
        {
            "<com.flowpowered.react.collision.shape.CylinderShape: void getLocalBounds(com.flowpowered.react.math.Vector3,com.flowpowered.react.math.Vector3)>": 0.059729080442324986
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Vector2: boolean equals(java.lang.Object)>": [
        {
            "<org.jbox2d.testbed.pooling.ColorKey: boolean equals(java.lang.Object)>": 0.627775583615641
        }, 
        {
            "<org.jbox2d.common.Vec3: boolean equals(java.lang.Object)>": 0.6253331968555766
        }, 
        {
            "<com.flowpowered.react.math.Quaternion: boolean equals(java.lang.Object)>": 0.6123668016056402
        }, 
        {
            "<com.flowpowered.react.math.Vector4: boolean equals(java.lang.Object)>": 0.6119383946334497
        }, 
        {
            "<org.jbox2d.common.Vec2: boolean equals(java.lang.Object)>": 0.6108701446421627
        }
    ], 
    "<net.smert.jreactphysics3d.collision.narrowphase.EPA.TriangleComparison: int compare(net.smert.jreactphysics3d.collision.narrowphase.EPA.TriangleEPA,net.smert.jreactphysics3d.collision.narrowphase.EPA.TriangleEPA)>": [
        {
            "<com.flowpowered.react.math.Vector3: int getMaxAxis()>": 0.3754565184704691
        }, 
        {
            "<Catalano.Math.Vector3: int getMinIndex()>": 0.3727806232844646
        }, 
        {
            "<Catalano.Math.Vector3: int getMaxIndex()>": 0.3727806232844646
        }, 
        {
            "<com.flowpowered.react.math.Vector3: int getMinAxis()>": 0.3727806232844646
        }, 
        {
            "<Catalano.Math.Vector3: float getMin()>": 0.37275749795638397
        }
    ], 
    "<net.smert.jreactphysics3d.engine.DynamicsWorld: void notifyNewContact(net.smert.jreactphysics3d.collision.BroadPhasePair,net.smert.jreactphysics3d.constraint.ContactPointInfo)>": [
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void validateStructure(org.jbox2d.collision.broadphase.DynamicTreeNode)>": 0.4379003868931713
        }, 
        {
            "<org.dyn4j.collision.broadphase.DynamicAABBTree: void validate(org.dyn4j.collision.broadphase.DynamicAABBTreeNode)>": 0.43493882161301134
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTreeFlatNodes: void validateStructure(int)>": 0.4313137966149845
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void validate()>": 0.42447498503064995
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void validateMetrics(org.jbox2d.collision.broadphase.DynamicTreeNode)>": 0.42347755283696137
        }
    ], 
    "<net.smert.jreactphysics3d.collision.shapes.CylinderShape: net.smert.jreactphysics3d.mathematics.Vector3 getLocalSupportPointWithoutMargin(net.smert.jreactphysics3d.mathematics.Vector3,net.smert.jreactphysics3d.mathematics.Vector3)>": [
        {
            "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 multiply(com.flowpowered.react.math.Matrix4x4,com.flowpowered.react.math.Matrix4x4)>": 0.391446892548014
        }, 
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.386310976785383
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.38558219200334914
        }, 
        {
            "<org.jbox2d.common.Vec2: float length()>": 0.3849348741931504
        }, 
        {
            "<com.flowpowered.react.math.Matrix3x3: com.flowpowered.react.math.Matrix3x3 multiply(com.flowpowered.react.math.Matrix3x3,com.flowpowered.react.math.Matrix3x3)>": 0.38213906661556896
        }
    ], 
    "<net.smert.jreactphysics3d.collision.shapes.ConvexMeshShape: void addEdge(int,int)>": [
        {
            "<org.jbox2d.pooling.normal.DefaultWorldPool: float[] getFloatArray(int)>": 0.4053849328602576
        }, 
        {
            "<org.jbox2d.pooling.normal.DefaultWorldPool: int[] getIntArray(int)>": 0.4053849328602576
        }, 
        {
            "<org.jbox2d.pooling.arrays.IntArray: int[] get(int)>": 0.4048271194858112
        }, 
        {
            "<org.jbox2d.pooling.arrays.FloatArray: float[] get(int)>": 0.4048271194858112
        }, 
        {
            "<org.jbox2d.pooling.normal.DefaultWorldPool: org.jbox2d.common.Vec2[] getVec2Array(int)>": 0.3935499821895889
        }
    ], 
    "<net.smert.jreactphysics3d.constraint.SliderJoint: void enableMotor(boolean)>": [
        {
            "<Catalano.Imaging.Filters.Mirror: void <init>(boolean,boolean)>": 0.23077673742847993
        }, 
        {
            "<boofcv.alg.feature.detect.extract.NonMaxBlock: void <init>(boolean,boolean)>": 0.23077673742847993
        }, 
        {
            "<com.flowpowered.react.body.Body: void setIsSleeping(boolean)>": 0.22731469077833558
        }, 
        {
            "<boofcv.gui.calibration.CalibratedImageGridPanel: void setDisplay(boolean,boolean,boolean,boolean,boolean,double)>": 0.2221314806981181
        }, 
        {
            "<boofcv.demonstrations.calibration.SubpixelGridTargetDisplay: void setShow(boolean,boolean)>": 0.2217906806678106
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Transform: net.smert.jreactphysics3d.mathematics.Transform multiply(net.smert.jreactphysics3d.mathematics.Transform)>": [
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.044147721415648294
        }, 
        {
            "<org.dyn4j.sandbox.Sandbox: void init(com.jogamp.opengl.GLAutoDrawable)>": 0.04167623531225536
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.TestbedMain: void main(java.lang.String[])>": 0.04086706892219254
        }, 
        {
            "<org.dyn4j.sandbox.panels.LineGraphPanel: void setStaticSize(java.awt.Dimension)>": 0.04025382429497066
        }, 
        {
            "<boofcv.gui.d3.Polygon3DSequenceViewer: void <init>()>": 0.04015100465247632
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Transform: void <init>(net.smert.jreactphysics3d.mathematics.Vector3,net.smert.jreactphysics3d.mathematics.Quaternion)>": [
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.09517434737605279
        }, 
        {
            "<org.dyn4j.sandbox.Sandbox: void init(com.jogamp.opengl.GLAutoDrawable)>": 0.08893874085990064
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.TestbedMain: void main(java.lang.String[])>": 0.08810186548978267
        }, 
        {
            "<boofcv.gui.d3.Polygon3DSequenceViewer: void <init>()>": 0.08433872287712667
        }, 
        {
            "<boofcv.demonstrations.transform.pyramid.EdgeIntensitiesApp: void main(java.lang.String[])>": 0.08416438566995658
        }
    ], 
    "<net.smert.jreactphysics3d.collision.narrowphase.EPA.TriangleEPA: net.smert.jreactphysics3d.collision.narrowphase.EPA.EdgeEPA getAdjacentEdge(int)>": [
        {
            "<net.imglib2.transform.integer.SlicingTransform: boolean getComponentZero(int)>": 0.6125248517122464
        }, 
        {
            "<net.imglib2.transform.integer.MixedTransform: boolean getComponentZero(int)>": 0.6125248517122464
        }, 
        {
            "<net.imglib2.transform.integer.MixedTransform: boolean getComponentInversion(int)>": 0.6125248517122464
        }, 
        {
            "<net.imglib2.transform.integer.ComponentMappingTransform: int getComponentMapping(int)>": 0.5914950960109507
        }, 
        {
            "<net.imglib2.transform.integer.SlicingTransform: int getComponentMapping(int)>": 0.5914950960109507
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Vector3: net.smert.jreactphysics3d.mathematics.Vector3 setUnitOrthogonal()>": [
        {
            "<org.jbox2d.common.Vec2: float length()>": 0.5016059554576744
        }, 
        {
            "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 multiply(com.flowpowered.react.math.Matrix4x4,com.flowpowered.react.math.Matrix4x4)>": 0.4999358309810946
        }, 
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.495863566574057
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.49497109319116855
        }, 
        {
            "<org.jbox2d.common.Vec2: float normalize()>": 0.4917109313058831
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 transpose()>": [
        {
            "<com.flowpowered.react.math.Vector4: com.flowpowered.react.math.Vector4 negate()>": 0.4340773880979456
        }, 
        {
            "<org.jbox2d.common.Vec2: void absLocal()>": 0.43376515282290995
        }, 
        {
            "<com.flowpowered.react.math.Vector3: com.flowpowered.react.math.Vector3 negate()>": 0.429259516957552
        }, 
        {
            "<com.flowpowered.react.math.Quaternion: void <init>(float,com.flowpowered.react.math.Vector3)>": 0.4264918710128766
        }, 
        {
            "<org.jbox2d.testbed.perf.MathPerf: void runSinLUTTest(float)>": 0.4216730608560577
        }
    ], 
    "<net.smert.jreactphysics3d.constraint.JointType: void <init>(java.lang.String,int)>": [
        {
            "<Catalano.Statistics.Analysis.PrincipalComponentAnalysis$AnalysisMethod: void <init>(java.lang.String,int)>": 0.4415584415584415
        }, 
        {
            "<Catalano.Imaging.Filters.Resize$Algorithm: void <init>(java.lang.String,int)>": 0.4415584415584415
        }, 
        {
            "<Catalano.Imaging.Filters.PeronaMalikAnisotropicDiffusion$Diffusion: void <init>(java.lang.String,int)>": 0.4415584415584415
        }, 
        {
            "<Catalano.Imaging.Filters.StereoAnaglyph$Algorithm: void <init>(java.lang.String,int)>": 0.4415584415584415
        }, 
        {
            "<Catalano.Imaging.Texture.GrayLevelCooccurrenceMatrix$Degree: void <init>(java.lang.String,int)>": 0.4415584415584415
        }
    ], 
    "<net.smert.jreactphysics3d.collision.narrowphase.EPA.EPAAlgorithm: void <init>()>": [
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.14774653508414112
        }, 
        {
            "<org.dyn4j.sandbox.Sandbox: void init(com.jogamp.opengl.GLAutoDrawable)>": 0.13736209752984704
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.TestbedMain: void main(java.lang.String[])>": 0.136767371875246
        }, 
        {
            "<boofcv.demonstrations.transform.pyramid.EdgeIntensitiesApp: void main(java.lang.String[])>": 0.13065491598369758
        }, 
        {
            "<boofcv.demonstrations.tracker.CirculantVisualizationPanel: void <init>(boofcv.demonstrations.tracker.CirculantVisualizationPanel$Listener)>": 0.12938510860649274
        }
    ], 
    "<net.smert.jreactphysics3d.engine.ProfileNodeIterator: void first()>": [
        {
            "<Catalano.Imaging.Filters.GaussianBlur: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Concurrent.Filters.BradleyLocalThreshold: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.CosineTransform: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.BradleyLocalThreshold: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.UnsharpMasking: void <init>()>": 0.018184824186332698
        }
    ], 
    "<net.smert.jreactphysics3d.collision.narrowphase.GJK.GJKAlgorithm: void <init>()>": [
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.1121146885941982
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.TestbedMain: void main(java.lang.String[])>": 0.10378335640093124
        }, 
        {
            "<org.dyn4j.sandbox.Sandbox: void init(com.jogamp.opengl.GLAutoDrawable)>": 0.10321417369713477
        }, 
        {
            "<boofcv.demonstrations.transform.pyramid.EdgeIntensitiesApp: void main(java.lang.String[])>": 0.09914503382750199
        }, 
        {
            "<boofcv.demonstrations.tracker.CirculantVisualizationPanel: void <init>(boofcv.demonstrations.tracker.CirculantVisualizationPanel$Listener)>": 0.0972759699015619
        }
    ], 
    "<net.smert.jreactphysics3d.engine.DynamicsWorld: void initVelocityArrays()>": [
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void validate()>": 0.5135955914779952
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTreeFlatNodes: void validate()>": 0.5073093804796254
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void validateStructure(org.jbox2d.collision.broadphase.DynamicTreeNode)>": 0.5072808863849885
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTreeFlatNodes: void validateStructure(int)>": 0.5021724872847243
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void validateMetrics(org.jbox2d.collision.broadphase.DynamicTreeNode)>": 0.5010926925622207
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Quaternion: net.smert.jreactphysics3d.mathematics.Quaternion multiply(net.smert.jreactphysics3d.mathematics.Quaternion)>": [
        {
            "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 multiply(com.flowpowered.react.math.Matrix4x4,com.flowpowered.react.math.Matrix4x4)>": 0.31917519315451326
        }, 
        {
            "<org.jbox2d.common.Vec2: float length()>": 0.3184630660546407
        }, 
        {
            "<com.flowpowered.react.math.Quaternion: com.flowpowered.react.math.Quaternion getInverse()>": 0.3174614742719345
        }, 
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.3166158907908266
        }, 
        {
            "<org.jbox2d.collision.shapes.ChainShape: void computeAABB(org.jbox2d.collision.AABB,org.jbox2d.common.Transform,int)>": 0.31632271786862454
        }
    ], 
    "<net.smert.jreactphysics3d.engine.DynamicsWorld: void solveContactsAndConstraints()>": [
        {
            "<com.flowpowered.react.engine.DynamicsWorld: void solveContactsAndConstraints()>": 0.21104962541762384
        }, 
        {
            "<org.dyn4j.dynamics.ContactManagerTest: void clear()>": 0.20451409200946832
        }, 
        {
            "<Catalano.Imaging.Filters.Threshold: void applyInPlace(Catalano.Imaging.FastBitmap)>": 0.20338553523587283
        }, 
        {
            "<com.flowpowered.react.engine.DynamicsWorld: void tick()>": 0.19097403009051586
        }, 
        {
            "<net.imglib2.transform.integer.SlicingTransform: void set(net.imglib2.transform.integer.Slicing)>": 0.18758388796823622
        }
    ], 
    "<net.smert.jreactphysics3d.constraint.HingeJoint: void setMaxMotorTorque(float)>": [
        {
            "<org.jbox2d.dynamics.joints.FrictionJoint: void setMaxTorque(float)>": 0.4790727853388627
        }, 
        {
            "<org.jbox2d.dynamics.joints.MotorJoint: void setMaxForce(float)>": 0.4790727853388627
        }, 
        {
            "<org.jbox2d.dynamics.joints.FrictionJoint: void setMaxForce(float)>": 0.4790727853388627
        }, 
        {
            "<org.jbox2d.dynamics.joints.MotorJoint: void setMaxTorque(float)>": 0.4790727853388627
        }, 
        {
            "<org.jbox2d.dynamics.Fixture: void setDensity(float)>": 0.4790727853388627
        }
    ], 
    "<net.smert.jreactphysics3d.constraint.SliderJointInfo: void <init>(net.smert.jreactphysics3d.body.RigidBody,net.smert.jreactphysics3d.body.RigidBody,net.smert.jreactphysics3d.mathematics.Vector3,net.smert.jreactphysics3d.mathematics.Vector3)>": [
        {
            "<boofcv.alg.weights.WeightDistanceUniform_F32: void <init>(float)>": 0.1292707041662332
        }, 
        {
            "<Catalano.Imaging.Filters.UnsharpMasking: void setWeight(float)>": 0.12655812053261423
        }, 
        {
            "<org.jbox2d.particle.ParticleSystem: void setParticleDensity(float)>": 0.12631637772818127
        }, 
        {
            "<boofcv.abst.feature.detect.extract.NonMaxLimiter$LocalExtreme: float getValue()>": 0.12321401916996114
        }, 
        {
            "<com.flowpowered.react.math.Vector2: boolean isZero()>": 0.12282684025599137
        }
    ], 
    "<net.smert.jreactphysics3d.constraint.HingeJointInfo: void <init>(net.smert.jreactphysics3d.body.RigidBody,net.smert.jreactphysics3d.body.RigidBody,net.smert.jreactphysics3d.mathematics.Vector3,net.smert.jreactphysics3d.mathematics.Vector3)>": [
        {
            "<Catalano.Core.FloatRange: boolean isInside(float)>": 0.1413447545594695
        }, 
        {
            "<com.flowpowered.react.math.Mathematics: boolean approxEquals(float,float,float)>": 0.13897929614813534
        }, 
        {
            "<com.flowpowered.react.collision.narrowphase.EPA.TriangleEPA: boolean isClosestPointInternalToTriangle()>": 0.1373771249637976
        }, 
        {
            "<Catalano.Math.Geometry.Line: boolean isHorizontal()>": 0.13709668862462165
        }, 
        {
            "<Catalano.Core.FloatRange: boolean IsOverlapping(Catalano.Core.FloatRange)>": 0.13652240525799736
        }
    ], 
    "<net.smert.jreactphysics3d.collision.shapes.AABB: void setMax(net.smert.jreactphysics3d.mathematics.Vector3)>": [
        {
            "<Catalano.Imaging.Filters.GaussianBlur: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Concurrent.Filters.BradleyLocalThreshold: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.CosineTransform: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.BradleyLocalThreshold: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.UnsharpMasking: void <init>()>": 0.018184824186332698
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Vector3: boolean isUnit()>": [
        {
            "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 multiply(com.flowpowered.react.math.Matrix4x4,com.flowpowered.react.math.Matrix4x4)>": 0.5121517490716333
        }, 
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.5041533632818173
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.5031047495966502
        }, 
        {
            "<com.flowpowered.react.math.Vector3: boolean isUnit()>": 0.5029787421346106
        }, 
        {
            "<com.flowpowered.react.math.Vector4: boolean isUnit()>": 0.5024371151166551
        }
    ], 
    "<net.smert.jreactphysics3d.constraint.SliderJoint: void initBeforeSolve(net.smert.jreactphysics3d.engine.ConstraintSolverData)>": [
        {
            "<org.jbox2d.common.Vec3: void crossToOutUnsafe(org.jbox2d.common.Vec3,org.jbox2d.common.Vec3,org.jbox2d.common.Vec3)>": 0.20791164894611078
        }, 
        {
            "<com.flowpowered.react.math.Vector2: boolean isZero()>": 0.2058874707279481
        }, 
        {
            "<com.flowpowered.react.math.Vector2: boolean isUnit()>": 0.2058874707279481
        }, 
        {
            "<com.flowpowered.react.math.Vector3: boolean isZero()>": 0.20586573383474974
        }, 
        {
            "<com.flowpowered.react.math.Vector3: boolean isUnit()>": 0.20586573383474974
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 multiply(net.smert.jreactphysics3d.mathematics.Matrix2x2)>": [
        {
            "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 multiply(com.flowpowered.react.math.Matrix4x4,com.flowpowered.react.math.Matrix4x4)>": 0.5399017361305763
        }, 
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.5306522569553414
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.5296497706515192
        }, 
        {
            "<org.jbox2d.dynamics.contacts.PositionSolverManifold: void initialize(org.jbox2d.dynamics.contacts.ContactPositionConstraint,org.jbox2d.common.Transform,org.jbox2d.common.Transform,int)>": 0.5234562021966153
        }, 
        {
            "<org.jbox2d.common.Rot: void mulTrans(org.jbox2d.common.Rot,org.jbox2d.common.Vec2,org.jbox2d.common.Vec2)>": 0.5218553371884977
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Vector2: int hashCode()>": [
        {
            "<com.flowpowered.react.math.Quaternion: int hashCode()>": 0.493650321627116
        }, 
        {
            "<com.flowpowered.react.math.Vector4: int hashCode()>": 0.49259409620915895
        }, 
        {
            "<org.jbox2d.testbed.pooling.ColorKey: int hashCode()>": 0.49259409620915895
        }, 
        {
            "<Catalano.Core.FloatRange: int hashCode()>": 0.49042532598109934
        }, 
        {
            "<com.flowpowered.react.math.Vector3: int hashCode()>": 0.4899340231914684
        }
    ], 
    "<net.smert.jreactphysics3d.body.CollisionBody: net.smert.jreactphysics3d.mathematics.Transform getInterpolatedTransform(net.smert.jreactphysics3d.mathematics.Transform)>": [
        {
            "<com.flowpowered.react.collision.shape.CylinderShape: float getHeight()>": 0.056740242220765846
        }, 
        {
            "<com.flowpowered.react.collision.shape.ConeShape: float getHeight()>": 0.056740242220765846
        }, 
        {
            "<com.flowpowered.react.collision.shape.CapsuleShape: float getHeight()>": 0.056740242220765846
        }, 
        {
            "<org.jbox2d.dynamics.Profile$ProfileEntry: void accum(float)>": 0.056740242220765846
        }, 
        {
            "<org.jbox2d.dynamics.joints.ConstantVolumeJoint: void inflate(float)>": 0.056740242220765846
        }
    ], 
    "<net.smert.jreactphysics3d.collision.CollisionDetection: void <init>(net.smert.jreactphysics3d.engine.CollisionWorld)>": [
        {
            "<org.dyn4j.collision.broadphase.DynamicAABBTree: void validate(org.dyn4j.collision.broadphase.DynamicAABBTreeNode)>": 0.32269900242744165
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void validateStructure(org.jbox2d.collision.broadphase.DynamicTreeNode)>": 0.3141289300476581
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTreeFlatNodes: void validateStructure(int)>": 0.31062799503600375
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void validateMetrics(org.jbox2d.collision.broadphase.DynamicTreeNode)>": 0.3037279810339754
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTreeFlatNodes: void validateMetrics(int)>": 0.301121556259509
        }
    ], 
    "<net.smert.jreactphysics3d.engine.DynamicsWorld: void notifyRemovedOverlappingPair(net.smert.jreactphysics3d.collision.BroadPhasePair)>": [
        {
            "<org.dyn4j.sandbox.dialogs.AddJointDialog: void incrementCounter(java.lang.Class)>": 0.14174296041715465
        }, 
        {
            "<net.coobird.thumbnailator.resizers.NullResizer: void <init>(java.lang.Object,java.util.Map)>": 0.13623731522826651
        }, 
        {
            "<net.coobird.thumbnailator.resizers.ProgressiveBilinearResizer: void <init>(java.util.Map)>": 0.13623731522826651
        }, 
        {
            "<net.coobird.thumbnailator.resizers.BicubicResizer: void <init>(java.util.Map)>": 0.13623731522826651
        }, 
        {
            "<net.coobird.thumbnailator.resizers.BilinearResizer: void <init>(java.util.Map)>": 0.13623731522826651
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Quaternion: void Slerp(net.smert.jreactphysics3d.mathematics.Quaternion,net.smert.jreactphysics3d.mathematics.Quaternion,float,net.smert.jreactphysics3d.mathematics.Quaternion)>": [
        {
            "<org.jbox2d.common.Vec2: void crossToOutUnsafe(org.jbox2d.common.Vec2,float,org.jbox2d.common.Vec2)>": 0.3357855540871969
        }, 
        {
            "<org.jbox2d.common.Vec2: void crossToOutUnsafe(float,org.jbox2d.common.Vec2,org.jbox2d.common.Vec2)>": 0.3357855540871969
        }, 
        {
            "<org.jbox2d.common.Sweep: void advance(float)>": 0.32857639177872433
        }, 
        {
            "<org.jbox2d.common.Vec3: void crossToOutUnsafe(org.jbox2d.common.Vec3,org.jbox2d.common.Vec3,org.jbox2d.common.Vec3)>": 0.32214741582395784
        }, 
        {
            "<org.jbox2d.common.Rot: void mulUnsafe(org.jbox2d.common.Rot,org.jbox2d.common.Rot,org.jbox2d.common.Rot)>": 0.3201366100720443
        }
    ], 
    "<net.smert.jreactphysics3d.engine.DynamicsWorld: void destroyJoint(net.smert.jreactphysics3d.constraint.Joint)>": [
        {
            "<org.dyn4j.collision.broadphase.DynamicAABBTree: void validate(org.dyn4j.collision.broadphase.DynamicAABBTreeNode)>": 0.24713345622334948
        }, 
        {
            "<net.imglib2.transform.integer.SlicingTransform: boolean getComponentZero(int)>": 0.2315139428297105
        }, 
        {
            "<net.imglib2.transform.integer.MixedTransform: boolean getComponentZero(int)>": 0.2315139428297105
        }, 
        {
            "<net.imglib2.transform.integer.MixedTransform: boolean getComponentInversion(int)>": 0.2315139428297105
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void validateStructure(org.jbox2d.collision.broadphase.DynamicTreeNode)>": 0.22927601087498267
        }
    ], 
    "<net.smert.jreactphysics3d.collision.shapes.SphereShape: void getLocalBounds(net.smert.jreactphysics3d.mathematics.Vector3,net.smert.jreactphysics3d.mathematics.Vector3)>": [
        {
            "<org.jbox2d.common.Vec2: void absLocal()>": 0.3230500899706221
        }, 
        {
            "<com.flowpowered.react.math.Vector4: com.flowpowered.react.math.Vector4 negate()>": 0.3228033424398707
        }, 
        {
            "<com.flowpowered.react.math.Vector3: com.flowpowered.react.math.Vector3 negate()>": 0.3189905659028949
        }, 
        {
            "<com.flowpowered.react.math.Quaternion: void <init>(float,com.flowpowered.react.math.Vector3)>": 0.31864692989315546
        }, 
        {
            "<org.jbox2d.dynamics.contacts.Contact: float mixFriction(float,float)>": 0.3161123207198179
        }
    ], 
    "<net.smert.jreactphysics3d.constraint.HingeJoint: void setMaxAngleLimit(float)>": [
        {
            "<org.jbox2d.dynamics.joints.FrictionJoint: void setMaxTorque(float)>": 0.429519536258963
        }, 
        {
            "<org.jbox2d.dynamics.joints.MotorJoint: void setMaxForce(float)>": 0.429519536258963
        }, 
        {
            "<org.jbox2d.dynamics.joints.FrictionJoint: void setMaxForce(float)>": 0.429519536258963
        }, 
        {
            "<org.jbox2d.dynamics.joints.MotorJoint: void setMaxTorque(float)>": 0.429519536258963
        }, 
        {
            "<org.jbox2d.dynamics.Fixture: void setDensity(float)>": 0.429519536258963
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 invert()>": [
        {
            "<com.flowpowered.react.math.Vector4: com.flowpowered.react.math.Vector4 negate()>": 0.453742093222225
        }, 
        {
            "<org.jbox2d.common.Vec2: void absLocal()>": 0.4527360605103495
        }, 
        {
            "<com.flowpowered.react.math.Vector3: com.flowpowered.react.math.Vector3 negate()>": 0.4484706708873978
        }, 
        {
            "<com.flowpowered.react.math.Quaternion: void <init>(float,com.flowpowered.react.math.Vector3)>": 0.4460008445670982
        }, 
        {
            "<org.jbox2d.testbed.perf.MathPerf: void runSinLUTTest(float)>": 0.4399662019434583
        }
    ], 
    "<net.smert.jreactphysics3d.engine.DynamicsWorld: void updateSleepingBodies()>": [
        {
            "<com.flowpowered.react.engine.DynamicsWorld: void updateSleepingBodies()>": 0.3747960211602016
        }, 
        {
            "<boofcv.alg.tracker.klt.KltTracker: boofcv.alg.tracker.klt.KltTrackFault track(boofcv.alg.tracker.klt.KltFeature)>": 0.32454711477880316
        }, 
        {
            "<org.jbox2d.dynamics.Island: void solve(org.jbox2d.dynamics.Profile,org.jbox2d.dynamics.TimeStep,org.jbox2d.common.Vec2,boolean)>": 0.31536127896920524
        }, 
        {
            "<boofcv.alg.distort.DistortImageOps: void updateBoundBox(boofcv.struct.distort.PixelTransform_F32,boofcv.struct.ImageRectangle_F32)>": 0.31458321996797706
        }, 
        {
            "<com.flowpowered.react.collision.narrowphase.EPA.TriangleEPA: boolean isClosestPointInternalToTriangle()>": 0.3145127219866327
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Vector3: net.smert.jreactphysics3d.mathematics.Vector3 subtract(net.smert.jreactphysics3d.mathematics.Vector3)>": [
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.44723889114779497
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.44622978039980843
        }, 
        {
            "<com.flowpowered.react.math.Quaternion: void inverse()>": 0.44304320288574595
        }, 
        {
            "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 multiply(com.flowpowered.react.math.Matrix4x4,com.flowpowered.react.math.Matrix4x4)>": 0.44301393338148165
        }, 
        {
            "<org.jbox2d.common.Vec2: float length()>": 0.43954572292829897
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 set(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": [
        {
            "<com.flowpowered.react.math.Vector4: com.flowpowered.react.math.Vector4 negate()>": 0.4030429479109123
        }, 
        {
            "<org.jbox2d.common.Vec2: void absLocal()>": 0.4028291989164485
        }, 
        {
            "<com.flowpowered.react.math.Vector3: com.flowpowered.react.math.Vector3 negate()>": 0.3983577372477169
        }, 
        {
            "<com.flowpowered.react.math.Quaternion: void <init>(float,com.flowpowered.react.math.Vector3)>": 0.39695179931852514
        }, 
        {
            "<org.jbox2d.testbed.perf.MathPerf: void runSinLUTTest(float)>": 0.3927342678911464
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Quaternion: net.smert.jreactphysics3d.mathematics.Quaternion inverse()>": [
        {
            "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 multiply(com.flowpowered.react.math.Matrix4x4,com.flowpowered.react.math.Matrix4x4)>": 0.524778128872128
        }, 
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.5199182360113378
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.5189905995755904
        }, 
        {
            "<com.flowpowered.react.math.Quaternion: void inverse()>": 0.5184804441697156
        }, 
        {
            "<org.jbox2d.dynamics.contacts.PositionSolverManifold: void initialize(org.jbox2d.dynamics.contacts.ContactPositionConstraint,org.jbox2d.common.Transform,org.jbox2d.common.Transform,int)>": 0.5144112343449151
        }
    ], 
    "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: boolean isValidSubset(int)>": [
        {
            "<Catalano.Imaging.Texture.BinaryPattern.UniformLocalBinaryPattern: boolean isUniform(int)>": 0.6177690987334605
        }, 
        {
            "<net.coobird.thumbnailator.util.exif.IfdStructure: boolean isOffset()>": 0.6119442557137177
        }, 
        {
            "<com.flowpowered.react.collision.narrowphase.GJK.Simplex: boolean overlap(int,int)>": 0.603680877050801
        }, 
        {
            "<com.flowpowered.react.collision.narrowphase.GJK.Simplex: boolean isSubset(int,int)>": 0.603680877050801
        }, 
        {
            "<net.coobird.thumbnailator.util.exif.IfdStructure: boolean isValue()>": 0.5634910960937705
        }
    ], 
    "<net.smert.jreactphysics3d.constraint.BallAndSocketJoint: void warmstart(net.smert.jreactphysics3d.engine.ConstraintSolverData)>": [
        {
            "<Catalano.Imaging.Filters.Threshold: void applyInPlace(Catalano.Imaging.FastBitmap)>": 0.07874022963852635
        }, 
        {
            "<Catalano.Imaging.Filters.VerticalRunLengthSmoothing: void applyInPlace(Catalano.Imaging.FastBitmap)>": 0.07502606306983911
        }, 
        {
            "<Catalano.Imaging.Filters.HorizontalRunLengthSmoothing: void applyInPlace(Catalano.Imaging.FastBitmap)>": 0.07502606306983911
        }, 
        {
            "<com.flowpowered.react.engine.DynamicsWorld: void computeIslands()>": 0.07397732967824236
        }, 
        {
            "<net.imglib2.view.iteration.SlicingCursor: void <init>(net.imglib2.Cursor,net.imglib2.transform.integer.Slicing)>": 0.0738123064459094
        }
    ], 
    "<net.smert.jreactphysics3d.collision.shapes.ConvexMeshShape: void computeLocalInertiaTensor(net.smert.jreactphysics3d.mathematics.Matrix3x3,float)>": [
        {
            "<org.jbox2d.collision.shapes.PolygonShape: boolean raycast(org.jbox2d.collision.RayCastOutput,org.jbox2d.collision.RayCastInput,org.jbox2d.common.Transform,int)>": 0.38339975309326946
        }, 
        {
            "<org.jbox2d.common.Transform: void mulTransToOutUnsafe(org.jbox2d.common.Transform,org.jbox2d.common.Vec2,org.jbox2d.common.Vec2)>": 0.37608071017705264
        }, 
        {
            "<org.jbox2d.common.Sweep: void advance(float)>": 0.3739453382067533
        }, 
        {
            "<org.jbox2d.common.Vec3: void crossToOutUnsafe(org.jbox2d.common.Vec3,org.jbox2d.common.Vec3,org.jbox2d.common.Vec3)>": 0.37032424364087035
        }, 
        {
            "<org.jbox2d.common.MathUtils: float clamp(float,float,float)>": 0.368275172517331
        }
    ], 
    "<net.smert.jreactphysics3d.collision.narrowphase.EPA.TrianglesStore: net.smert.jreactphysics3d.collision.narrowphase.EPA.TriangleEPA last()>": [
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void validate()>": 0.515440793954683
        }, 
        {
            "<org.jbox2d.particle.ParticleSystem: void setParticleMaxCount(int)>": 0.515050663840322
        }, 
        {
            "<net.imglib2.transform.integer.SlicingTransform: boolean getComponentZero(int)>": 0.5141095433102431
        }, 
        {
            "<net.imglib2.transform.integer.MixedTransform: boolean getComponentZero(int)>": 0.5141095433102431
        }, 
        {
            "<net.imglib2.transform.integer.MixedTransform: boolean getComponentInversion(int)>": 0.5141095433102431
        }
    ], 
    "<net.smert.jreactphysics3d.collision.shapes.BoxShape: boolean isEqualTo(net.smert.jreactphysics3d.collision.shapes.CollisionShape)>": [
        {
            "<net.imglib2.type.logic.BoolType: boolean valueEquals(java.lang.Object)>": 0.21925758267861248
        }, 
        {
            "<boofcv.abst.sfm.d3.MonoOverhead_to_MonocularPlaneVisualOdometry: boolean process(boofcv.struct.image.ImageBase)>": 0.20628010561925886
        }, 
        {
            "<net.imglib2.type.logic.BoolType: boolean valueEquals(net.imglib2.type.logic.BoolType)>": 0.20539877699944162
        }, 
        {
            "<Catalano.Core.Structs.BinaryHeap: boolean isEmpty()>": 0.20284736150413218
        }, 
        {
            "<Catalano.Math.SparseArray: boolean isEmpty()>": 0.20284736150413218
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Vector2: float length()>": [
        {
            "<org.jbox2d.common.Vec2: float length()>": 0.5694415173867229
        }, 
        {
            "<org.jbox2d.dynamics.contacts.Contact: float mixFriction(float,float)>": 0.5211218897637305
        }, 
        {
            "<org.jbox2d.common.Settings: float mixFriction(float,float)>": 0.5211218897637305
        }, 
        {
            "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 multiply(com.flowpowered.react.math.Matrix4x4,com.flowpowered.react.math.Matrix4x4)>": 0.5209726323066846
        }, 
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.5123354750659116
        }
    ], 
    "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: void updateCache()>": [
        {
            "<Catalano.Imaging.Texture.BinaryPattern.UniformLocalBinaryPattern: boolean isUniform(int)>": 0.3344402983680461
        }, 
        {
            "<boofcv.struct.image.ImageBase: boolean isInBounds(int,int)>": 0.3228645754448205
        }, 
        {
            "<boofcv.struct.flow.ImageFlow: boolean isInBounds(int,int)>": 0.3228645754448205
        }, 
        {
            "<boofcv.struct.feature.MatrixOfList: boolean isInBounds(int,int)>": 0.3228645754448205
        }, 
        {
            "<Catalano.Core.IntRange: boolean isInside(int)>": 0.32157746120355446
        }
    ], 
    "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: void computeClosestPointsOfAandB(net.smert.jreactphysics3d.mathematics.Vector3,net.smert.jreactphysics3d.mathematics.Vector3)>": [
        {
            "<Catalano.Imaging.Texture.BinaryPattern.UniformLocalBinaryPattern: boolean isUniform(int)>": 0.29268291287632275
        }, 
        {
            "<com.flowpowered.react.collision.narrowphase.GJK.Simplex: boolean computeClosestPoint(com.flowpowered.react.math.Vector3)>": 0.28514212457134896
        }, 
        {
            "<org.jbox2d.dynamics.World: int createParticle(org.jbox2d.particle.ParticleDef)>": 0.2827596840934813
        }, 
        {
            "<org.jbox2d.dynamics.World: int destroyParticlesInShape(org.jbox2d.collision.shapes.Shape,org.jbox2d.common.Transform)>": 0.27592065811668587
        }, 
        {
            "<org.jbox2d.dynamics.World: int destroyParticlesInShape(org.jbox2d.collision.shapes.Shape,org.jbox2d.common.Transform,boolean)>": 0.27516505310855116
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Quaternion: net.smert.jreactphysics3d.mathematics.Quaternion conjugate()>": [
        {
            "<org.jbox2d.common.Vec2: void absLocal()>": 0.44268359858268463
        }, 
        {
            "<com.flowpowered.react.math.Vector4: com.flowpowered.react.math.Vector4 negate()>": 0.4425480358960301
        }, 
        {
            "<com.flowpowered.react.math.Vector3: com.flowpowered.react.math.Vector3 negate()>": 0.43776481569630155
        }, 
        {
            "<com.flowpowered.react.math.Quaternion: void <init>(float,com.flowpowered.react.math.Vector3)>": 0.43480531143294576
        }, 
        {
            "<org.jbox2d.testbed.perf.MathPerf: void runSinLUTTest(float)>": 0.4305759720602681
        }
    ], 
    "<net.smert.jreactphysics3d.engine.ContactSolver: void storeImpulses()>": [
        {
            "<boofcv.factory.background.FactoryBackgroundModel: boofcv.alg.background.stationary.BackgroundStationaryGaussian stationaryGaussian(boofcv.factory.background.ConfigBackgroundGaussian,boofcv.struct.image.ImageType)>": 0.2662435891105197
        }, 
        {
            "<boofcv.factory.background.FactoryBackgroundModel: boofcv.alg.background.stationary.BackgroundStationaryBasic stationaryBasic(boofcv.factory.background.ConfigBackgroundBasic,boofcv.struct.image.ImageType)>": 0.2563817218446769
        }, 
        {
            "<boofcv.factory.background.FactoryBackgroundModel: boofcv.alg.background.moving.BackgroundMovingGaussian movingGaussian(boofcv.factory.background.ConfigBackgroundGaussian,boofcv.struct.distort.PointTransformModel_F32,boofcv.struct.image.ImageType)>": 0.2550393871802282
        }, 
        {
            "<com.flowpowered.react.collision.shape.SphereShape: void getLocalBounds(com.flowpowered.react.math.Vector3,com.flowpowered.react.math.Vector3)>": 0.24899636899021488
        }, 
        {
            "<boofcv.alg.interpolate.impl.ImplPolynomialPixel_F32: void <init>(int,float,float)>": 0.24120252935964792
        }
    ], 
    "<net.smert.jreactphysics3d.collision.shapes.ConvexMeshShape: void <init>(net.smert.jreactphysics3d.collision.shapes.ConvexMeshShape)>": [
        {
            "<org.box2d.proto.Box2D$PbWorld$Builder: org.box2d.proto.Box2D$PbWorld buildPartial()>": 0.18926539110372892
        }, 
        {
            "<org.box2d.proto.Box2D$PbWorld$Builder: org.box2d.proto.Box2D$PbWorld build()>": 0.18809477616456738
        }, 
        {
            "<org.box2d.proto.Box2D$PbWorld$Builder: org.box2d.proto.Box2D$PbWorld$Builder clone()>": 0.18542207118136222
        }, 
        {
            "<org.box2d.proto.Box2D$PbWorld: void <init>(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)>": 0.183141006801635
        }, 
        {
            "<org.box2d.proto.Box2D$PbWorld: void <init>(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite,org.box2d.proto.Box2D$1)>": 0.18216405697965377
        }
    ], 
    "<net.smert.jreactphysics3d.collision.shapes.SphereShape: net.smert.jreactphysics3d.mathematics.Vector3 getLocalSupportPointWithoutMargin(net.smert.jreactphysics3d.mathematics.Vector3,net.smert.jreactphysics3d.mathematics.Vector3)>": [
        {
            "<Catalano.Imaging.Filters.GaussianBlur: void <init>()>": 0.013231403100624078
        }, 
        {
            "<Catalano.Imaging.Concurrent.Filters.BradleyLocalThreshold: void <init>()>": 0.013231403100624078
        }, 
        {
            "<Catalano.Imaging.Filters.CosineTransform: void <init>()>": 0.013231403100624078
        }, 
        {
            "<Catalano.Imaging.Filters.BradleyLocalThreshold: void <init>()>": 0.013231403100624078
        }, 
        {
            "<Catalano.Imaging.Filters.UnsharpMasking: void <init>()>": 0.013231403100624078
        }
    ], 
    "<net.smert.jreactphysics3d.engine.ConstraintSolver: void setIsNonLinearGaussSeidelPositionCorrectionActive(boolean)>": [
        {
            "<Catalano.Statistics.Distributions.InverseGammaDistribution: double Entropy()>": 0.5692856913822774
        }, 
        {
            "<boofcv.alg.fiducial.calib.chess.ChessboardPolygonHelper: boolean filterContour(java.util.List,boolean,boolean)>": 0.4238087046038733
        }, 
        {
            "<org.dyn4j.sandbox.Sandbox: void renderBody(com.jogamp.opengl.GL2,org.dyn4j.sandbox.SandboxBody)>": 0.39987430755706466
        }, 
        {
            "<net.imglib2.transform.integer.SlicingTransform: boolean getComponentZero(int)>": 0.34942945940251147
        }, 
        {
            "<net.imglib2.transform.integer.MixedTransform: boolean getComponentZero(int)>": 0.34942945940251147
        }
    ], 
    "<net.smert.jreactphysics3d.collision.shapes.ConvexMeshShape: boolean isEqualTo(net.smert.jreactphysics3d.collision.shapes.CollisionShape)>": [
        {
            "<org.dyn4j.dynamics.World: boolean isEmpty()>": 0.40184564434017
        }, 
        {
            "<boofcv.io.SimpleStringNumberReader: boolean next()>": 0.3805281357716795
        }, 
        {
            "<boofcv.demonstrations.calibration.CommonDetectCalibrationApp: boolean isInGrids(georegression.struct.shapes.Polygon2D_F64)>": 0.3766852061505632
        }, 
        {
            "<boofcv.io.wrapper.images.JpegByteImageSequence: boolean hasNext()>": 0.3640326971994942
        }, 
        {
            "<boofcv.io.wrapper.images.LoadFileImageSequence: boolean hasNext()>": 0.34963127364368035
        }
    ], 
    "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: boolean overlap(int,int)>": [
        {
            "<com.flowpowered.react.collision.narrowphase.GJK.Simplex: boolean overlap(int,int)>": 0.9448928917162578
        }, 
        {
            "<com.flowpowered.react.collision.narrowphase.GJK.Simplex: boolean isSubset(int,int)>": 0.9448928917162578
        }, 
        {
            "<Catalano.Imaging.Texture.BinaryPattern.UniformLocalBinaryPattern: boolean isUniform(int)>": 0.6992403840558168
        }, 
        {
            "<Catalano.Imaging.Shapes.IntRectangle: boolean isOverlaped(int,int,int,int)>": 0.6749669542571732
        }, 
        {
            "<net.coobird.thumbnailator.util.exif.IfdStructure: boolean isOffset()>": 0.6257722782603008
        }
    ], 
    "<net.smert.jreactphysics3d.engine.DynamicsWorld: void update()>": [
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void validate()>": 0.39845839497333746
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void validateMetrics(org.jbox2d.collision.broadphase.DynamicTreeNode)>": 0.3921692147208765
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTreeFlatNodes: void validate()>": 0.3851621788566723
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void rebuildBottomUp()>": 0.38220272778011555
        }, 
        {
            "<com.flowpowered.react.engine.DynamicsWorld: void update()>": 0.37405910785997737
        }
    ], 
    "<net.smert.jreactphysics3d.constraint.HingeJoint: float getMotorTorque(float)>": [
        {
            "<com.flowpowered.react.constraint.SliderJoint: float getMotorForce(float)>": 0.6371710526315789
        }, 
        {
            "<com.flowpowered.react.constraint.HingeJoint: float getMotorTorque(float)>": 0.6371710526315789
        }, 
        {
            "<org.jbox2d.dynamics.joints.WheelJoint: float getMotorTorque(float)>": 0.6371710526315789
        }, 
        {
            "<org.jbox2d.dynamics.joints.PrismaticJoint: float getMotorForce(float)>": 0.6371710526315789
        }, 
        {
            "<org.jbox2d.dynamics.joints.FrictionJoint: float getReactionTorque(float)>": 0.6371710526315789
        }
    ], 
    "<net.smert.jreactphysics3d.collision.narrowphase.EPA.EdgeEPA: void <init>(net.smert.jreactphysics3d.collision.narrowphase.EPA.TriangleEPA,int)>": [
        {
            "<org.jbox2d.particle.ParticleSystem: void setParticleMaxCount(int)>": 0.5386906239860634
        }, 
        {
            "<net.imglib2.transform.integer.SlicingTransform: boolean getComponentZero(int)>": 0.5132089423045012
        }, 
        {
            "<net.imglib2.transform.integer.MixedTransform: boolean getComponentZero(int)>": 0.5132089423045012
        }, 
        {
            "<net.imglib2.transform.integer.MixedTransform: boolean getComponentInversion(int)>": 0.5132089423045012
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTreeFlatNodes: void validate()>": 0.5046991107201655
        }
    ], 
    "<net.smert.jreactphysics3d.collision.shapes.BoxShape: net.smert.jreactphysics3d.mathematics.Vector3 getLocalSupportPointWithMargin(net.smert.jreactphysics3d.mathematics.Vector3,net.smert.jreactphysics3d.mathematics.Vector3)>": [
        {
            "<org.jbox2d.testbed.perf.MathPerf: void runSinLUTTest(float)>": 0.41171410693053667
        }, 
        {
            "<com.flowpowered.react.math.Vector4: com.flowpowered.react.math.Vector4 negate()>": 0.4050892424029685
        }, 
        {
            "<org.jbox2d.common.Vec2: void absLocal()>": 0.4042280526288716
        }, 
        {
            "<com.flowpowered.react.collision.shape.BoxShape: com.flowpowered.react.math.Vector3 getLocalSupportPointWithMargin(com.flowpowered.react.math.Vector3)>": 0.4031612724866446
        }, 
        {
            "<com.flowpowered.react.math.Vector3: com.flowpowered.react.math.Vector3 negate()>": 0.4003006537996988
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Vector2: net.smert.jreactphysics3d.mathematics.Vector2 invert()>": [
        {
            "<org.jbox2d.common.Vec2: void absLocal()>": 0.4285366853596537
        }, 
        {
            "<com.flowpowered.react.math.Vector4: com.flowpowered.react.math.Vector4 negate()>": 0.4275958549402118
        }, 
        {
            "<com.flowpowered.react.math.Vector3: com.flowpowered.react.math.Vector3 negate()>": 0.4232329138959318
        }, 
        {
            "<com.flowpowered.react.math.Quaternion: void <init>(float,com.flowpowered.react.math.Vector3)>": 0.4199794581516281
        }, 
        {
            "<org.jbox2d.testbed.perf.MathPerf: void runSinLUTTest(float)>": 0.41709483612918985
        }
    ], 
    "<net.smert.jreactphysics3d.collision.broadphase.AABBInt: void <init>(long,long)>": [
        {
            "<com.flowpowered.react.collision.broadphase.SweepAndPruneAlgorithm$AABBInt: void <init>(long,long)>": 0.5774413443246671
        }, 
        {
            "<com.flowpowered.react.collision.broadphase.SweepAndPruneAlgorithm$AABBInt: void <init>(long,long,com.flowpowered.react.collision.broadphase.SweepAndPruneAlgorithm$1)>": 0.4713655698443367
        }, 
        {
            "<net.imglib2.AbstractInterval: void <init>(int)>": 0.33700283554095833
        }, 
        {
            "<net.imglib2.AbstractInterval: void <init>(long[])>": 0.33040271382467545
        }, 
        {
            "<net.imglib2.view.SubsampleIntervalView: void <init>(net.imglib2.RandomAccessibleInterval,long)>": 0.3272262544577212
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 multiply(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": [
        {
            "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 multiply(com.flowpowered.react.math.Matrix4x4,com.flowpowered.react.math.Matrix4x4)>": 0.5568704298660233
        }, 
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.5464476904515146
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.5454659761167329
        }, 
        {
            "<org.jbox2d.dynamics.contacts.PositionSolverManifold: void initialize(org.jbox2d.dynamics.contacts.ContactPositionConstraint,org.jbox2d.common.Transform,org.jbox2d.common.Transform,int)>": 0.5380214338894173
        }, 
        {
            "<org.jbox2d.common.Rot: void mulTrans(org.jbox2d.common.Rot,org.jbox2d.common.Vec2,org.jbox2d.common.Vec2)>": 0.5305034538828686
        }
    ], 
    "<net.smert.jreactphysics3d.body.CollisionBody: void setTransform(net.smert.jreactphysics3d.mathematics.Transform)>": [
        {
            "<boofcv.abst.sfm.d3.WrapVisOdomPixelDepthPnP: boolean isFault()>": 0.1791910778099024
        }, 
        {
            "<boofcv.abst.sfm.d3.VisOdomPixelDepthPnP_to_DepthVisualOdometry: boolean isFault()>": 0.1791910778099024
        }, 
        {
            "<boofcv.io.javacv.JavaCVVideoImageSequence: boolean hasNext()>": 0.1791910778099024
        }, 
        {
            "<boofcv.abst.feature.associate.EnforceUniqueByScore: boolean uniqueDestination()>": 0.16925713653459107
        }, 
        {
            "<boofcv.abst.feature.associate.EnforceUniqueByScore: boolean uniqueSource()>": 0.16925713653459107
        }
    ], 
    "<net.smert.jreactphysics3d.constraint.SliderJoint: float getMotorForce(float)>": [
        {
            "<com.flowpowered.react.constraint.SliderJoint: float getMotorForce(float)>": 0.6371710526315789
        }, 
        {
            "<com.flowpowered.react.constraint.HingeJoint: float getMotorTorque(float)>": 0.6371710526315789
        }, 
        {
            "<org.jbox2d.dynamics.joints.WheelJoint: float getMotorTorque(float)>": 0.6371710526315789
        }, 
        {
            "<org.jbox2d.dynamics.joints.PrismaticJoint: float getMotorForce(float)>": 0.6371710526315789
        }, 
        {
            "<org.jbox2d.dynamics.joints.FrictionJoint: float getReactionTorque(float)>": 0.6371710526315789
        }
    ], 
    "<net.smert.jreactphysics3d.constraint.SliderJoint: void setMotorSpeed(float)>": [
        {
            "<org.jbox2d.common.MathUtils: float min(float,float)>": 0.27217205551146173
        }, 
        {
            "<org.jbox2d.dynamics.contacts.Contact: float mixRestitution(float,float)>": 0.27217205551146173
        }, 
        {
            "<org.jbox2d.common.MathUtils: float max(float,float)>": 0.27217205551146173
        }, 
        {
            "<org.jbox2d.common.Settings: float mixRestitution(float,float)>": 0.27217205551146173
        }, 
        {
            "<com.flowpowered.react.math.Mathematics: float clamp(float,float,float)>": 0.24734051295693768
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Mathematics: boolean ApproxEqual(float,float,float)>": [
        {
            "<com.flowpowered.react.math.Mathematics: boolean approxEquals(float,float,float)>": 1.0
        }, 
        {
            "<Catalano.Core.FloatRange: boolean IsOverlapping(Catalano.Core.FloatRange)>": 0.5318046064335171
        }, 
        {
            "<Catalano.Core.FloatRange: boolean isInside(float)>": 0.5213138327324309
        }, 
        {
            "<com.flowpowered.react.collision.narrowphase.EPA.TriangleEPA: boolean isClosestPointInternalToTriangle()>": 0.47760321143579343
        }, 
        {
            "<boofcv.alg.filter.kernel.KernelMath: boolean isEqualsFrac(float[],float[],int,float,float)>": 0.4511332831845843
        }
    ], 
    "<net.smert.jreactphysics3d.collision.shapes.CollisionShapeType: void <init>(java.lang.String,int)>": [
        {
            "<Catalano.Statistics.Analysis.PrincipalComponentAnalysis$AnalysisMethod: void <init>(java.lang.String,int)>": 0.4415584415584415
        }, 
        {
            "<Catalano.Imaging.Filters.Resize$Algorithm: void <init>(java.lang.String,int)>": 0.4415584415584415
        }, 
        {
            "<Catalano.Imaging.Filters.PeronaMalikAnisotropicDiffusion$Diffusion: void <init>(java.lang.String,int)>": 0.4415584415584415
        }, 
        {
            "<Catalano.Imaging.Filters.StereoAnaglyph$Algorithm: void <init>(java.lang.String,int)>": 0.4415584415584415
        }, 
        {
            "<Catalano.Imaging.Texture.GrayLevelCooccurrenceMatrix$Degree: void <init>(java.lang.String,int)>": 0.4415584415584415
        }
    ], 
    "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: boolean isSubset(int,int)>": [
        {
            "<com.flowpowered.react.collision.narrowphase.GJK.Simplex: boolean overlap(int,int)>": 0.9448928917162578
        }, 
        {
            "<com.flowpowered.react.collision.narrowphase.GJK.Simplex: boolean isSubset(int,int)>": 0.9448928917162578
        }, 
        {
            "<Catalano.Imaging.Texture.BinaryPattern.UniformLocalBinaryPattern: boolean isUniform(int)>": 0.6992403840558168
        }, 
        {
            "<Catalano.Imaging.Shapes.IntRectangle: boolean isOverlaped(int,int,int,int)>": 0.6749669542571732
        }, 
        {
            "<net.coobird.thumbnailator.util.exif.IfdStructure: boolean isOffset()>": 0.6257722782603008
        }
    ], 
    "<net.smert.jreactphysics3d.body.RigidBody: void setIsSleeping(boolean)>": [
        {
            "<boofcv.alg.feature.detect.extract.NonMaxBlockRelaxed: void <init>(boolean,boolean)>": 0.1087976216132884
        }, 
        {
            "<boofcv.alg.feature.detect.extract.NonMaxBlockStrict: void <init>(boolean,boolean)>": 0.1087976216132884
        }, 
        {
            "<boofcv.abst.feature.associate.EnforceUniqueByScore$Describe2D: void <init>(boofcv.abst.feature.associate.AssociateDescription2D,boolean,boolean)>": 0.09956710474372901
        }, 
        {
            "<boofcv.abst.feature.associate.EnforceUniqueByScore$Describe: void <init>(boofcv.abst.feature.associate.AssociateDescription,boolean,boolean)>": 0.09956710474372901
        }, 
        {
            "<boofcv.alg.geo.calibration.Zhang99ParamAll: void <init>(boolean,int,boolean)>": 0.09956710474372901
        }
    ], 
    "<net.smert.jreactphysics3d.collision.shapes.CollisionShape: boolean equals(java.lang.Object)>": [
        {
            "<org.jbox2d.common.Vec2: boolean equals(java.lang.Object)>": 0.5093530383320725
        }, 
        {
            "<org.jbox2d.common.Vec3: boolean equals(java.lang.Object)>": 0.5076894351133142
        }, 
        {
            "<org.jbox2d.testbed.pooling.ColorKey: boolean equals(java.lang.Object)>": 0.5020815868904802
        }, 
        {
            "<com.flowpowered.react.math.Vector3: boolean equals(java.lang.Object)>": 0.4774450615354306
        }, 
        {
            "<com.flowpowered.react.math.Vector4: boolean equals(java.lang.Object)>": 0.4765315910225614
        }
    ], 
    "<net.smert.jreactphysics3d.constraint.BallAndSocketJoint: void solveVelocityConstraint(net.smert.jreactphysics3d.engine.ConstraintSolverData)>": [
        {
            "<Catalano.Imaging.Filters.Threshold: void applyInPlace(Catalano.Imaging.FastBitmap)>": 0.058262825618473166
        }, 
        {
            "<org.dyn4j.dynamics.ContactManagerTest: void clear()>": 0.055678898623312496
        }, 
        {
            "<net.imglib2.transform.integer.SlicingTransform: void set(net.imglib2.transform.integer.Slicing)>": 0.05459669113990952
        }, 
        {
            "<net.imglib2.transform.integer.MixedTransform: void set(net.imglib2.transform.integer.Mixed)>": 0.054008778441022746
        }, 
        {
            "<net.imglib2.view.TransformBuilder: void simplifyTransforms()>": 0.052467916944164576
        }
    ], 
    "<net.smert.jreactphysics3d.collision.broadphase.NoBroadPhaseAlgorithm: void removeObject(net.smert.jreactphysics3d.body.CollisionBody)>": [
        {
            "<com.flowpowered.react.collision.broadphase.NoBroadPhaseAlgorithm: void removeObject(com.flowpowered.react.body.CollisionBody)>": 0.3605998168498168
        }, 
        {
            "<com.flowpowered.react.engine.DynamicsWorld: void computeIslands()>": 0.3256274718221855
        }, 
        {
            "<net.imglib2.KDTree: boolean verifyDimensions(java.util.List,int)>": 0.3020429774376882
        }, 
        {
            "<com.flowpowered.react.engine.DynamicsWorld: void update()>": 0.2999388491827532
        }, 
        {
            "<boofcv.gui.binary.VisualizeBinaryData: java.awt.image.BufferedImage renderContours(java.util.List,int[],int,int,int,java.awt.image.BufferedImage)>": 0.29325434641745074
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Mathematics: float Sin(float)>": [
        {
            "<org.jbox2d.common.MathUtils: float sqrt(float)>": 1.0
        }, 
        {
            "<org.jbox2d.testbed.perf.MathPerf: void runFloorTest(float)>": 0.6680293976951683
        }, 
        {
            "<org.jbox2d.testbed.perf.MathPerf: void runCeilTest(float)>": 0.6680293976951683
        }, 
        {
            "<org.jbox2d.testbed.perf.MathPerf: void runSinTest(float)>": 0.6680293976951683
        }, 
        {
            "<boofcv.alg.interpolate.impl.NearestNeighborPixel_F32: float get_border(float,float)>": 0.5521154917877251
        }
    ], 
    "<net.smert.jreactphysics3d.engine.ContactSolver: void solve()>": [
        {
            "<org.jbox2d.collision.shapes.ChainShape: void computeAABB(org.jbox2d.collision.AABB,org.jbox2d.common.Transform,int)>": 0.15470836217605358
        }, 
        {
            "<org.jbox2d.dynamics.Island: void solve(org.jbox2d.dynamics.Profile,org.jbox2d.dynamics.TimeStep,org.jbox2d.common.Vec2,boolean)>": 0.15467822991472366
        }, 
        {
            "<org.jbox2d.particle.ParticleSystem: void raycast(org.jbox2d.callbacks.ParticleRaycastCallback,org.jbox2d.common.Vec2,org.jbox2d.common.Vec2)>": 0.15266743968204038
        }, 
        {
            "<org.jbox2d.particle.ParticleSystem: void solve(org.jbox2d.dynamics.TimeStep)>": 0.15099554025694936
        }, 
        {
            "<org.jbox2d.particle.ParticleSystem: void solveTensile(org.jbox2d.dynamics.TimeStep)>": 0.15044436244698625
        }
    ], 
    "<net.smert.jreactphysics3d.constraint.SliderJoint: void enableLimit(boolean)>": [
        {
            "<Catalano.Imaging.Filters.Mirror: void <init>(boolean,boolean)>": 0.23512003652927826
        }, 
        {
            "<boofcv.alg.feature.detect.extract.NonMaxBlock: void <init>(boolean,boolean)>": 0.23512003652927826
        }, 
        {
            "<boofcv.gui.calibration.CalibratedImageGridPanel: void setDisplay(boolean,boolean,boolean,boolean,boolean,double)>": 0.22865133265544454
        }, 
        {
            "<boofcv.demonstrations.calibration.SubpixelGridTargetDisplay: void setShow(boolean,boolean)>": 0.22806853641132135
        }, 
        {
            "<boofcv.gui.VideoProcessAppBase: void setPause(boolean)>": 0.22700567010160635
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Matrix3x3: void zero()>": [
        {
            "<boofcv.alg.feature.detect.intensity.impl.ImplHarrisCorner_F32: float computeIntensity()>": 0.24624958089995108
        }, 
        {
            "<boofcv.alg.feature.detect.intensity.impl.ImplHarrisCornerWeighted_F32: float computeResponse()>": 0.24624958089995108
        }, 
        {
            "<Catalano.Math.Vector4: float Square()>": 0.24624414556072793
        }, 
        {
            "<com.flowpowered.react.math.Vector4: float lengthSquare()>": 0.24624414556072793
        }, 
        {
            "<com.flowpowered.react.math.Quaternion: float lengthSquare()>": 0.24624414556072793
        }
    ], 
    "<net.smert.jreactphysics3d.engine.ConstraintSolver: void solveVelocityConstraints(net.smert.jreactphysics3d.engine.Island)>": [
        {
            "<net.imglib2.AbstractInterval: long min(int)>": 0.6114074075275067
        }, 
        {
            "<net.imglib2.AbstractInterval: long max(int)>": 0.6114074075275067
        }, 
        {
            "<net.imglib2.AbstractInterval: double realMax(int)>": 0.6023745223337694
        }, 
        {
            "<net.imglib2.AbstractInterval: double realMin(int)>": 0.6023745223337694
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void validate()>": 0.5924579023163371
        }
    ], 
    "<net.smert.jreactphysics3d.body.RigidBody: void applyTorque(net.smert.jreactphysics3d.mathematics.Vector3)>": [
        {
            "<org.dyn4j.dynamics.AABBBroadphaseFilter: boolean isAllowed(org.dyn4j.geometry.AABB,org.dyn4j.dynamics.Body,org.dyn4j.dynamics.BodyFixture)>": 0.11691043015725133
        }, 
        {
            "<boofcv.abst.sfm.d3.WrapVisOdomPixelDepthPnP: boolean isFault()>": 0.11653416485852638
        }, 
        {
            "<boofcv.abst.sfm.d3.VisOdomPixelDepthPnP_to_DepthVisualOdometry: boolean isFault()>": 0.11653416485852638
        }, 
        {
            "<boofcv.io.javacv.JavaCVVideoImageSequence: boolean hasNext()>": 0.11653416485852638
        }, 
        {
            "<org.dyn4j.dynamics.AABBBroadphaseFilter: boolean isAllowed(org.dyn4j.geometry.AABB,org.dyn4j.collision.Collidable,org.dyn4j.collision.Fixture)>": 0.11631196191736662
        }
    ], 
    "<net.smert.jreactphysics3d.collision.CollisionDetection: void removeBody(net.smert.jreactphysics3d.body.CollisionBody)>": [
        {
            "<org.dyn4j.sandbox.panels.LineGraphPanel: void setStaticSize(java.awt.Dimension)>": 0.0778498944161523
        }, 
        {
            "<org.jbox2d.testbed.tests.DrawingParticles: void step(org.jbox2d.testbed.framework.TestbedSettings)>": 0.07537783614444092
        }, 
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.0747080202248614
        }, 
        {
            "<boofcv.gui.feature.SelectRegionDescriptionPanel: void <init>()>": 0.07391404949863532
        }, 
        {
            "<boofcv.gui.d3.Polygon3DSequenceViewer: void <init>()>": 0.07317117587562046
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 identity()>": [
        {
            "<com.flowpowered.react.math.Quaternion: com.flowpowered.react.math.Matrix3x3 getMatrix()>": 0.24197573264101102
        }, 
        {
            "<Catalano.Imaging.Filters.UnsharpMasking: void setWeight(float)>": 0.24160430772118688
        }, 
        {
            "<org.jbox2d.common.Vec2: float normalize()>": 0.24096862529876867
        }, 
        {
            "<org.jbox2d.particle.ParticleSystem: void setParticleRadius(float)>": 0.24074930378451206
        }, 
        {
            "<boofcv.alg.tracker.meanshift.LocalWeightedHistogramRotRect: void squareToImageSample(float,float,boofcv.struct.RectangleRotate_F32)>": 0.24069514917512186
        }
    ], 
    "<net.smert.jreactphysics3d.collision.narrowphase.EPA.Utils: boolean link(net.smert.jreactphysics3d.collision.narrowphase.EPA.EdgeEPA,net.smert.jreactphysics3d.collision.narrowphase.EPA.EdgeEPA)>": [
        {
            "<boofcv.struct.image.ImageBase: boolean isInBounds(int,int)>": 0.35892959910813604
        }, 
        {
            "<boofcv.struct.flow.ImageFlow: boolean isInBounds(int,int)>": 0.35892959910813604
        }, 
        {
            "<boofcv.struct.feature.MatrixOfList: boolean isInBounds(int,int)>": 0.35892959910813604
        }, 
        {
            "<Catalano.Core.IntRange: boolean isInside(int)>": 0.3580115857158196
        }, 
        {
            "<boofcv.alg.shapes.polygon.BinaryPolygonDetector: boolean expectedNumberOfSides(org.ddogleg.struct.GrowQueue_I32)>": 0.34884597182871546
        }
    ], 
    "<net.smert.jreactphysics3d.collision.CollisionDetection: void addBody(net.smert.jreactphysics3d.body.CollisionBody)>": [
        {
            "<org.dyn4j.sandbox.panels.LineGraphPanel: void setStaticSize(java.awt.Dimension)>": 0.06666666666666665
        }, 
        {
            "<org.jbox2d.testbed.tests.DrawingParticles: void step(org.jbox2d.testbed.framework.TestbedSettings)>": 0.06454972243679029
        }, 
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.06397612635199752
        }, 
        {
            "<boofcv.gui.feature.SelectRegionDescriptionPanel: void <init>()>": 0.06329621044272916
        }, 
        {
            "<boofcv.gui.d3.Polygon3DSequenceViewer: void <init>()>": 0.06266005147845038
        }
    ], 
    "<net.smert.jreactphysics3d.engine.DynamicsWorld: void notifyAddedOverlappingPair(net.smert.jreactphysics3d.collision.BroadPhasePair)>": [
        {
            "<net.imglib2.AbstractInterval: long min(int)>": 0.5011290371805028
        }, 
        {
            "<net.imglib2.AbstractInterval: long max(int)>": 0.5011290371805028
        }, 
        {
            "<org.dyn4j.collision.broadphase.DynamicAABBTree: void validate(org.dyn4j.collision.broadphase.DynamicAABBTreeNode)>": 0.49634515148511693
        }, 
        {
            "<net.imglib2.AbstractInterval: double realMax(int)>": 0.493315380390315
        }, 
        {
            "<net.imglib2.AbstractInterval: double realMin(int)>": 0.493315380390315
        }
    ], 
    "<net.smert.jreactphysics3d.engine.Material: boolean equals(java.lang.Object)>": [
        {
            "<org.jbox2d.testbed.pooling.ColorKey: boolean equals(java.lang.Object)>": 0.627775583615641
        }, 
        {
            "<org.jbox2d.common.Vec3: boolean equals(java.lang.Object)>": 0.6253331968555766
        }, 
        {
            "<com.flowpowered.react.math.Quaternion: boolean equals(java.lang.Object)>": 0.6123668016056402
        }, 
        {
            "<com.flowpowered.react.math.Vector4: boolean equals(java.lang.Object)>": 0.6119383946334497
        }, 
        {
            "<org.jbox2d.common.Vec2: boolean equals(java.lang.Object)>": 0.6108701446421627
        }
    ], 
    "<net.smert.jreactphysics3d.collision.shapes.SphereShape: void computeLocalInertiaTensor(net.smert.jreactphysics3d.mathematics.Matrix3x3,float)>": [
        {
            "<com.flowpowered.react.collision.shape.SphereShape: void computeLocalInertiaTensor(com.flowpowered.react.math.Matrix3x3,float)>": 0.4948413545450417
        }, 
        {
            "<org.jbox2d.common.MathUtils: float clamp(float,float,float)>": 0.4413651258350031
        }, 
        {
            "<org.jbox2d.dynamics.contacts.Contact: float mixFriction(float,float)>": 0.4396547419939857
        }, 
        {
            "<org.jbox2d.common.Settings: float mixFriction(float,float)>": 0.4396547419939857
        }, 
        {
            "<org.jbox2d.testbed.perf.MathPerf: void runSinLUTTest(float)>": 0.4155800747648781
        }
    ], 
    "<net.smert.jreactphysics3d.collision.shapes.CylinderShape: void <init>(net.smert.jreactphysics3d.collision.shapes.CylinderShape)>": [
        {
            "<org.jbox2d.common.Vec2: void absLocal()>": 0.3238221377459168
        }, 
        {
            "<com.flowpowered.react.math.Vector4: com.flowpowered.react.math.Vector4 negate()>": 0.32169234601105995
        }, 
        {
            "<com.flowpowered.react.math.Quaternion: void <init>(float,com.flowpowered.react.math.Vector3)>": 0.31874502853311304
        }, 
        {
            "<com.flowpowered.react.math.Vector3: com.flowpowered.react.math.Vector3 negate()>": 0.31870301235341136
        }, 
        {
            "<org.jbox2d.testbed.perf.MathPerf: void runSinLUTTest(float)>": 0.3164214267019176
        }
    ], 
    "<net.smert.jreactphysics3d.constraint.ContactPoint: void setFrictionVector1(net.smert.jreactphysics3d.mathematics.Vector3)>": [
        {
            "<boofcv.gui.MousePauseHelper: void <init>(javax.swing.JPanel)>": 0.06188422143604215
        }, 
        {
            "<boofcv.gui.feature.SelectRegionDescriptionPanel: void <init>()>": 0.060048057676907685
        }, 
        {
            "<Catalano.Imaging.Filters.CosineTransform: void <init>()>": 0.057863756235784464
        }, 
        {
            "<Catalano.Imaging.Concurrent.Filters.SobelEdgeDetector: void <init>()>": 0.057863756235784464
        }, 
        {
            "<Catalano.Imaging.Filters.HorizontalRunLengthSmoothing: void <init>()>": 0.057863756235784464
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Vector3: int getMinAxis()>": [
        {
            "<Catalano.Math.Vector3: int getMinIndex()>": 0.5851579605880514
        }, 
        {
            "<Catalano.Math.Vector3: int getMaxIndex()>": 0.5851579605880514
        }, 
        {
            "<com.flowpowered.react.math.Vector3: int getMinAxis()>": 0.5851579605880514
        }, 
        {
            "<com.flowpowered.react.math.Vector3: int getMaxAxis()>": 0.5288223330847253
        }, 
        {
            "<com.flowpowered.react.math.Vector2: int getMinAxis()>": 0.48445336197710626
        }
    ], 
    "<net.smert.jreactphysics3d.collision.shapes.ConvexMeshShape: void <init>(float)>": [
        {
            "<org.dyn4j.sandbox.persist.XmlReader: void <init>()>": 0.26388716253378897
        }, 
        {
            "<com.flowpowered.react.engine.CollisionWorld: void <init>()>": 0.2269524070224266
        }, 
        {
            "<boofcv.gui.feature.FancyInterestPointRender: void <init>()>": 0.2260609725796388
        }, 
        {
            "<boofcv.alg.filter.binary.Contour: void <init>()>": 0.22573872719189259
        }, 
        {
            "<boofcv.demonstrations.calibration.ParseStereoCalibrationConfig: void <init>()>": 0.22573872719189259
        }
    ], 
    "<net.smert.jreactphysics3d.collision.narrowphase.EPA.TriangleEPA: boolean isClosestPointInternalToTriangle()>": [
        {
            "<com.flowpowered.react.collision.narrowphase.EPA.TriangleEPA: boolean isClosestPointInternalToTriangle()>": 0.6036229395604396
        }, 
        {
            "<Catalano.Core.FloatRange: boolean IsOverlapping(Catalano.Core.FloatRange)>": 0.49511829796732376
        }, 
        {
            "<com.flowpowered.react.math.Mathematics: boolean approxEquals(float,float,float)>": 0.47760321143579343
        }, 
        {
            "<Catalano.Core.FloatRange: boolean isInside(float)>": 0.4709173404976543
        }, 
        {
            "<Catalano.Math.Geometry.Line: boolean isHorizontal()>": 0.4669177083297892
        }
    ], 
    "<net.smert.jreactphysics3d.engine.Profiler: float GetElapsedTimeSinceStart()>": [
        {
            "<org.jbox2d.common.MathUtils: float clamp(float,float,float)>": 0.6646494293534416
        }, 
        {
            "<org.jbox2d.dynamics.contacts.Contact: float mixFriction(float,float)>": 0.6508591583133982
        }, 
        {
            "<org.jbox2d.common.Settings: float mixFriction(float,float)>": 0.6508591583133982
        }, 
        {
            "<org.jbox2d.common.MathUtils: float map(float,float,float,float,float)>": 0.6062131041920892
        }, 
        {
            "<boofcv.alg.color.ColorRgb: float rgbToGray_Weighted(float,float,float)>": 0.5667315474453164
        }
    ], 
    "<net.smert.jreactphysics3d.collision.shapes.AABB: void setMin(net.smert.jreactphysics3d.mathematics.Vector3)>": [
        {
            "<Catalano.Imaging.Filters.GaussianBlur: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Concurrent.Filters.BradleyLocalThreshold: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.CosineTransform: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.BradleyLocalThreshold: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.UnsharpMasking: void <init>()>": 0.018184824186332698
        }
    ], 
    "<net.smert.jreactphysics3d.constraint.FixedJoint: void solveVelocityConstraint(net.smert.jreactphysics3d.engine.ConstraintSolverData)>": [
        {
            "<net.imglib2.view.TransformBuilder: void simplifyTransforms()>": 0.05578718502074928
        }, 
        {
            "<org.dyn4j.sandbox.Sandbox: void renderBody(com.jogamp.opengl.GL2,org.dyn4j.sandbox.SandboxBody)>": 0.05492871319234385
        }, 
        {
            "<net.imglib2.view.TransformBuilder: void <init>(net.imglib2.Interval,net.imglib2.RandomAccessible)>": 0.05386530075826784
        }, 
        {
            "<boofcv.factory.feature.detect.extract.FactoryFeatureExtractor: boofcv.abst.feature.detect.extract.NonMaxSuppression nonmax(boofcv.abst.feature.detect.extract.ConfigExtract)>": 0.05375027969300357
        }, 
        {
            "<Catalano.Imaging.Filters.Threshold: void applyInPlace(Catalano.Imaging.FastBitmap)>": 0.05297510343655539
        }
    ], 
    "<net.smert.jreactphysics3d.collision.shapes.CollisionShape: void <init>(net.smert.jreactphysics3d.collision.shapes.CollisionShapeType,float)>": [
        {
            "<org.jbox2d.dynamics.joints.FrictionJoint: void setMaxTorque(float)>": 0.5866719350205116
        }, 
        {
            "<org.jbox2d.dynamics.joints.MotorJoint: void setMaxForce(float)>": 0.5866719350205116
        }, 
        {
            "<org.jbox2d.dynamics.joints.FrictionJoint: void setMaxForce(float)>": 0.5866719350205116
        }, 
        {
            "<org.jbox2d.dynamics.joints.MotorJoint: void setMaxTorque(float)>": 0.5866719350205116
        }, 
        {
            "<org.jbox2d.dynamics.Fixture: void setDensity(float)>": 0.5866719350205116
        }
    ], 
    "<net.smert.jreactphysics3d.engine.ProfileNodeIterator: java.lang.String getCurrentName()>": [
        {
            "<org.dyn4j.sandbox.resources.Messages: java.lang.String getString(java.lang.String)>": 0.3100041420236116
        }, 
        {
            "<net.coobird.thumbnailator.name.Rename$2: java.lang.String apply(java.lang.String,net.coobird.thumbnailator.ThumbnailParameter)>": 0.2942866099069123
        }, 
        {
            "<net.coobird.thumbnailator.name.Rename$3: java.lang.String apply(java.lang.String,net.coobird.thumbnailator.ThumbnailParameter)>": 0.2942866099069123
        }, 
        {
            "<net.coobird.thumbnailator.name.Rename$5: java.lang.String apply(java.lang.String,net.coobird.thumbnailator.ThumbnailParameter)>": 0.2942866099069123
        }, 
        {
            "<net.coobird.thumbnailator.name.Rename$4: java.lang.String apply(java.lang.String,net.coobird.thumbnailator.ThumbnailParameter)>": 0.2942866099069123
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 inverse()>": [
        {
            "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 multiply(com.flowpowered.react.math.Matrix4x4,com.flowpowered.react.math.Matrix4x4)>": 0.5562724855615393
        }, 
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.5457796282788852
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.5448184574850725
        }, 
        {
            "<org.jbox2d.dynamics.contacts.PositionSolverManifold: void initialize(org.jbox2d.dynamics.contacts.ContactPositionConstraint,org.jbox2d.common.Transform,org.jbox2d.common.Transform,int)>": 0.5431254816563265
        }, 
        {
            "<org.jbox2d.common.Vec2: float length()>": 0.5333484014636514
        }
    ], 
    "<net.smert.jreactphysics3d.collision.narrowphase.SphereVsSphereAlgorithm: boolean testCollision(net.smert.jreactphysics3d.collision.shapes.CollisionShape,net.smert.jreactphysics3d.mathematics.Transform,net.smert.jreactphysics3d.collision.shapes.CollisionShape,net.smert.jreactphysics3d.mathematics.Transform,net.smert.jreactphysics3d.constraint.ContactPointInfo)>": [
        {
            "<com.flowpowered.react.math.Quaternion: com.flowpowered.react.math.Quaternion getInverse()>": 0.16416878980607114
        }, 
        {
            "<com.flowpowered.react.math.Quaternion: com.flowpowered.react.math.Matrix3x3 getMatrix()>": 0.16321503518394748
        }, 
        {
            "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 add(com.flowpowered.react.math.Matrix4x4,com.flowpowered.react.math.Matrix4x4)>": 0.16196042755843304
        }, 
        {
            "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 subtract(com.flowpowered.react.math.Matrix4x4,com.flowpowered.react.math.Matrix4x4)>": 0.16196042755843304
        }, 
        {
            "<com.flowpowered.react.math.Matrix3x3: com.flowpowered.react.math.Matrix3x3 add(com.flowpowered.react.math.Matrix3x3,com.flowpowered.react.math.Matrix3x3)>": 0.1592749937389479
        }
    ], 
    "<net.smert.jreactphysics3d.engine.CollisionWorld: void destroyCollisionBody(net.smert.jreactphysics3d.body.CollisionBody)>": [
        {
            "<org.box2d.proto.Box2D$PbJoint$Builder: org.box2d.proto.Box2D$PbJoint$Builder addBodies(int)>": 0.25739012549168505
        }, 
        {
            "<org.box2d.proto.Box2D$PbJoint$Builder: org.box2d.proto.Box2D$PbJoint$Builder addJoints(int)>": 0.25739012549168505
        }, 
        {
            "<boofcv.gui.feature.ScaleSpacePointPanel: void setPoints(java.util.List)>": 0.17536123845258245
        }, 
        {
            "<boofcv.gui.feature.ScaleSpacePyramidPointPanel: void setPoints(java.util.List)>": 0.17360781909658846
        }, 
        {
            "<org.imgscalr.Scalr: java.awt.image.BufferedImage scaleImageIncrementally(java.awt.image.BufferedImage,int,int,org.imgscalr.Scalr$Method,java.lang.Object)>": 0.17245514446585825
        }
    ], 
    "<net.smert.jreactphysics3d.constraint.SliderJoint: void resetLimits()>": [
        {
            "<com.flowpowered.react.constraint.SliderJoint: void setMinTranslationLimit(float)>": 0.13364772704661354
        }, 
        {
            "<com.flowpowered.react.constraint.SliderJoint: void setMaxTranslationLimit(float)>": 0.13364772704661354
        }, 
        {
            "<org.jbox2d.common.Color3f: void <init>()>": 0.1310356045902398
        }, 
        {
            "<org.jbox2d.common.Vec3: void <init>()>": 0.1310356045902398
        }, 
        {
            "<net.imglib2.type.numeric.complex.AbstractComplexType: void setComplexNumber(float,float)>": 0.1309462316541243
        }
    ], 
    "<net.smert.jreactphysics3d.constraint.ContactPointInfo: void setCollisionData(net.smert.jreactphysics3d.mathematics.Vector3,float,net.smert.jreactphysics3d.mathematics.Vector3,net.smert.jreactphysics3d.mathematics.Vector3)>": [
        {
            "<org.jbox2d.common.MathUtils: float clamp(float,float,float)>": 0.10887082692243623
        }, 
        {
            "<org.jbox2d.dynamics.contacts.Contact: float mixFriction(float,float)>": 0.10801483289062855
        }, 
        {
            "<org.jbox2d.common.Settings: float mixFriction(float,float)>": 0.10801483289062855
        }, 
        {
            "<boofcv.alg.color.ColorRgb: float rgbToGray_Weighted(float,float,float)>": 0.10524390547782403
        }, 
        {
            "<Catalano.Math.Matrix3x3: void <init>(float,float,float,float,float,float,float,float,float)>": 0.10440264304029954
        }
    ], 
    "<net.smert.jreactphysics3d.collision.broadphase.PairManager: net.smert.jreactphysics3d.collision.broadphase.BodyPair findPair(int,int)>": [
        {
            "<com.flowpowered.react.collision.broadphase.PairManager: int computeHashBodies(int,int)>": 0.6251298010963654
        }, 
        {
            "<com.flowpowered.react.collision.broadphase.PairManager: com.flowpowered.react.collision.broadphase.PairManager$BodyPair findPair(int,int)>": 0.6001247354847153
        }, 
        {
            "<com.flowpowered.react.collision.broadphase.PairManager: com.flowpowered.react.collision.broadphase.PairManager$BodyPair addPair(com.flowpowered.react.body.CollisionBody,com.flowpowered.react.body.CollisionBody)>": 0.5692718464550935
        }, 
        {
            "<com.flowpowered.react.collision.broadphase.PairManager: int computeHash32Bits(int)>": 0.5573927777847023
        }, 
        {
            "<com.flowpowered.react.collision.broadphase.PairManager: void reallocatePairs()>": 0.5426236228161085
        }
    ], 
    "<net.smert.jreactphysics3d.engine.ProfileNodeIterator: boolean isEnd()>": [
        {
            "<boofcv.abst.sfm.d3.WrapVisOdomPixelDepthPnP: boolean isFault()>": 0.6312032571666298
        }, 
        {
            "<boofcv.abst.sfm.d3.VisOdomPixelDepthPnP_to_DepthVisualOdometry: boolean isFault()>": 0.6312032571666298
        }, 
        {
            "<boofcv.io.javacv.JavaCVVideoImageSequence: boolean hasNext()>": 0.6312032571666298
        }, 
        {
            "<net.coobird.thumbnailator.util.exif.IfdStructure: boolean isOffset()>": 0.609509295431853
        }, 
        {
            "<Catalano.Core.Structs.DoubleArrayList: boolean isEmpty()>": 0.5931372549019608
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Quaternion: net.smert.jreactphysics3d.mathematics.Quaternion multiply(float)>": [
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.43874493646245855
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.43775489116415234
        }, 
        {
            "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 multiply(com.flowpowered.react.math.Matrix4x4,com.flowpowered.react.math.Matrix4x4)>": 0.431800237922924
        }, 
        {
            "<org.jbox2d.dynamics.contacts.ContactSolver: void solveVelocityConstraints()>": 0.43177773938723985
        }, 
        {
            "<com.flowpowered.react.collision.shape.CapsuleShape: void computeLocalInertiaTensor(com.flowpowered.react.math.Matrix3x3,float)>": 0.43132662854827286
        }
    ], 
    "<net.smert.jreactphysics3d.collision.broadphase.SweepAndPruneAlgorithm: void addObject(net.smert.jreactphysics3d.body.CollisionBody,net.smert.jreactphysics3d.collision.shapes.AABB)>": [
        {
            "<org.jbox2d.collision.broadphase.DynamicTreeFlatNodes: void validateStructure(int)>": 0.5976311959623917
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTreeFlatNodes: void validate()>": 0.5861636645254621
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void validateMetrics(org.jbox2d.collision.broadphase.DynamicTreeNode)>": 0.5716830943718701
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void validate()>": 0.5637568653784143
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTreeFlatNodes: void validateMetrics(int)>": 0.5626106815924118
        }
    ], 
    "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: void addPoint(net.smert.jreactphysics3d.mathematics.Vector3,net.smert.jreactphysics3d.mathematics.Vector3,net.smert.jreactphysics3d.mathematics.Vector3)>": [
        {
            "<com.flowpowered.react.collision.narrowphase.GJK.Simplex: void computeDeterminants()>": 0.5799451202989994
        }, 
        {
            "<com.flowpowered.react.collision.narrowphase.GJK.Simplex: void addPoint(com.flowpowered.react.math.Vector3,com.flowpowered.react.math.Vector3,com.flowpowered.react.math.Vector3)>": 0.567510649799772
        }, 
        {
            "<Catalano.Imaging.Filters.ImagePyramids: void Downscale(Catalano.Imaging.FastBitmap)>": 0.4013493170123288
        }, 
        {
            "<com.flowpowered.react.collision.narrowphase.GJK.Simplex: boolean computeClosestPoint(com.flowpowered.react.math.Vector3)>": 0.38981059220174735
        }, 
        {
            "<Catalano.Imaging.Corners.HarrisCornersDetector: java.util.List ProcessImage(Catalano.Imaging.FastBitmap)>": 0.38443340381471924
        }
    ], 
    "<net.smert.jreactphysics3d.engine.OverlappingPair: void addContact(net.smert.jreactphysics3d.constraint.ContactPoint)>": [
        {
            "<org.dyn4j.sandbox.panels.LineGraphPanel: void setStaticSize(java.awt.Dimension)>": 0.0778498944161523
        }, 
        {
            "<org.jbox2d.testbed.tests.DrawingParticles: void step(org.jbox2d.testbed.framework.TestbedSettings)>": 0.07537783614444092
        }, 
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.0747080202248614
        }, 
        {
            "<boofcv.gui.feature.SelectRegionDescriptionPanel: void <init>()>": 0.07391404949863532
        }, 
        {
            "<boofcv.gui.d3.Polygon3DSequenceViewer: void <init>()>": 0.07317117587562046
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Transform: net.smert.jreactphysics3d.mathematics.Transform setOrientation(net.smert.jreactphysics3d.mathematics.Quaternion)>": [
        {
            "<Catalano.Imaging.Filters.GaussianBlur: void <init>()>": 0.017251638983558856
        }, 
        {
            "<Catalano.Imaging.Concurrent.Filters.BradleyLocalThreshold: void <init>()>": 0.017251638983558856
        }, 
        {
            "<Catalano.Imaging.Filters.CosineTransform: void <init>()>": 0.017251638983558856
        }, 
        {
            "<Catalano.Imaging.Filters.BradleyLocalThreshold: void <init>()>": 0.017251638983558856
        }, 
        {
            "<Catalano.Imaging.Filters.UnsharpMasking: void <init>()>": 0.017251638983558856
        }
    ], 
    "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: int getSimplex(net.smert.jreactphysics3d.mathematics.Vector3[],net.smert.jreactphysics3d.mathematics.Vector3[],net.smert.jreactphysics3d.mathematics.Vector3[])>": [
        {
            "<Catalano.Imaging.Texture.BinaryPattern.UniformLocalBinaryPattern: boolean isUniform(int)>": 0.3076205348085519
        }, 
        {
            "<com.flowpowered.react.collision.narrowphase.GJK.Simplex: boolean overlap(int,int)>": 0.29009864939114804
        }, 
        {
            "<com.flowpowered.react.collision.narrowphase.GJK.Simplex: boolean isSubset(int,int)>": 0.29009864939114804
        }, 
        {
            "<net.coobird.thumbnailator.util.exif.IfdStructure: boolean isOffset()>": 0.28778498188513857
        }, 
        {
            "<net.coobird.thumbnailator.util.exif.IfdStructure: boolean isValue()>": 0.2771768131891613
        }
    ], 
    "<net.smert.jreactphysics3d.collision.narrowphase.EPA.EPAAlgorithm: void addFaceCandidate(net.smert.jreactphysics3d.collision.narrowphase.EPA.TriangleEPA,java.util.Queue,int[],float)>": [
        {
            "<com.flowpowered.react.collision.narrowphase.EPA.EPAAlgorithm: int addFaceCandidate(com.flowpowered.react.collision.narrowphase.EPA.TriangleEPA,java.util.Queue,int,float)>": 0.4276515775737878
        }, 
        {
            "<boofcv.alg.weights.WeightDistanceUniform_F32: float weight(float)>": 0.31874259204589145
        }, 
        {
            "<boofcv.alg.filter.kernel.KernelMath: boolean isEquals(float[],float[],int,float)>": 0.3099786579284417
        }, 
        {
            "<boofcv.alg.filter.kernel.KernelMath: float minAbs(float[],int,float)>": 0.30234717576809295
        }, 
        {
            "<Catalano.Math.Vector4: boolean equals(java.lang.Object)>": 0.30206987449474304
        }
    ], 
    "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: boolean isProperSubset(int)>": [
        {
            "<Catalano.Imaging.Texture.BinaryPattern.UniformLocalBinaryPattern: boolean isUniform(int)>": 0.614555751103933
        }, 
        {
            "<com.flowpowered.react.collision.narrowphase.GJK.Simplex: boolean overlap(int,int)>": 0.5772291916400438
        }, 
        {
            "<com.flowpowered.react.collision.narrowphase.GJK.Simplex: boolean isSubset(int,int)>": 0.5772291916400438
        }, 
        {
            "<net.coobird.thumbnailator.util.exif.IfdStructure: boolean isOffset()>": 0.5403882816742503
        }, 
        {
            "<com.flowpowered.react.collision.narrowphase.GJK.Simplex: boolean isProperSubset(int)>": 0.5051848611551637
        }
    ], 
    "<net.smert.jreactphysics3d.collision.narrowphase.EPA.TriangleEPA: net.smert.jreactphysics3d.mathematics.Vector3 computeClosestPointOfObject(net.smert.jreactphysics3d.mathematics.Vector3[])>": [
        {
            "<Catalano.Math.Dissimilarities.Dissimilarity: double Yule(int[],int[])>": 0.21783940846333136
        }, 
        {
            "<Catalano.Math.Dissimilarities.Dissimilarity: double SokalMichener(int[],int[])>": 0.21744448738491018
        }, 
        {
            "<Catalano.Math.Dissimilarities.Dissimilarity: double RogersTanimoto(int[],int[])>": 0.21744448738491018
        }, 
        {
            "<Catalano.Math.Dissimilarities.Dissimilarity: double Jaccard(int[],int[])>": 0.21457945527766736
        }, 
        {
            "<Catalano.Imaging.Filters.HueModifier: void applyInPlace(Catalano.Imaging.FastBitmap)>": 0.21306097977465163
        }
    ], 
    "<net.smert.jreactphysics3d.engine.Timer: void <init>(double)>": [
        {
            "<org.dyn4j.collision.broadphase.DynamicAABBTree: void validate(org.dyn4j.collision.broadphase.DynamicAABBTreeNode)>": 0.4502661500246349
        }, 
        {
            "<net.imglib2.transform.integer.SlicingTransform: boolean getComponentZero(int)>": 0.4360238079043937
        }, 
        {
            "<net.imglib2.transform.integer.MixedTransform: boolean getComponentZero(int)>": 0.4360238079043937
        }, 
        {
            "<net.imglib2.transform.integer.MixedTransform: boolean getComponentInversion(int)>": 0.4360238079043937
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void validateStructure(org.jbox2d.collision.broadphase.DynamicTreeNode)>": 0.42457724081459436
        }
    ], 
    "<net.smert.jreactphysics3d.engine.OverlappingPair: void <init>(net.smert.jreactphysics3d.body.CollisionBody,net.smert.jreactphysics3d.body.CollisionBody)>": [
        {
            "<org.dyn4j.sandbox.Sandbox: void init(com.jogamp.opengl.GLAutoDrawable)>": 0.09412949973325982
        }, 
        {
            "<org.dyn4j.examples.ExampleJOGL: void init(com.jogamp.opengl.GLAutoDrawable)>": 0.09265985107372357
        }, 
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.09149826462221809
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.TestbedMain: void main(java.lang.String[])>": 0.08469895538599198
        }, 
        {
            "<boofcv.gui.d3.Polygon3DSequenceViewer: void <init>()>": 0.08108116311237161
        }
    ], 
    "<net.smert.jreactphysics3d.collision.broadphase.SweepAndPruneAlgorithm: void <init>(net.smert.jreactphysics3d.collision.CollisionDetection)>": [
        {
            "<net.imglib2.PointSampleList: void <init>(int)>": 0.25874683642404495
        }, 
        {
            "<org.dyn4j.sandbox.persist.XmlReader: void <init>()>": 0.2304740171825468
        }, 
        {
            "<net.coobird.thumbnailator.makers.ThumbnailMaker$ReadinessTracker: void <init>()>": 0.22643096739236954
        }, 
        {
            "<boofcv.io.jcodec.JCodecMediaManager: void <init>()>": 0.22643096739236954
        }, 
        {
            "<org.dyn4j.sandbox.input.Keyboard: void <init>()>": 0.22643096739236954
        }
    ], 
    "<net.smert.jreactphysics3d.collision.narrowphase.EPA.TrianglesStore: net.smert.jreactphysics3d.collision.narrowphase.EPA.TriangleEPA get(int)>": [
        {
            "<net.imglib2.transform.integer.SlicingTransform: boolean getComponentZero(int)>": 0.5644752608158081
        }, 
        {
            "<net.imglib2.transform.integer.MixedTransform: boolean getComponentZero(int)>": 0.5644752608158081
        }, 
        {
            "<net.imglib2.transform.integer.MixedTransform: boolean getComponentInversion(int)>": 0.5644752608158081
        }, 
        {
            "<net.imglib2.transform.integer.ComponentMappingTransform: int getComponentMapping(int)>": 0.5565164466398795
        }, 
        {
            "<net.imglib2.transform.integer.SlicingTransform: int getComponentMapping(int)>": 0.5565164466398795
        }
    ], 
    "<net.smert.jreactphysics3d.collision.CollisionDetection: void broadPhaseNotifyRemovedOverlappingPair(net.smert.jreactphysics3d.collision.broadphase.BodyPair)>": [
        {
            "<org.dyn4j.collision.broadphase.DynamicAABBTree: void validate(org.dyn4j.collision.broadphase.DynamicAABBTreeNode)>": 0.3542695608804409
        }, 
        {
            "<net.imglib2.transform.integer.SlicingTransform: boolean getComponentZero(int)>": 0.3400962106052506
        }, 
        {
            "<net.imglib2.transform.integer.MixedTransform: boolean getComponentZero(int)>": 0.3400962106052506
        }, 
        {
            "<net.imglib2.transform.integer.MixedTransform: boolean getComponentInversion(int)>": 0.3400962106052506
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void validateStructure(org.jbox2d.collision.broadphase.DynamicTreeNode)>": 0.3399448978267677
        }
    ], 
    "<net.smert.jreactphysics3d.constraint.BallAndSocketJoint: void initBeforeSolve(net.smert.jreactphysics3d.engine.ConstraintSolverData)>": [
        {
            "<net.imglib2.view.TransformBuilder: void <init>(net.imglib2.Interval,net.imglib2.RandomAccessible)>": 0.1023460682896806
        }, 
        {
            "<boofcv.factory.feature.detect.extract.FactoryFeatureExtractor: boofcv.abst.feature.detect.extract.NonMaxSuppression nonmax(boofcv.abst.feature.detect.extract.ConfigExtract)>": 0.101154189861987
        }, 
        {
            "<net.imglib2.view.TransformBuilder: void simplifyTransforms()>": 0.0990039663679234
        }, 
        {
            "<org.jbox2d.dynamics.World: void step(float,int,int)>": 0.09890990889060942
        }, 
        {
            "<org.dyn4j.sandbox.Sandbox: void renderBody(com.jogamp.opengl.GL2,org.dyn4j.sandbox.SandboxBody)>": 0.09859238558003344
        }
    ], 
    "<net.smert.jreactphysics3d.constraint.HingeJointInfo: void <init>(net.smert.jreactphysics3d.body.RigidBody,net.smert.jreactphysics3d.body.RigidBody,net.smert.jreactphysics3d.mathematics.Vector3,net.smert.jreactphysics3d.mathematics.Vector3,float,float)>": [
        {
            "<org.jbox2d.common.MathUtils: float clamp(float,float,float)>": 0.3140826236378521
        }, 
        {
            "<org.jbox2d.dynamics.contacts.Contact: float mixFriction(float,float)>": 0.312278622418633
        }, 
        {
            "<org.jbox2d.common.Settings: float mixFriction(float,float)>": 0.312278622418633
        }, 
        {
            "<boofcv.alg.color.ColorRgb: float rgbToGray_Weighted(float,float,float)>": 0.30401202356422163
        }, 
        {
            "<Catalano.Math.Matrix3x3: void <init>(float,float,float,float,float,float,float,float,float)>": 0.303580137660626
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Quaternion: net.smert.jreactphysics3d.mathematics.Quaternion set(net.smert.jreactphysics3d.mathematics.Quaternion)>": [
        {
            "<org.jbox2d.common.Vec2: void absLocal()>": 0.374452412208903
        }, 
        {
            "<com.flowpowered.react.math.Vector4: com.flowpowered.react.math.Vector4 negate()>": 0.3737571131043752
        }, 
        {
            "<com.flowpowered.react.math.Vector3: com.flowpowered.react.math.Vector3 negate()>": 0.36973266839555174
        }, 
        {
            "<com.flowpowered.react.math.Quaternion: void <init>(float,com.flowpowered.react.math.Vector3)>": 0.3678165696497011
        }, 
        {
            "<org.jbox2d.testbed.perf.MathPerf: void runSinLUTTest(float)>": 0.36521021397126996
        }
    ], 
    "<net.smert.jreactphysics3d.engine.ContactManifoldSolver: void <init>()>": [
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.09282632048482294
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.TestbedMain: void main(java.lang.String[])>": 0.08592832235509576
        }, 
        {
            "<org.dyn4j.sandbox.Sandbox: void init(com.jogamp.opengl.GLAutoDrawable)>": 0.08530618505879436
        }, 
        {
            "<boofcv.demonstrations.transform.pyramid.EdgeIntensitiesApp: void main(java.lang.String[])>": 0.08208798329594226
        }, 
        {
            "<boofcv.demonstrations.tracker.CirculantVisualizationPanel: void <init>(boofcv.demonstrations.tracker.CirculantVisualizationPanel$Listener)>": 0.08040659862597266
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Quaternion: java.lang.String toString()>": [
        {
            "<com.flowpowered.react.math.Vector2: java.lang.String toString()>": 0.5636663916940713
        }, 
        {
            "<org.jbox2d.common.Rot: java.lang.String toString()>": 0.5636663916940713
        }, 
        {
            "<org.jbox2d.common.Vec2: java.lang.String toString()>": 0.5636663916940713
        }, 
        {
            "<com.flowpowered.react.math.Vector3: java.lang.String toString()>": 0.5570418606516957
        }, 
        {
            "<org.jbox2d.common.Vec3: java.lang.String toString()>": 0.5570418606516957
        }
    ], 
    "<net.smert.jreactphysics3d.collision.broadphase.PairManager: net.smert.jreactphysics3d.collision.broadphase.BodyPair addPair(net.smert.jreactphysics3d.body.CollisionBody,net.smert.jreactphysics3d.body.CollisionBody)>": [
        {
            "<com.flowpowered.react.collision.broadphase.PairManager: com.flowpowered.react.collision.broadphase.PairManager$BodyPair addPair(com.flowpowered.react.body.CollisionBody,com.flowpowered.react.body.CollisionBody)>": 0.6254284876026287
        }, 
        {
            "<com.flowpowered.react.collision.broadphase.PairManager: int computeHashBodies(int,int)>": 0.6102491501116979
        }, 
        {
            "<com.flowpowered.react.collision.broadphase.PairManager: void reallocatePairs()>": 0.5762056470540231
        }, 
        {
            "<com.flowpowered.react.collision.broadphase.PairManager: com.flowpowered.react.collision.broadphase.PairManager$BodyPair findPair(int,int)>": 0.5622389266580019
        }, 
        {
            "<com.flowpowered.react.collision.broadphase.PairManager: int computeHash32Bits(int)>": 0.5276601077417512
        }
    ], 
    "<net.smert.jreactphysics3d.collision.shapes.CapsuleShape: boolean isEqualTo(net.smert.jreactphysics3d.collision.shapes.CollisionShape)>": [
        {
            "<com.flowpowered.react.collision.shape.CylinderShape: boolean isEqualTo(com.flowpowered.react.collision.shape.CollisionShape)>": 0.5034313725490196
        }, 
        {
            "<com.flowpowered.react.collision.shape.ConeShape: boolean isEqualTo(com.flowpowered.react.collision.shape.CollisionShape)>": 0.5034313725490196
        }, 
        {
            "<com.flowpowered.react.collision.shape.CapsuleShape: boolean isEqualTo(com.flowpowered.react.collision.shape.CollisionShape)>": 0.5034313725490196
        }, 
        {
            "<Catalano.Core.FloatRange: boolean IsOverlapping(Catalano.Core.FloatRange)>": 0.4935671393399216
        }, 
        {
            "<Catalano.Core.FloatRange: boolean isInside(float)>": 0.48314364433359824
        }
    ], 
    "<net.smert.jreactphysics3d.collision.shapes.SphereShape: net.smert.jreactphysics3d.mathematics.Vector3 getLocalSupportPointWithMargin(net.smert.jreactphysics3d.mathematics.Vector3,net.smert.jreactphysics3d.mathematics.Vector3)>": [
        {
            "<Catalano.Math.Vector3: float getMin()>": 0.13105601415207072
        }, 
        {
            "<Catalano.Math.Vector3: float getMax()>": 0.13105601415207072
        }, 
        {
            "<boofcv.alg.distort.DistortImageOps: void updateBoundBox(boofcv.struct.distort.PixelTransform_F32,boofcv.struct.ImageRectangle_F32)>": 0.129395800019027
        }, 
        {
            "<boofcv.alg.weights.WeightDistanceUniform_F32: float weight(float)>": 0.124893687275443
        }, 
        {
            "<Catalano.Math.Vector4: boolean equals(java.lang.Object)>": 0.12475557917477324
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Transform: java.lang.String toString()>": [
        {
            "<com.flowpowered.react.collision.broadphase.SweepAndPruneAlgorithm$EndPoint: java.lang.String toString()>": 0.521335664000526
        }, 
        {
            "<com.flowpowered.react.math.Vector2: java.lang.String toString()>": 0.5030898695800998
        }, 
        {
            "<org.jbox2d.common.Rot: java.lang.String toString()>": 0.5030898695800998
        }, 
        {
            "<org.jbox2d.common.Vec2: java.lang.String toString()>": 0.5030898695800998
        }, 
        {
            "<com.flowpowered.react.math.Transform: java.lang.String toString()>": 0.5024518530506554
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Matrix3x3: java.lang.String toString()>": [
        {
            "<com.flowpowered.react.math.Vector3: java.lang.String toString()>": 0.5285800119988904
        }, 
        {
            "<org.jbox2d.common.Vec3: java.lang.String toString()>": 0.5285800119988904
        }, 
        {
            "<com.flowpowered.react.math.Quaternion: java.lang.String toString()>": 0.5282735979114639
        }, 
        {
            "<com.flowpowered.react.math.Vector4: java.lang.String toString()>": 0.5282735979114639
        }, 
        {
            "<boofcv.struct.RectangleRotate_F32: java.lang.String toString()>": 0.5213520267908744
        }
    ], 
    "<net.smert.jreactphysics3d.engine.Material: void setBounciness(float)>": [
        {
            "<org.jbox2d.dynamics.joints.FrictionJoint: void setMaxTorque(float)>": 0.5964370089119183
        }, 
        {
            "<org.jbox2d.dynamics.joints.MotorJoint: void setMaxForce(float)>": 0.5964370089119183
        }, 
        {
            "<org.jbox2d.dynamics.joints.FrictionJoint: void setMaxForce(float)>": 0.5964370089119183
        }, 
        {
            "<org.jbox2d.dynamics.joints.MotorJoint: void setMaxTorque(float)>": 0.5964370089119183
        }, 
        {
            "<org.jbox2d.dynamics.Fixture: void setDensity(float)>": 0.5964370089119183
        }
    ], 
    "<net.smert.jreactphysics3d.engine.Impulse: void <init>(net.smert.jreactphysics3d.engine.Impulse)>": [
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.07262515630700529
        }, 
        {
            "<org.dyn4j.sandbox.Sandbox: void init(com.jogamp.opengl.GLAutoDrawable)>": 0.06731290575711692
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.TestbedMain: void main(java.lang.String[])>": 0.06722832284683627
        }, 
        {
            "<boofcv.demonstrations.transform.pyramid.EdgeIntensitiesApp: void main(java.lang.String[])>": 0.06422373079809163
        }, 
        {
            "<boofcv.demonstrations.tracker.CirculantVisualizationPanel: void <init>(boofcv.demonstrations.tracker.CirculantVisualizationPanel$Listener)>": 0.0634152074663202
        }
    ], 
    "<net.smert.jreactphysics3d.collision.shapes.SphereShape: void updateAABB(net.smert.jreactphysics3d.collision.shapes.AABB,net.smert.jreactphysics3d.mathematics.Transform)>": [
        {
            "<boofcv.factory.background.FactoryBackgroundModel: boofcv.alg.background.stationary.BackgroundStationaryGaussian stationaryGaussian(boofcv.factory.background.ConfigBackgroundGaussian,boofcv.struct.image.ImageType)>": 0.1485560275466022
        }, 
        {
            "<com.flowpowered.react.collision.shape.SphereShape: void getLocalBounds(com.flowpowered.react.math.Vector3,com.flowpowered.react.math.Vector3)>": 0.14494099576093333
        }, 
        {
            "<boofcv.factory.background.FactoryBackgroundModel: boofcv.alg.background.moving.BackgroundMovingGaussian movingGaussian(boofcv.factory.background.ConfigBackgroundGaussian,boofcv.struct.distort.PointTransformModel_F32,boofcv.struct.image.ImageType)>": 0.1420173412804464
        }, 
        {
            "<boofcv.factory.background.FactoryBackgroundModel: boofcv.alg.background.stationary.BackgroundStationaryBasic stationaryBasic(boofcv.factory.background.ConfigBackgroundBasic,boofcv.struct.image.ImageType)>": 0.1397278579692885
        }, 
        {
            "<net.imglib2.type.numeric.complex.AbstractComplexType: void setComplexNumber(float,float)>": 0.13523921091117685
        }
    ], 
    "<net.smert.jreactphysics3d.collision.broadphase.SweepAndPruneAlgorithm: boolean testIntersect1DSortedAABBs(net.smert.jreactphysics3d.collision.broadphase.BoxAABB,net.smert.jreactphysics3d.collision.broadphase.AABBInt,net.smert.jreactphysics3d.collision.broadphase.EndPoint[],int)>": [
        {
            "<com.flowpowered.react.collision.broadphase.SweepAndPruneAlgorithm: boolean testIntersect1DSortedAABBs(com.flowpowered.react.collision.broadphase.SweepAndPruneAlgorithm$BoxAABB,com.flowpowered.react.collision.broadphase.SweepAndPruneAlgorithm$AABBInt,com.flowpowered.react.collision.broadphase.SweepAndPruneAlgorithm$EndPoint[],int)>": 0.5163491614181144
        }, 
        {
            "<boofcv.gui.feature.AssociationPanel: boolean isValidPoint(int)>": 0.4444928498640399
        }, 
        {
            "<boofcv.struct.image.ImageBase: boolean isInBounds(int,int)>": 0.4273290902198156
        }, 
        {
            "<boofcv.struct.flow.ImageFlow: boolean isInBounds(int,int)>": 0.4273290902198156
        }, 
        {
            "<boofcv.struct.feature.MatrixOfList: boolean isInBounds(int,int)>": 0.4273290902198156
        }
    ], 
    "<net.smert.jreactphysics3d.engine.OverlappingPair: void update()>": [
        {
            "<org.dyn4j.sandbox.panels.LineGraphPanel: void setStaticSize(java.awt.Dimension)>": 0.04134491152973615
        }, 
        {
            "<org.jbox2d.testbed.tests.DrawingParticles: void step(org.jbox2d.testbed.framework.TestbedSettings)>": 0.04003203845127178
        }, 
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.03967630926057839
        }, 
        {
            "<boofcv.gui.feature.SelectRegionDescriptionPanel: void <init>()>": 0.039254643313832986
        }, 
        {
            "<boofcv.gui.d3.Polygon3DSequenceViewer: void <init>()>": 0.03886011427237866
        }
    ], 
    "<net.smert.jreactphysics3d.constraint.ContactPoint: net.smert.jreactphysics3d.mathematics.Vector3 getFrictionVector2()>": [
        {
            "<org.dyn4j.geometry.Segment: org.dyn4j.geometry.Vector2 getPoint2()>": 0.1525974025974026
        }, 
        {
            "<org.dyn4j.sandbox.ContactCounter: int getAdded()>": 0.1525974025974026
        }, 
        {
            "<boofcv.abst.filter.derivative.ImageHessianDirect_Reflection: boofcv.struct.image.ImageType getDerivativeType()>": 0.11836801709271691
        }, 
        {
            "<boofcv.abst.filter.derivative.ImageGradient_Reflection: boofcv.struct.image.ImageType getDerivativeType()>": 0.11836801709271691
        }, 
        {
            "<org.dyn4j.geometry.Rectangle: double getRotation()>": 0.11562156680250482
        }
    ], 
    "<net.smert.jreactphysics3d.engine.ContactManifold: void setFrictionVector1(net.smert.jreactphysics3d.mathematics.Vector3)>": [
        {
            "<Catalano.Imaging.Filters.GaussianBlur: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Concurrent.Filters.BradleyLocalThreshold: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.CosineTransform: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.BradleyLocalThreshold: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.UnsharpMasking: void <init>()>": 0.018184824186332698
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Vector3: float lengthSquare()>": [
        {
            "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 multiply(com.flowpowered.react.math.Matrix4x4,com.flowpowered.react.math.Matrix4x4)>": 0.5309466898555751
        }, 
        {
            "<Catalano.Math.Vector3: float Square()>": 0.5257112668008669
        }, 
        {
            "<com.flowpowered.react.math.Vector3: float lengthSquare()>": 0.5257112668008669
        }, 
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.5224863675885517
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.521402122249235
        }
    ], 
    "<net.smert.jreactphysics3d.collision.shapes.CapsuleShape: void computeLocalInertiaTensor(net.smert.jreactphysics3d.mathematics.Matrix3x3,float)>": [
        {
            "<com.flowpowered.react.collision.shape.CapsuleShape: void computeLocalInertiaTensor(com.flowpowered.react.math.Matrix3x3,float)>": 0.7349251072435813
        }, 
        {
            "<org.jbox2d.dynamics.contacts.ContactSolver: void solveVelocityConstraints()>": 0.4727903956141548
        }, 
        {
            "<boofcv.alg.interpolate.kernel.BicubicKernel_F32: float compute(float)>": 0.4718079131619852
        }, 
        {
            "<org.jbox2d.dynamics.contacts.ContactSolver: boolean solvePositionConstraints()>": 0.4650153780286994
        }, 
        {
            "<boofcv.alg.distort.radtan.AddRadialPtoN_F32: void compute(float,float,georegression.struct.point.Point2D_F32)>": 0.4637095165921715
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Quaternion: net.smert.jreactphysics3d.mathematics.Matrix3x3 getMatrix(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": [
        {
            "<com.flowpowered.react.math.Quaternion: com.flowpowered.react.math.Matrix3x3 getMatrix()>": 0.47662189316331444
        }, 
        {
            "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 multiply(com.flowpowered.react.math.Matrix4x4,com.flowpowered.react.math.Matrix4x4)>": 0.46965739128695305
        }, 
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.4625351144058324
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.46163796459385664
        }, 
        {
            "<org.jbox2d.dynamics.contacts.PositionSolverManifold: void initialize(org.jbox2d.dynamics.contacts.ContactPositionConstraint,org.jbox2d.common.Transform,org.jbox2d.common.Transform,int)>": 0.4564727726603791
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 add(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": [
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.46747390172029724
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.4665444048817772
        }, 
        {
            "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 multiply(com.flowpowered.react.math.Matrix4x4,com.flowpowered.react.math.Matrix4x4)>": 0.4632065718356898
        }, 
        {
            "<com.flowpowered.react.math.Quaternion: void inverse()>": 0.46278530184059086
        }, 
        {
            "<org.jbox2d.particle.ParticleSystem: void raycast(org.jbox2d.callbacks.ParticleRaycastCallback,org.jbox2d.common.Vec2,org.jbox2d.common.Vec2)>": 0.4593263960937198
        }
    ], 
    "<net.smert.jreactphysics3d.engine.Profiler: void StopProfilingBlock()>": [
        {
            "<net.imglib2.type.volatiles.AbstractVolatileRealType: boolean valueEquals(net.imglib2.type.volatiles.AbstractVolatileRealType)>": 0.13061742904453774
        }, 
        {
            "<net.imglib2.type.volatiles.AbstractVolatileNumericType: boolean valueEquals(net.imglib2.type.volatiles.AbstractVolatileNumericType)>": 0.13061742904453774
        }, 
        {
            "<boofcv.abst.feature.associate.EnforceUniqueByScore: boolean uniqueDestination()>": 0.12860754596411816
        }, 
        {
            "<boofcv.abst.feature.associate.EnforceUniqueByScore: boolean uniqueSource()>": 0.12860754596411816
        }, 
        {
            "<boofcv.gui.DepthVideoAppBase: void mouseClicked(java.awt.event.MouseEvent)>": 0.12860754596411816
        }
    ], 
    "<net.smert.jreactphysics3d.engine.DynamicsWorld: void resetContactManifoldListsOfBodies()>": [
        {
            "<com.flowpowered.react.engine.DynamicsWorld: void resetContactManifoldListsOfBodies()>": 0.47500000000000003
        }, 
        {
            "<com.flowpowered.react.engine.DynamicsWorld: void resetBodiesMovementVariable()>": 0.4597697471210507
        }, 
        {
            "<com.flowpowered.react.engine.DynamicsWorld: void updateRigidBodiesAABB()>": 0.45942947299337566
        }, 
        {
            "<com.flowpowered.react.engine.linked.LinkedDynamicsWorld: void clearLinkedBodies()>": 0.4533080168093735
        }, 
        {
            "<com.flowpowered.react.engine.DynamicsWorld: void enableSleeping(boolean)>": 0.42056350051632624
        }
    ], 
    "<net.smert.jreactphysics3d.collision.shapes.CapsuleShape: net.smert.jreactphysics3d.mathematics.Vector3 getLocalSupportPointWithMargin(net.smert.jreactphysics3d.mathematics.Vector3,net.smert.jreactphysics3d.mathematics.Vector3)>": [
        {
            "<com.flowpowered.react.math.Matrix4x4: void <init>(com.flowpowered.react.math.Matrix4x4)>": 0.24040322130854574
        }, 
        {
            "<com.flowpowered.react.math.Vector4: com.flowpowered.react.math.Vector4 negate()>": 0.2355158815133359
        }, 
        {
            "<org.jbox2d.common.Vec2: void absLocal()>": 0.23514094171192296
        }, 
        {
            "<com.flowpowered.react.math.Quaternion: void <init>(float,com.flowpowered.react.math.Vector3)>": 0.2331585040456033
        }, 
        {
            "<com.flowpowered.react.math.Vector3: com.flowpowered.react.math.Vector3 negate()>": 0.23279378510409016
        }
    ], 
    "<net.smert.jreactphysics3d.engine.ProfileNodeIterator: int getCurrentNumTotalCalls()>": [
        {
            "<org.jbox2d.common.MathUtils: int max(int,int)>": 0.3652167676687162
        }, 
        {
            "<org.jbox2d.common.MathUtils: int min(int,int)>": 0.3652167676687162
        }, 
        {
            "<org.jbox2d.particle.ParticleSystem: int limitCapacity(int,int)>": 0.3652167676687162
        }, 
        {
            "<net.imglib2.display.ColorTable16: int get(int,int)>": 0.32170772231096606
        }, 
        {
            "<com.flowpowered.react.collision.narrowphase.EPA.EdgeEPA: int getTargetVertexIndex()>": 0.3184893664460647
        }
    ], 
    "<net.smert.jreactphysics3d.collision.shapes.ConeShape: void getLocalBounds(net.smert.jreactphysics3d.mathematics.Vector3,net.smert.jreactphysics3d.mathematics.Vector3)>": [
        {
            "<org.jbox2d.common.Vec2: void absLocal()>": 0.34505910739395607
        }, 
        {
            "<com.flowpowered.react.math.Vector4: com.flowpowered.react.math.Vector4 negate()>": 0.3450529198944138
        }, 
        {
            "<com.flowpowered.react.math.Vector3: com.flowpowered.react.math.Vector3 negate()>": 0.34098344454146673
        }, 
        {
            "<com.flowpowered.react.math.Quaternion: void <init>(float,com.flowpowered.react.math.Vector3)>": 0.34029197662861754
        }, 
        {
            "<org.jbox2d.dynamics.contacts.Contact: float mixFriction(float,float)>": 0.3370425206919152
        }
    ], 
    "<net.smert.jreactphysics3d.collision.shapes.BoxShape: void getLocalBounds(net.smert.jreactphysics3d.mathematics.Vector3,net.smert.jreactphysics3d.mathematics.Vector3)>": [
        {
            "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 negate(com.flowpowered.react.math.Matrix4x4)>": 0.2975072838026333
        }, 
        {
            "<com.flowpowered.react.math.Matrix3x3: com.flowpowered.react.math.Matrix3x3 negate(com.flowpowered.react.math.Matrix3x3)>": 0.29167257428274573
        }, 
        {
            "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 set(com.flowpowered.react.math.Matrix4x4)>": 0.291417578750566
        }, 
        {
            "<com.flowpowered.react.math.Matrix4x4: void <init>(com.flowpowered.react.math.Matrix4x4)>": 0.2860854727128558
        }, 
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector4 Abs()>": 0.28119293102198983
        }
    ], 
    "<net.smert.jreactphysics3d.constraint.SliderJoint: float getTranslation()>": [
        {
            "<org.dyn4j.sandbox.utilities.RenderUtilities: float setLineWidth(com.jogamp.opengl.GL2,float)>": 0.04510767101226819
        }, 
        {
            "<org.dyn4j.sandbox.utilities.RenderUtilities: float setPointSize(com.jogamp.opengl.GL2,float)>": 0.04510767101226819
        }, 
        {
            "<org.jbox2d.dynamics.contacts.Contact: float mixFriction(float,float)>": 0.04442509345571249
        }, 
        {
            "<org.jbox2d.common.Settings: float mixFriction(float,float)>": 0.04442509345571249
        }, 
        {
            "<boofcv.alg.distort.DistortImageOps: georegression.struct.shapes.RectangleLength2D_F32 boundBox_F32(int,int,boofcv.struct.distort.PixelTransform_F32)>": 0.04435107157230129
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Vector2: boolean isZero()>": [
        {
            "<com.flowpowered.react.math.Vector3: boolean isZero()>": 0.48156017865757195
        }, 
        {
            "<com.flowpowered.react.math.Vector4: boolean isZero()>": 0.4789838510590299
        }, 
        {
            "<com.flowpowered.react.math.Vector2: boolean isZero()>": 0.47839361992080887
        }, 
        {
            "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 multiply(com.flowpowered.react.math.Matrix4x4,com.flowpowered.react.math.Matrix4x4)>": 0.47657459299191296
        }, 
        {
            "<com.flowpowered.react.math.Vector3: boolean isUnit()>": 0.4754698661006136
        }
    ], 
    "<net.smert.jreactphysics3d.engine.ContactSolver: void warmStart()>": [
        {
            "<com.flowpowered.react.engine.DynamicsWorld: void tick()>": 0.07298010210063395
        }, 
        {
            "<com.flowpowered.react.engine.DynamicsWorld: void update()>": 0.07126968036462807
        }, 
        {
            "<Catalano.Imaging.Filters.Threshold: void applyInPlace(Catalano.Imaging.FastBitmap)>": 0.0710967552868223
        }, 
        {
            "<boofcv.alg.filter.convolve.ConvolveNormalized: void convolve(boofcv.struct.convolve.Kernel2D_F32,boofcv.struct.image.GrayF32,boofcv.struct.image.GrayF32)>": 0.06999143969003646
        }, 
        {
            "<net.imglib2.view.iteration.SlicingCursor: void localize(float[])>": 0.06866003170188614
        }
    ], 
    "<net.smert.jreactphysics3d.collision.shapes.ConeShape: net.smert.jreactphysics3d.mathematics.Vector3 getLocalSupportPointWithoutMargin(net.smert.jreactphysics3d.mathematics.Vector3,net.smert.jreactphysics3d.mathematics.Vector3)>": [
        {
            "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 multiply(com.flowpowered.react.math.Matrix4x4,com.flowpowered.react.math.Matrix4x4)>": 0.43718392983223625
        }, 
        {
            "<org.jbox2d.common.Vec2: float length()>": 0.4347649896574199
        }, 
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.4318184417022877
        }, 
        {
            "<org.jbox2d.collision.shapes.ChainShape: void computeAABB(org.jbox2d.collision.AABB,org.jbox2d.common.Transform,int)>": 0.4313381407048241
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.4309454479742337
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Vector3: net.smert.jreactphysics3d.mathematics.Vector3 invert()>": [
        {
            "<org.jbox2d.common.Vec2: void absLocal()>": 0.44268359858268463
        }, 
        {
            "<com.flowpowered.react.math.Vector4: com.flowpowered.react.math.Vector4 negate()>": 0.4425480358960301
        }, 
        {
            "<com.flowpowered.react.math.Vector3: com.flowpowered.react.math.Vector3 negate()>": 0.43776481569630155
        }, 
        {
            "<com.flowpowered.react.math.Quaternion: void <init>(float,com.flowpowered.react.math.Vector3)>": 0.43480531143294576
        }, 
        {
            "<org.jbox2d.testbed.perf.MathPerf: void runSinLUTTest(float)>": 0.4305759720602681
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Vector2: net.smert.jreactphysics3d.mathematics.Vector2 normalize()>": [
        {
            "<org.jbox2d.common.Vec3: void crossToOutUnsafe(org.jbox2d.common.Vec3,org.jbox2d.common.Vec3,org.jbox2d.common.Vec3)>": 0.5130114434063631
        }, 
        {
            "<org.jbox2d.common.Sweep: void advance(float)>": 0.5063229246385433
        }, 
        {
            "<org.jbox2d.common.Rot: void mulUnsafe(org.jbox2d.common.Rot,org.jbox2d.common.Rot,org.jbox2d.common.Rot)>": 0.5037453131858463
        }, 
        {
            "<org.jbox2d.collision.shapes.ChainShape: void computeAABB(org.jbox2d.collision.AABB,org.jbox2d.common.Transform,int)>": 0.5016882643413989
        }, 
        {
            "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 multiply(com.flowpowered.react.math.Matrix4x4,com.flowpowered.react.math.Matrix4x4)>": 0.4972566338434349
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Quaternion: net.smert.jreactphysics3d.mathematics.Quaternion normalize()>": [
        {
            "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 multiply(com.flowpowered.react.math.Matrix4x4,com.flowpowered.react.math.Matrix4x4)>": 0.5230457875821354
        }, 
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.5185728056122046
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.5176470276216808
        }, 
        {
            "<org.jbox2d.dynamics.contacts.PositionSolverManifold: void initialize(org.jbox2d.dynamics.contacts.ContactPositionConstraint,org.jbox2d.common.Transform,org.jbox2d.common.Transform,int)>": 0.5131076672048521
        }, 
        {
            "<org.jbox2d.common.Vec3: void crossToOutUnsafe(org.jbox2d.common.Vec3,org.jbox2d.common.Vec3,org.jbox2d.common.Vec3)>": 0.5087563802373156
        }
    ], 
    "<net.smert.jreactphysics3d.collision.shapes.ConeShape: boolean isEqualTo(net.smert.jreactphysics3d.collision.shapes.CollisionShape)>": [
        {
            "<com.flowpowered.react.collision.shape.CylinderShape: boolean isEqualTo(com.flowpowered.react.collision.shape.CollisionShape)>": 0.5034313725490196
        }, 
        {
            "<com.flowpowered.react.collision.shape.ConeShape: boolean isEqualTo(com.flowpowered.react.collision.shape.CollisionShape)>": 0.5034313725490196
        }, 
        {
            "<com.flowpowered.react.collision.shape.CapsuleShape: boolean isEqualTo(com.flowpowered.react.collision.shape.CollisionShape)>": 0.5034313725490196
        }, 
        {
            "<Catalano.Core.FloatRange: boolean IsOverlapping(Catalano.Core.FloatRange)>": 0.4935671393399216
        }, 
        {
            "<Catalano.Core.FloatRange: boolean isInside(float)>": 0.48314364433359824
        }
    ], 
    "<net.smert.jreactphysics3d.engine.DynamicsWorld: float getPhysicsTime()>": [
        {
            "<org.jbox2d.dynamics.contacts.Contact: float mixFriction(float,float)>": 0.3216542740930425
        }, 
        {
            "<org.jbox2d.common.Settings: float mixFriction(float,float)>": 0.3216542740930425
        }, 
        {
            "<Catalano.Math.Geometry.PointsCloud: void setQuadrilateralRelativeDistortionLimit(float)>": 0.31890119730361305
        }, 
        {
            "<org.jbox2d.common.Rot: float getAngle()>": 0.31672989028797055
        }, 
        {
            "<org.jbox2d.common.MathUtils: float fastAbs(float)>": 0.316544402091575
        }
    ], 
    "<net.smert.jreactphysics3d.engine.DynamicsWorld: int getNumContactManifolds()>": [
        {
            "<Catalano.Core.Structs.BinaryHeap: int size()>": 0.5547619047619047
        }, 
        {
            "<Catalano.Math.SparseArray: int size()>": 0.5547619047619047
        }, 
        {
            "<com.flowpowered.react.engine.DynamicsWorld: int getNbContactManifolds()>": 0.5547619047619047
        }, 
        {
            "<boofcv.alg.feature.detdesc.DetectDescribeSurfPlanar: int getNumberOfFeatures()>": 0.5547619047619047
        }, 
        {
            "<boofcv.abst.feature.detect.interest.WrapFPtoInterestPoint: int getNumberOfFeatures()>": 0.5547619047619047
        }
    ], 
    "<net.smert.jreactphysics3d.collision.shapes.ConvexMeshShape: void getLocalBounds(net.smert.jreactphysics3d.mathematics.Vector3,net.smert.jreactphysics3d.mathematics.Vector3)>": [
        {
            "<Catalano.Imaging.Filters.GaussianBlur: void <init>()>": 0.009356014857063997
        }, 
        {
            "<Catalano.Imaging.Concurrent.Filters.BradleyLocalThreshold: void <init>()>": 0.009356014857063997
        }, 
        {
            "<Catalano.Imaging.Filters.CosineTransform: void <init>()>": 0.009356014857063997
        }, 
        {
            "<Catalano.Imaging.Filters.BradleyLocalThreshold: void <init>()>": 0.009356014857063997
        }, 
        {
            "<Catalano.Imaging.Filters.UnsharpMasking: void <init>()>": 0.009356014857063997
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Vector3: net.smert.jreactphysics3d.mathematics.Vector3 abs()>": [
        {
            "<com.flowpowered.react.math.Vector4: com.flowpowered.react.math.Vector4 negate()>": 0.5192417975783093
        }, 
        {
            "<org.jbox2d.common.Vec2: void absLocal()>": 0.5171589245338094
        }, 
        {
            "<com.flowpowered.react.math.Vector3: com.flowpowered.react.math.Vector3 negate()>": 0.5128537380055944
        }, 
        {
            "<com.flowpowered.react.math.Quaternion: void <init>(float,com.flowpowered.react.math.Vector3)>": 0.5082060306057847
        }, 
        {
            "<com.flowpowered.react.math.Quaternion: void <init>(com.flowpowered.react.math.Quaternion)>": 0.49733114603650264
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Quaternion: net.smert.jreactphysics3d.mathematics.Quaternion set(net.smert.jreactphysics3d.mathematics.Vector3,float)>": [
        {
            "<org.jbox2d.dynamics.contacts.Contact: float mixFriction(float,float)>": 0.4050207089565214
        }, 
        {
            "<org.jbox2d.common.Settings: float mixFriction(float,float)>": 0.4050207089565214
        }, 
        {
            "<org.jbox2d.common.MathUtils: float clamp(float,float,float)>": 0.40026496713140125
        }, 
        {
            "<com.flowpowered.react.math.Vector4: void <init>(float,float,float,float)>": 0.3912084165190128
        }, 
        {
            "<com.flowpowered.react.math.Quaternion: void <init>(float,float,float,float)>": 0.3912084165190128
        }
    ], 
    "<net.smert.jreactphysics3d.engine.Island: void <init>(int,int,int)>": [
        {
            "<boofcv.core.image.border.ImageBorderValue$Value_I: void setOutside(int,int,int)>": 0.6880637252488764
        }, 
        {
            "<org.dyn4j.examples.ExampleJOGL: void reshape(com.jogamp.opengl.GLAutoDrawable,int,int,int,int)>": 0.6804543893755174
        }, 
        {
            "<net.coobird.thumbnailator.geometry.Positions$1: java.awt.Point calculate(int,int,int,int,int,int,int,int)>": 0.6668430182401069
        }, 
        {
            "<net.coobird.thumbnailator.geometry.Coordinate: java.awt.Point calculate(int,int,int,int,int,int,int,int)>": 0.6452420786660114
        }, 
        {
            "<Catalano.Imaging.Tools.IntegralImage: int getInternalData(int,int)>": 0.6432160256279871
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Vector3: float dot(net.smert.jreactphysics3d.mathematics.Vector3)>": [
        {
            "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 multiply(com.flowpowered.react.math.Matrix4x4,com.flowpowered.react.math.Matrix4x4)>": 0.5226932113548127
        }, 
        {
            "<Catalano.Math.Vector3: float Square()>": 0.5175059483164122
        }, 
        {
            "<com.flowpowered.react.math.Vector3: float lengthSquare()>": 0.5175059483164122
        }, 
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.5143945918988484
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.5133278316014515
        }
    ], 
    "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: void <init>()>": [
        {
            "<Catalano.Math.Matrix: float[][] Transpose(float[][])>": 0.167801723213953
        }, 
        {
            "<Catalano.Math.Matrix: float[][] Copy(float[][])>": 0.167801723213953
        }, 
        {
            "<Catalano.Math.Matrix: float[][] MultiplyByTranspose(float[][],float[][])>": 0.16715557136849615
        }, 
        {
            "<Catalano.Math.Matrix: float[][] CreateMatrix2D(int,int,float)>": 0.16616573827078424
        }, 
        {
            "<Catalano.Math.Matrix: float[][] Abs(float[][])>": 0.166070257573478
        }
    ], 
    "<net.smert.jreactphysics3d.collision.shapes.BoxShape: net.smert.jreactphysics3d.mathematics.Vector3 getLocalSupportPointWithoutMargin(net.smert.jreactphysics3d.mathematics.Vector3,net.smert.jreactphysics3d.mathematics.Vector3)>": [
        {
            "<com.flowpowered.react.collision.shape.ConeShape: void <init>(float,float)>": 0.30436307130457524
        }, 
        {
            "<org.jbox2d.common.MathUtils: float reduceAngle(float)>": 0.3018954098444705
        }, 
        {
            "<org.jbox2d.dynamics.contacts.Contact: float mixFriction(float,float)>": 0.3000464816261923
        }, 
        {
            "<org.jbox2d.common.Settings: float mixFriction(float,float)>": 0.3000464816261923
        }, 
        {
            "<org.jbox2d.common.MathUtils: float abs(float)>": 0.29653939235044413
        }
    ], 
    "<net.smert.jreactphysics3d.collision.BroadPhasePair: net.smert.jreactphysics3d.collision.BodyIndexPair ComputeBodiesIndexPair(net.smert.jreactphysics3d.body.CollisionBody,net.smert.jreactphysics3d.body.CollisionBody)>": [
        {
            "<net.imglib2.transform.integer.ComponentMappingTransform: int getComponentMapping(int)>": 0.36899546954869694
        }, 
        {
            "<net.imglib2.transform.integer.SlicingTransform: int getComponentMapping(int)>": 0.36899546954869694
        }, 
        {
            "<net.imglib2.transform.integer.MixedTransform: int getComponentMapping(int)>": 0.36899546954869694
        }, 
        {
            "<net.imglib2.view.FullSourceMapSlicingRandomAccess: void move(int,int)>": 0.3685857124325213
        }, 
        {
            "<net.imglib2.view.FullSourceMapSlicingRandomAccess: void setPosition(int,int)>": 0.3685857124325213
        }
    ], 
    "<net.smert.jreactphysics3d.configuration.ContactsPositionCorrectionTechnique: void <init>(java.lang.String,int)>": [
        {
            "<Catalano.Statistics.Analysis.PrincipalComponentAnalysis$AnalysisMethod: void <init>(java.lang.String,int)>": 0.4415584415584415
        }, 
        {
            "<Catalano.Imaging.Filters.Resize$Algorithm: void <init>(java.lang.String,int)>": 0.4415584415584415
        }, 
        {
            "<Catalano.Imaging.Filters.PeronaMalikAnisotropicDiffusion$Diffusion: void <init>(java.lang.String,int)>": 0.4415584415584415
        }, 
        {
            "<Catalano.Imaging.Filters.StereoAnaglyph$Algorithm: void <init>(java.lang.String,int)>": 0.4415584415584415
        }, 
        {
            "<Catalano.Imaging.Texture.GrayLevelCooccurrenceMatrix$Degree: void <init>(java.lang.String,int)>": 0.4415584415584415
        }
    ], 
    "<net.smert.jreactphysics3d.engine.DynamicsWorld: int getNumRigidBodies()>": [
        {
            "<com.flowpowered.react.engine.DynamicsWorld: int getNbRigidBodies()>": 0.5547619047619047
        }, 
        {
            "<com.flowpowered.react.engine.DynamicsWorld: int getNbJoints()>": 0.5547619047619047
        }, 
        {
            "<org.jbox2d.common.MathUtils: int max(int,int)>": 0.3652167676687162
        }, 
        {
            "<org.jbox2d.common.MathUtils: int min(int,int)>": 0.3652167676687162
        }, 
        {
            "<org.jbox2d.particle.ParticleSystem: int limitCapacity(int,int)>": 0.3652167676687162
        }
    ], 
    "<net.smert.jreactphysics3d.body.RigidBody: void applyForce(net.smert.jreactphysics3d.mathematics.Vector3,net.smert.jreactphysics3d.mathematics.Vector3)>": [
        {
            "<org.dyn4j.dynamics.AABBBroadphaseFilter: boolean isAllowed(org.dyn4j.geometry.AABB,org.dyn4j.dynamics.Body,org.dyn4j.dynamics.BodyFixture)>": 0.07620128059391587
        }, 
        {
            "<org.dyn4j.dynamics.AABBBroadphaseFilter: boolean isAllowed(org.dyn4j.geometry.AABB,org.dyn4j.collision.Collidable,org.dyn4j.collision.Fixture)>": 0.07596443269195932
        }, 
        {
            "<org.dyn4j.dynamics.RaycastBroadphaseFilter: boolean isAllowed(org.dyn4j.geometry.Ray,double,org.dyn4j.dynamics.Body,org.dyn4j.dynamics.BodyFixture)>": 0.07524531757625073
        }, 
        {
            "<boofcv.abst.sfm.d3.WrapVisOdomPixelDepthPnP: boolean isFault()>": 0.07520935150619326
        }, 
        {
            "<boofcv.abst.sfm.d3.VisOdomPixelDepthPnP_to_DepthVisualOdometry: boolean isFault()>": 0.07520935150619326
        }
    ], 
    "<net.smert.jreactphysics3d.collision.shapes.CylinderShape: boolean isEqualTo(net.smert.jreactphysics3d.collision.shapes.CollisionShape)>": [
        {
            "<com.flowpowered.react.collision.shape.CylinderShape: boolean isEqualTo(com.flowpowered.react.collision.shape.CollisionShape)>": 0.5034313725490196
        }, 
        {
            "<com.flowpowered.react.collision.shape.ConeShape: boolean isEqualTo(com.flowpowered.react.collision.shape.CollisionShape)>": 0.5034313725490196
        }, 
        {
            "<com.flowpowered.react.collision.shape.CapsuleShape: boolean isEqualTo(com.flowpowered.react.collision.shape.CollisionShape)>": 0.5034313725490196
        }, 
        {
            "<Catalano.Core.FloatRange: boolean IsOverlapping(Catalano.Core.FloatRange)>": 0.4935671393399216
        }, 
        {
            "<Catalano.Core.FloatRange: boolean isInside(float)>": 0.48314364433359824
        }
    ], 
    "<net.smert.jreactphysics3d.constraint.JointInfo: void <init>(net.smert.jreactphysics3d.body.RigidBody,net.smert.jreactphysics3d.body.RigidBody,net.smert.jreactphysics3d.constraint.JointType)>": [
        {
            "<boofcv.factory.geo.ConfigHomography: void <init>(boolean)>": 0.07386462100653643
        }, 
        {
            "<boofcv.gui.VideoProcessAppBase: void stopWorker()>": 0.07062191956730372
        }, 
        {
            "<boofcv.gui.DepthVideoAppBase: void stopWorker()>": 0.07062191956730372
        }, 
        {
            "<boofcv.gui.StereoVideoAppBase: void stopWorker()>": 0.07062191956730372
        }, 
        {
            "<Catalano.Imaging.Concurrent.Filters.SobelEdgeDetector: void <init>()>": 0.06890954328648981
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Mathematics: float Clamp(float,float,float)>": [
        {
            "<com.flowpowered.react.math.Mathematics: float clamp(float,float,float)>": 0.8481071928653616
        }, 
        {
            "<org.jbox2d.common.MathUtils: float clamp(float,float,float)>": 0.581693496511845
        }, 
        {
            "<org.jbox2d.dynamics.contacts.Contact: float mixFriction(float,float)>": 0.5418525881719433
        }, 
        {
            "<org.jbox2d.common.Settings: float mixFriction(float,float)>": 0.5418525881719433
        }, 
        {
            "<org.jbox2d.common.MathUtils: float min(float,float)>": 0.5259467177429963
        }
    ], 
    "<net.smert.jreactphysics3d.body.CollisionBody: void setCollisionShape(net.smert.jreactphysics3d.collision.shapes.CollisionShape)>": [
        {
            "<org.dyn4j.collision.broadphase.DynamicAABBTree: void validate(org.dyn4j.collision.broadphase.DynamicAABBTreeNode)>": 0.5052317494616049
        }, 
        {
            "<net.imglib2.transform.integer.SlicingTransform: boolean getComponentZero(int)>": 0.4940271698307489
        }, 
        {
            "<net.imglib2.transform.integer.MixedTransform: boolean getComponentZero(int)>": 0.4940271698307489
        }, 
        {
            "<net.imglib2.transform.integer.MixedTransform: boolean getComponentInversion(int)>": 0.4940271698307489
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void validateStructure(org.jbox2d.collision.broadphase.DynamicTreeNode)>": 0.4828988780198804
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 invert()>": [
        {
            "<com.flowpowered.react.math.Vector4: com.flowpowered.react.math.Vector4 negate()>": 0.4480689200820689
        }, 
        {
            "<org.jbox2d.common.Vec2: void absLocal()>": 0.4477820767650167
        }, 
        {
            "<com.flowpowered.react.math.Vector3: com.flowpowered.react.math.Vector3 negate()>": 0.4430902534259441
        }, 
        {
            "<com.flowpowered.react.math.Quaternion: void <init>(float,com.flowpowered.react.math.Vector3)>": 0.44030173097904113
        }, 
        {
            "<org.jbox2d.testbed.perf.MathPerf: void runSinLUTTest(float)>": 0.43539045718797276
        }
    ], 
    "<net.smert.jreactphysics3d.engine.DynamicsWorld: void addJointToBody(net.smert.jreactphysics3d.constraint.Joint)>": [
        {
            "<org.dyn4j.collision.broadphase.DynamicAABBTree: void validate(org.dyn4j.collision.broadphase.DynamicAABBTreeNode)>": 0.21945109180402456
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void validateStructure(org.jbox2d.collision.broadphase.DynamicTreeNode)>": 0.21310022880125737
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTreeFlatNodes: void validateStructure(int)>": 0.21037459172325026
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void validateMetrics(org.jbox2d.collision.broadphase.DynamicTreeNode)>": 0.20505357142646047
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void validate()>": 0.20478922755625883
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Vector3 multiply(net.smert.jreactphysics3d.mathematics.Vector3,net.smert.jreactphysics3d.mathematics.Vector3)>": [
        {
            "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 multiply(com.flowpowered.react.math.Matrix4x4,com.flowpowered.react.math.Matrix4x4)>": 0.510598306510728
        }, 
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.5043153119288616
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.5033577905122676
        }, 
        {
            "<org.jbox2d.dynamics.contacts.PositionSolverManifold: void initialize(org.jbox2d.dynamics.contacts.ContactPositionConstraint,org.jbox2d.common.Transform,org.jbox2d.common.Transform,int)>": 0.49677288093362526
        }, 
        {
            "<org.jbox2d.common.Rot: void mulTrans(org.jbox2d.common.Rot,org.jbox2d.common.Vec2,org.jbox2d.common.Vec2)>": 0.4936490938025128
        }
    ], 
    "<net.smert.jreactphysics3d.engine.DynamicsWorld: void setInterpolationFactorToAllBodies()>": [
        {
            "<org.jbox2d.dynamics.joints.FrictionJoint: void setMaxTorque(float)>": 0.4334663380282351
        }, 
        {
            "<org.jbox2d.dynamics.joints.MotorJoint: void setMaxForce(float)>": 0.4334663380282351
        }, 
        {
            "<org.jbox2d.dynamics.joints.FrictionJoint: void setMaxForce(float)>": 0.4334663380282351
        }, 
        {
            "<org.jbox2d.dynamics.joints.MotorJoint: void setMaxTorque(float)>": 0.4334663380282351
        }, 
        {
            "<org.jbox2d.dynamics.Fixture: void setDensity(float)>": 0.4334663380282351
        }
    ], 
    "<net.smert.jreactphysics3d.collision.BodyIndexPair: int hashCode()>": [
        {
            "<boofcv.alg.feature.describe.DescribeSiftCommon: int getDescriptorLength()>": 0.40418573867541135
        }, 
        {
            "<boofcv.alg.filter.misc.ImplAverageDownSampleN: void down(boofcv.struct.image.GrayS8,int,boofcv.struct.image.GrayI8)>": 0.4009219539835272
        }, 
        {
            "<boofcv.alg.filter.misc.ImplAverageDownSampleN: void down(boofcv.struct.image.GrayU8,int,boofcv.struct.image.GrayI8)>": 0.4001035165145561
        }, 
        {
            "<boofcv.alg.filter.misc.ImplAverageDownSampleN: void down(boofcv.struct.image.GrayU16,int,boofcv.struct.image.GrayI16)>": 0.3985451377736684
        }, 
        {
            "<boofcv.alg.filter.misc.ImplAverageDownSampleN: void down(boofcv.struct.image.GrayS16,int,boofcv.struct.image.GrayI16)>": 0.398413234970892
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Vector2: net.smert.jreactphysics3d.mathematics.Vector2 setUnitOrthogonal()>": [
        {
            "<org.jbox2d.common.Vec3: void crossToOutUnsafe(org.jbox2d.common.Vec3,org.jbox2d.common.Vec3,org.jbox2d.common.Vec3)>": 0.5086381652969276
        }, 
        {
            "<org.jbox2d.collision.shapes.ChainShape: void computeAABB(org.jbox2d.collision.AABB,org.jbox2d.common.Transform,int)>": 0.5049267094976359
        }, 
        {
            "<org.jbox2d.common.Sweep: void advance(float)>": 0.5006818882220879
        }, 
        {
            "<org.jbox2d.common.Vec2: float length()>": 0.4987213052706277
        }, 
        {
            "<org.jbox2d.common.Rot: void mulUnsafe(org.jbox2d.common.Rot,org.jbox2d.common.Rot,org.jbox2d.common.Rot)>": 0.4978432787772095
        }
    ], 
    "<net.smert.jreactphysics3d.collision.narrowphase.EPA.TriangleComparison: int compare(java.lang.Object,java.lang.Object)>": [
        {
            "<Catalano.Math.Vector4: boolean equals(java.lang.Object)>": 0.3550795578770852
        }, 
        {
            "<Catalano.Math.Vector3: boolean equals(java.lang.Object)>": 0.3462834161874758
        }, 
        {
            "<com.flowpowered.react.math.Vector3: int getMaxAxis()>": 0.34381927434040227
        }, 
        {
            "<Catalano.Math.Vector3: int getMinIndex()>": 0.34136866025535667
        }, 
        {
            "<Catalano.Math.Vector3: int getMaxIndex()>": 0.34136866025535667
        }
    ], 
    "<net.smert.jreactphysics3d.collision.narrowphase.EPA.TriangleEPA: boolean computeClosestPoint(net.smert.jreactphysics3d.mathematics.Vector3[])>": [
        {
            "<com.flowpowered.react.collision.narrowphase.EPA.TriangleEPA: boolean computeClosestPoint(com.flowpowered.react.math.Vector3[])>": 0.3606532514346463
        }, 
        {
            "<com.flowpowered.react.math.Matrix4x4: float determinant3x3(float,float,float,float,float,float,float,float,float)>": 0.3412021692627705
        }, 
        {
            "<com.flowpowered.react.collision.RayCaster: boolean intersects(com.flowpowered.react.math.Vector3,com.flowpowered.react.math.Vector3,com.flowpowered.react.collision.shape.ConeShape,com.flowpowered.react.math.Vector3)>": 0.3224711094912333
        }, 
        {
            "<org.jbox2d.dynamics.contacts.ContactSolver: void solveVelocityConstraints()>": 0.3138658195546779
        }, 
        {
            "<boofcv.alg.interpolate.kernel.BicubicKernel_F32: float compute(float)>": 0.3137108692235739
        }
    ], 
    "<net.smert.jreactphysics3d.collision.CollisionDetection: void computeNarrowPhase()>": [
        {
            "<org.dyn4j.collision.broadphase.DynamicAABBTree: void validate(org.dyn4j.collision.broadphase.DynamicAABBTreeNode)>": 0.5157792356047421
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void validateStructure(org.jbox2d.collision.broadphase.DynamicTreeNode)>": 0.47941152071735066
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTreeFlatNodes: void validateStructure(int)>": 0.47296384166618166
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void validateMetrics(org.jbox2d.collision.broadphase.DynamicTreeNode)>": 0.4705767968225832
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTreeFlatNodes: void validateMetrics(int)>": 0.4657676574878246
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Matrix3x3: float getTrace()>": [
        {
            "<org.jbox2d.dynamics.joints.GearJoint: float getReactionTorque(float)>": 0.4549278395707633
        }, 
        {
            "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 multiply(com.flowpowered.react.math.Matrix4x4,com.flowpowered.react.math.Matrix4x4)>": 0.4501245183999251
        }, 
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.4474079164557161
        }, 
        {
            "<org.jbox2d.particle.ParticleSystem: float getParticleInvMass()>": 0.44645870720928404
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.44631901243577743
        }
    ], 
    "<net.smert.jreactphysics3d.collision.shapes.AABB: boolean testCollision(net.smert.jreactphysics3d.collision.shapes.AABB)>": [
        {
            "<Catalano.Math.Vector3: float getMin()>": 0.36761883200327283
        }, 
        {
            "<Catalano.Math.Vector3: float getMax()>": 0.36761883200327283
        }, 
        {
            "<Catalano.Math.Vector4: boolean equals(java.lang.Object)>": 0.36748402627371757
        }, 
        {
            "<boofcv.alg.distort.DistortImageOps: void updateBoundBox(boofcv.struct.distort.PixelTransform_F32,boofcv.struct.ImageRectangle_F32)>": 0.36411568155112284
        }, 
        {
            "<Catalano.Math.Vector3: boolean equals(java.lang.Object)>": 0.35463262494407893
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 set(float,float,float,float,float,float,float,float,float)>": [
        {
            "<org.jbox2d.common.MathUtils: float clamp(float,float,float)>": 0.5189890701154346
        }, 
        {
            "<org.jbox2d.dynamics.contacts.Contact: float mixFriction(float,float)>": 0.5154786370001371
        }, 
        {
            "<org.jbox2d.common.Settings: float mixFriction(float,float)>": 0.5154786370001371
        }, 
        {
            "<boofcv.alg.color.ColorRgb: float rgbToGray_Weighted(float,float,float)>": 0.5003380914487278
        }, 
        {
            "<Catalano.Math.Matrix3x3: void <init>(float,float,float,float,float,float,float,float,float)>": 0.4959282588496421
        }
    ], 
    "<net.smert.jreactphysics3d.engine.Timer: void update()>": [
        {
            "<boofcv.alg.tracker.tld.TldFernClassifier: int computeFernValueRand(float,float,float,float,boofcv.alg.tracker.tld.TldFernDescription)>": 0.39520469388003504
        }, 
        {
            "<org.jbox2d.testbed.perf.MathPerf: void runPowTest(float)>": 0.3914245467494254
        }, 
        {
            "<org.jbox2d.testbed.perf.MathPerf: void runAtan2Test(float)>": 0.3914245467494254
        }, 
        {
            "<Catalano.Math.Geometry.Line: float GetAngleBetweenLines(Catalano.Math.Geometry.Line)>": 0.37503852470942045
        }, 
        {
            "<com.flowpowered.react.math.Matrix4x4: float determinant3x3(float,float,float,float,float,float,float,float,float)>": 0.3623627315688473
        }
    ], 
    "<net.smert.jreactphysics3d.collision.broadphase.Utils: long encodeFloatIntoInteger(float)>": [
        {
            "<com.flowpowered.react.collision.broadphase.SweepAndPruneAlgorithm: long encodeFloatIntoInteger(float)>": 1.0
        }, 
        {
            "<Catalano.Math.Approximation: long abs(long)>": 0.2960723604758609
        }, 
        {
            "<net.imglib2.type.numeric.integer.UnsignedIntType: long get()>": 0.27981113200466695
        }, 
        {
            "<net.imglib2.type.numeric.ARGBType: int rgba(float,float,float,float)>": 0.273502620760706
        }, 
        {
            "<net.imglib2.position.transform.FloorOffset: long f(float,long)>": 0.26505985986534597
        }
    ], 
    "<net.smert.jreactphysics3d.engine.OverlappingPair: void setCachedSeparatingAxis(net.smert.jreactphysics3d.mathematics.Vector3)>": [
        {
            "<Catalano.Imaging.Filters.GaussianBlur: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Concurrent.Filters.BradleyLocalThreshold: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.CosineTransform: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.BradleyLocalThreshold: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.UnsharpMasking: void <init>()>": 0.018184824186332698
        }
    ], 
    "<net.smert.jreactphysics3d.collision.shapes.SphereShape: void <init>(net.smert.jreactphysics3d.collision.shapes.SphereShape)>": [
        {
            "<org.jbox2d.common.Vec2: void absLocal()>": 0.2225556433377629
        }, 
        {
            "<com.flowpowered.react.math.Vector4: com.flowpowered.react.math.Vector4 negate()>": 0.21914951520528714
        }, 
        {
            "<com.flowpowered.react.math.Quaternion: void <init>(float,com.flowpowered.react.math.Vector3)>": 0.21831074106921078
        }, 
        {
            "<org.jbox2d.testbed.perf.MathPerf: void runSinLUTTest(float)>": 0.21806014602089235
        }, 
        {
            "<com.flowpowered.react.math.Vector3: com.flowpowered.react.math.Vector3 negate()>": 0.217753253905938
        }
    ], 
    "<net.smert.jreactphysics3d.body.RigidBody: void setInertiaTensorLocal(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": [
        {
            "<Catalano.Imaging.Filters.GaussianBlur: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Concurrent.Filters.BradleyLocalThreshold: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.CosineTransform: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.BradleyLocalThreshold: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.UnsharpMasking: void <init>()>": 0.018184824186332698
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Vector2: int getMinAxis()>": [
        {
            "<com.flowpowered.react.math.Vector2: int getMinAxis()>": 0.5697916666666667
        }, 
        {
            "<Catalano.Math.Vector3: int getMinIndex()>": 0.48445336197710626
        }, 
        {
            "<Catalano.Math.Vector3: int getMaxIndex()>": 0.48445336197710626
        }, 
        {
            "<com.flowpowered.react.math.Vector3: int getMinAxis()>": 0.48445336197710626
        }, 
        {
            "<com.flowpowered.react.math.Vector3: int getMaxAxis()>": 0.4354989515435984
        }
    ], 
    "<net.smert.jreactphysics3d.engine.ConstraintSolver: void solvePositionConstraints(net.smert.jreactphysics3d.engine.Island)>": [
        {
            "<net.imglib2.AbstractInterval: long min(int)>": 0.6114074075275067
        }, 
        {
            "<net.imglib2.AbstractInterval: long max(int)>": 0.6114074075275067
        }, 
        {
            "<net.imglib2.AbstractInterval: double realMax(int)>": 0.6023745223337694
        }, 
        {
            "<net.imglib2.AbstractInterval: double realMin(int)>": 0.6023745223337694
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void validate()>": 0.5924579023163371
        }
    ], 
    "<net.smert.jreactphysics3d.engine.DynamicsWorld: void setSleepAngularVelocity(float)>": [
        {
            "<org.jbox2d.dynamics.joints.FrictionJoint: void setMaxTorque(float)>": 0.7178030303030303
        }, 
        {
            "<org.jbox2d.dynamics.joints.MotorJoint: void setMaxForce(float)>": 0.7178030303030303
        }, 
        {
            "<org.jbox2d.dynamics.joints.FrictionJoint: void setMaxForce(float)>": 0.7178030303030303
        }, 
        {
            "<org.jbox2d.dynamics.joints.MotorJoint: void setMaxTorque(float)>": 0.7178030303030303
        }, 
        {
            "<org.jbox2d.dynamics.Fixture: void setDensity(float)>": 0.7178030303030303
        }
    ], 
    "<net.smert.jreactphysics3d.engine.Profiler: void PrintRecursiveNodeReport(net.smert.jreactphysics3d.engine.ProfileNodeIterator,int,int)>": [
        {
            "<boofcv.app.CameraCalibration: void process()>": 0.4195501063955586
        }, 
        {
            "<boofcv.app.FiducialDetection: void printHelp()>": 0.4105921552912132
        }, 
        {
            "<boofcv.app.CameraCalibration: void printHelp()>": 0.4079139279157724
        }, 
        {
            "<boofcv.app.BatchDownSizeImage: void printHelpAndExit(java.lang.String[])>": 0.4049288289528955
        }, 
        {
            "<boofcv.app.BaseStandardInputApp: void printInputHelp()>": 0.3978604937696237
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Quaternion: float length()>": [
        {
            "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 multiply(com.flowpowered.react.math.Matrix4x4,com.flowpowered.react.math.Matrix4x4)>": 0.5411309785008666
        }, 
        {
            "<org.jbox2d.common.Vec2: float length()>": 0.5350702496675257
        }, 
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.531141839952759
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.5300946396356832
        }, 
        {
            "<org.jbox2d.dynamics.contacts.PositionSolverManifold: void initialize(org.jbox2d.dynamics.contacts.ContactPositionConstraint,org.jbox2d.common.Transform,org.jbox2d.common.Transform,int)>": 0.5219437357319342
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Vector2 multiply(net.smert.jreactphysics3d.mathematics.Vector2,net.smert.jreactphysics3d.mathematics.Vector2)>": [
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.4349692744208905
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.43405035536715386
        }, 
        {
            "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 multiply(com.flowpowered.react.math.Matrix4x4,com.flowpowered.react.math.Matrix4x4)>": 0.43103531723550004
        }, 
        {
            "<com.flowpowered.react.math.Quaternion: void inverse()>": 0.4307672573411392
        }, 
        {
            "<org.jbox2d.particle.ParticleSystem: void raycast(org.jbox2d.callbacks.ParticleRaycastCallback,org.jbox2d.common.Vec2,org.jbox2d.common.Vec2)>": 0.4273315841147616
        }
    ], 
    "<net.smert.jreactphysics3d.engine.ContactManifoldListElement: void <init>(net.smert.jreactphysics3d.engine.ContactManifold,net.smert.jreactphysics3d.engine.ContactManifoldListElement)>": [
        {
            "<org.dyn4j.sandbox.panels.LineGraphPanel: void setStaticSize(java.awt.Dimension)>": 0.049690399499995326
        }, 
        {
            "<org.jbox2d.testbed.tests.DrawingParticles: void step(org.jbox2d.testbed.framework.TestbedSettings)>": 0.048112522432468816
        }, 
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.04768498915339404
        }, 
        {
            "<boofcv.gui.feature.SelectRegionDescriptionPanel: void <init>()>": 0.047178209756024825
        }, 
        {
            "<boofcv.gui.d3.Polygon3DSequenceViewer: void <init>()>": 0.046704044859817086
        }
    ], 
    "<net.smert.jreactphysics3d.engine.ContactManifold: void clear()>": [
        {
            "<Catalano.Math.Tools: int Sum(int[])>": 0.41753840021783933
        }, 
        {
            "<boofcv.alg.transform.wavelet.UtilWavelet: int sumCoefficients(int[])>": 0.41753840021783933
        }, 
        {
            "<boofcv.struct.convolve.Kernel2D_I32: int computeSum()>": 0.385990108971994
        }, 
        {
            "<boofcv.struct.convolve.Kernel1D_I32: int computeSum()>": 0.38330186268428307
        }, 
        {
            "<org.jbox2d.dynamics.Fixture: void destroyProxies(org.jbox2d.collision.broadphase.BroadPhase)>": 0.3626975112856185
        }
    ], 
    "<net.smert.jreactphysics3d.collision.shapes.ConvexMeshShape: net.smert.jreactphysics3d.mathematics.Vector3 getLocalSupportPointWithoutMargin(net.smert.jreactphysics3d.mathematics.Vector3,net.smert.jreactphysics3d.mathematics.Vector3)>": [
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void validate()>": 0.4078247372690652
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTreeFlatNodes: void validate()>": 0.39922869391744875
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void rebuildBottomUp()>": 0.3963225506389086
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void validateMetrics(org.jbox2d.collision.broadphase.DynamicTreeNode)>": 0.38982404530038617
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void validateStructure(org.jbox2d.collision.broadphase.DynamicTreeNode)>": 0.383686713552172
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Transform: net.smert.jreactphysics3d.mathematics.Transform fromOpenGL(float[])>": [
        {
            "<org.dyn4j.sandbox.utilities.ColorUtilities: java.awt.Color convertColor(float[])>": 0.36809785224575137
        }, 
        {
            "<org.dyn4j.sandbox.SandboxBody: void setOutlineColor(com.jogamp.opengl.GL2)>": 0.2824381695771401
        }, 
        {
            "<boofcv.alg.filter.kernel.KernelMath: boolean isEqualsFrac(float[],float[],int,float,float)>": 0.252061629053788
        }, 
        {
            "<boofcv.alg.filter.kernel.KernelMath: boolean isEquals(float[],float[],int,float)>": 0.24353590779770024
        }, 
        {
            "<boofcv.alg.interpolate.array.LagrangeFormula: float process_F32(float,float[],float[],int,int)>": 0.23421981118230045
        }
    ], 
    "<net.smert.jreactphysics3d.engine.ProfileNodeIterator: java.lang.String getCurrentParentName()>": [
        {
            "<org.dyn4j.sandbox.resources.Messages: java.lang.String getString(java.lang.String)>": 0.3100041420236116
        }, 
        {
            "<net.coobird.thumbnailator.name.Rename$2: java.lang.String apply(java.lang.String,net.coobird.thumbnailator.ThumbnailParameter)>": 0.2942866099069123
        }, 
        {
            "<net.coobird.thumbnailator.name.Rename$3: java.lang.String apply(java.lang.String,net.coobird.thumbnailator.ThumbnailParameter)>": 0.2942866099069123
        }, 
        {
            "<net.coobird.thumbnailator.name.Rename$5: java.lang.String apply(java.lang.String,net.coobird.thumbnailator.ThumbnailParameter)>": 0.2942866099069123
        }, 
        {
            "<net.coobird.thumbnailator.name.Rename$4: java.lang.String apply(java.lang.String,net.coobird.thumbnailator.ThumbnailParameter)>": 0.2942866099069123
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 multiply(float)>": [
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.43874493646245855
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.43775489116415234
        }, 
        {
            "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 multiply(com.flowpowered.react.math.Matrix4x4,com.flowpowered.react.math.Matrix4x4)>": 0.431800237922924
        }, 
        {
            "<org.jbox2d.dynamics.contacts.ContactSolver: void solveVelocityConstraints()>": 0.43177773938723985
        }, 
        {
            "<com.flowpowered.react.collision.shape.CapsuleShape: void computeLocalInertiaTensor(com.flowpowered.react.math.Matrix3x3,float)>": 0.43132662854827286
        }
    ], 
    "<net.smert.jreactphysics3d.collision.broadphase.PairManager: void shrinkMemory()>": [
        {
            "<org.jbox2d.collision.broadphase.DynamicTreeFlatNodes: void validate()>": 0.5330605569781266
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void rebuildBottomUp()>": 0.5293309607182926
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void destroyProxy(int)>": 0.5168712617228978
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void validate()>": 0.5091653409578353
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: boolean moveProxy(int,org.jbox2d.collision.AABB,org.jbox2d.common.Vec2)>": 0.49543127372700135
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Vector2: net.smert.jreactphysics3d.mathematics.Vector2 abs()>": [
        {
            "<com.flowpowered.react.math.Vector4: com.flowpowered.react.math.Vector4 negate()>": 0.5080358674937643
        }, 
        {
            "<org.jbox2d.common.Vec2: void absLocal()>": 0.5066533743679691
        }, 
        {
            "<com.flowpowered.react.math.Vector3: com.flowpowered.react.math.Vector3 negate()>": 0.5020010631649129
        }, 
        {
            "<com.flowpowered.react.math.Quaternion: void <init>(float,com.flowpowered.react.math.Vector3)>": 0.4971639362443114
        }, 
        {
            "<com.flowpowered.react.math.Quaternion: void <init>(com.flowpowered.react.math.Quaternion)>": 0.48659789375978874
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Vector2: java.lang.String toString()>": [
        {
            "<com.flowpowered.react.math.Vector2: java.lang.String toString()>": 0.6027582880941911
        }, 
        {
            "<org.jbox2d.common.Rot: java.lang.String toString()>": 0.6027582880941911
        }, 
        {
            "<org.jbox2d.common.Vec2: java.lang.String toString()>": 0.6027582880941911
        }, 
        {
            "<com.flowpowered.react.math.Vector3: java.lang.String toString()>": 0.5737803692071419
        }, 
        {
            "<org.jbox2d.common.Vec3: java.lang.String toString()>": 0.5737803692071419
        }
    ], 
    "<net.smert.jreactphysics3d.engine.ProfileNode: void reset()>": [
        {
            "<Catalano.Imaging.Filters.HistogramShrink: void <init>()>": 0.08579879053049577
        }, 
        {
            "<Catalano.Imaging.Filters.HistogramStretch: void <init>()>": 0.08579879053049577
        }, 
        {
            "<Catalano.Math.Tools: float Sum(float[])>": 0.08228468964452088
        }, 
        {
            "<Catalano.Imaging.Concurrent.Filters.SobelEdgeDetector: void <init>()>": 0.08218203247381764
        }, 
        {
            "<boofcv.gui.tracker.TrackerObjectQuadPanel: void enterSelectMode()>": 0.08218203247381764
        }
    ], 
    "<net.smert.jreactphysics3d.constraint.JointType: net.smert.jreactphysics3d.constraint.JointType valueOf(java.lang.String)>": [
        {
            "<Catalano.Statistics.Analysis.PrincipalComponentAnalysis$AnalysisMethod: Catalano.Statistics.Analysis.PrincipalComponentAnalysis$AnalysisMethod valueOf(java.lang.String)>": 0.260989010989011
        }, 
        {
            "<Catalano.Imaging.Filters.ExtractBoundary$Algorithm: Catalano.Imaging.Filters.ExtractBoundary$Algorithm valueOf(java.lang.String)>": 0.260989010989011
        }, 
        {
            "<Catalano.Imaging.FastBitmap$CoordinateSystem: Catalano.Imaging.FastBitmap$CoordinateSystem valueOf(java.lang.String)>": 0.260989010989011
        }, 
        {
            "<Catalano.Imaging.Filters.ExtractRGBChannel$Channel: Catalano.Imaging.Filters.ExtractRGBChannel$Channel valueOf(java.lang.String)>": 0.260989010989011
        }, 
        {
            "<Catalano.Imaging.Filters.ExtractYCbCrChannel$Channel: Catalano.Imaging.Filters.ExtractYCbCrChannel$Channel valueOf(java.lang.String)>": 0.260989010989011
        }
    ], 
    "<net.smert.jreactphysics3d.constraint.HingeJoint: void enableLimit(boolean)>": [
        {
            "<Catalano.Imaging.Filters.Mirror: void <init>(boolean,boolean)>": 0.23512003652927826
        }, 
        {
            "<boofcv.alg.feature.detect.extract.NonMaxBlock: void <init>(boolean,boolean)>": 0.23512003652927826
        }, 
        {
            "<boofcv.gui.calibration.CalibratedImageGridPanel: void setDisplay(boolean,boolean,boolean,boolean,boolean,double)>": 0.22865133265544454
        }, 
        {
            "<boofcv.demonstrations.calibration.SubpixelGridTargetDisplay: void setShow(boolean,boolean)>": 0.22806853641132135
        }, 
        {
            "<boofcv.gui.VideoProcessAppBase: void setPause(boolean)>": 0.22700567010160635
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Matrix2x2: void <init>(float,float,float,float)>": [
        {
            "<com.flowpowered.react.math.Vector4: void <init>(float,float,float,float)>": 0.6180618128461138
        }, 
        {
            "<com.flowpowered.react.math.Quaternion: void <init>(float,float,float,float)>": 0.6180618128461138
        }, 
        {
            "<com.flowpowered.react.math.Vector3: void <init>(float,float,float)>": 0.6096428276718958
        }, 
        {
            "<org.jbox2d.testbed.pooling.ColorKey: void set(float,float,float)>": 0.5931139020795722
        }, 
        {
            "<com.flowpowered.react.math.Vector2: void <init>(float,float)>": 0.587286033968297
        }
    ], 
    "<net.smert.jreactphysics3d.constraint.JointListElement: void <init>(net.smert.jreactphysics3d.constraint.Joint,net.smert.jreactphysics3d.constraint.JointListElement)>": [
        {
            "<org.dyn4j.sandbox.panels.LineGraphPanel: void setStaticSize(java.awt.Dimension)>": 0.049690399499995326
        }, 
        {
            "<org.jbox2d.testbed.tests.DrawingParticles: void step(org.jbox2d.testbed.framework.TestbedSettings)>": 0.048112522432468816
        }, 
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.04768498915339404
        }, 
        {
            "<boofcv.gui.feature.SelectRegionDescriptionPanel: void <init>()>": 0.047178209756024825
        }, 
        {
            "<boofcv.gui.d3.Polygon3DSequenceViewer: void <init>()>": 0.046704044859817086
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Matrix2x2: float getTrace()>": [
        {
            "<com.flowpowered.react.collision.shape.CylinderShape: float getHeight()>": 0.45845768560471395
        }, 
        {
            "<com.flowpowered.react.collision.shape.ConeShape: float getHeight()>": 0.45845768560471395
        }, 
        {
            "<com.flowpowered.react.collision.shape.CapsuleShape: float getHeight()>": 0.45845768560471395
        }, 
        {
            "<com.flowpowered.react.constraint.SliderJoint: float getMotorForce(float)>": 0.45689824646984484
        }, 
        {
            "<com.flowpowered.react.constraint.HingeJoint: float getMotorTorque(float)>": 0.45689824646984484
        }
    ], 
    "<net.smert.jreactphysics3d.engine.DynamicsWorld: net.smert.jreactphysics3d.body.RigidBody createRigidBody(net.smert.jreactphysics3d.mathematics.Transform,float,net.smert.jreactphysics3d.mathematics.Matrix3x3,net.smert.jreactphysics3d.collision.shapes.CollisionShape)>": [
        {
            "<net.imglib2.AbstractInterval: long min(int)>": 0.48315360702255816
        }, 
        {
            "<net.imglib2.AbstractInterval: long max(int)>": 0.48315360702255816
        }, 
        {
            "<net.imglib2.AbstractInterval: double realMax(int)>": 0.47588082776602814
        }, 
        {
            "<net.imglib2.AbstractInterval: double realMin(int)>": 0.47588082776602814
        }, 
        {
            "<org.dyn4j.collision.broadphase.DynamicAABBTree: void validate(org.dyn4j.collision.broadphase.DynamicAABBTreeNode)>": 0.46375686513509606
        }
    ], 
    "<net.smert.jreactphysics3d.collision.shapes.CollisionShape: int hashCode()>": [
        {
            "<Catalano.Core.FloatPoint: int hashCode()>": 0.4445217755897678
        }, 
        {
            "<com.flowpowered.react.math.Quaternion: int hashCode()>": 0.43892616646001004
        }, 
        {
            "<Catalano.Core.IntPoint: int hashCode()>": 0.43827354344872393
        }, 
        {
            "<com.flowpowered.react.math.Vector4: int hashCode()>": 0.4229287416054584
        }, 
        {
            "<org.jbox2d.testbed.pooling.ColorKey: int hashCode()>": 0.4229287416054584
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Vector2: void <init>(float,float)>": [
        {
            "<com.flowpowered.react.math.Vector4: void <init>(float,float,float,float)>": 0.5763194972616278
        }, 
        {
            "<com.flowpowered.react.math.Quaternion: void <init>(float,float,float,float)>": 0.5763194972616278
        }, 
        {
            "<com.flowpowered.react.math.Vector3: void <init>(float,float,float)>": 0.5691254094499493
        }, 
        {
            "<org.jbox2d.testbed.pooling.ColorKey: void set(float,float,float)>": 0.5524698130096914
        }, 
        {
            "<com.flowpowered.react.math.Vector2: void <init>(float,float)>": 0.5495722471111559
        }
    ], 
    "<net.smert.jreactphysics3d.engine.DynamicsWorld: void destroyRigidBody(net.smert.jreactphysics3d.body.RigidBody)>": [
        {
            "<org.dyn4j.collision.broadphase.DynamicAABBTree: void validate(org.dyn4j.collision.broadphase.DynamicAABBTreeNode)>": 0.22622013963077456
        }, 
        {
            "<net.imglib2.transform.integer.SlicingTransform: boolean getComponentZero(int)>": 0.22381451910997385
        }, 
        {
            "<net.imglib2.transform.integer.MixedTransform: boolean getComponentZero(int)>": 0.22381451910997385
        }, 
        {
            "<net.imglib2.transform.integer.MixedTransform: boolean getComponentInversion(int)>": 0.22381451910997385
        }, 
        {
            "<org.dyn4j.sandbox.Sandbox: void renderBody(com.jogamp.opengl.GL2,org.dyn4j.sandbox.SandboxBody)>": 0.22096768772407874
        }
    ], 
    "<net.smert.jreactphysics3d.collision.broadphase.SweepAndPruneAlgorithm: void updateObjectIntegerAABB(net.smert.jreactphysics3d.body.CollisionBody,net.smert.jreactphysics3d.collision.broadphase.AABBInt)>": [
        {
            "<org.jbox2d.collision.broadphase.DynamicTreeFlatNodes: int getMaxBalance()>": 0.5626383219375886
        }, 
        {
            "<boofcv.alg.fiducial.calib.squares.RegularClustersIntoGrids: int checkNumberOfConnections(java.util.List)>": 0.5378786591849831
        }, 
        {
            "<Catalano.Math.Dissimilarities.Dissimilarity: double SokalMichener(int[],int[])>": 0.5279690715630613
        }, 
        {
            "<Catalano.Math.Dissimilarities.Dissimilarity: double RogersTanimoto(int[],int[])>": 0.5279690715630613
        }, 
        {
            "<Catalano.Math.Dissimilarities.Dissimilarity: double Yule(int[],int[])>": 0.5245899326604102
        }
    ], 
    "<net.smert.jreactphysics3d.collision.shapes.SphereShape: boolean isEqualTo(net.smert.jreactphysics3d.collision.shapes.CollisionShape)>": [
        {
            "<Catalano.Core.FloatRange: boolean IsOverlapping(Catalano.Core.FloatRange)>": 0.5476118153724757
        }, 
        {
            "<Catalano.Math.Geometry.Line: boolean isHorizontal()>": 0.5193114100524292
        }, 
        {
            "<com.flowpowered.react.collision.shape.SphereShape: boolean isEqualTo(com.flowpowered.react.collision.shape.CollisionShape)>": 0.5114583333333333
        }, 
        {
            "<Catalano.Core.FloatRange: boolean isInside(float)>": 0.4870389259649477
        }, 
        {
            "<boofcv.struct.flow.ImageFlow$D: boolean isValid()>": 0.4831433950024512
        }
    ], 
    "<net.smert.jreactphysics3d.body.RigidBody: void setMassInverse(float)>": [
        {
            "<org.jbox2d.dynamics.joints.FrictionJoint: void setMaxTorque(float)>": 0.7178030303030303
        }, 
        {
            "<org.jbox2d.dynamics.joints.MotorJoint: void setMaxForce(float)>": 0.7178030303030303
        }, 
        {
            "<org.jbox2d.dynamics.joints.FrictionJoint: void setMaxForce(float)>": 0.7178030303030303
        }, 
        {
            "<org.jbox2d.dynamics.joints.MotorJoint: void setMaxTorque(float)>": 0.7178030303030303
        }, 
        {
            "<org.jbox2d.dynamics.Fixture: void setDensity(float)>": 0.7178030303030303
        }
    ], 
    "<net.smert.jreactphysics3d.collision.broadphase.AABBInt: void <init>(net.smert.jreactphysics3d.collision.shapes.AABB)>": [
        {
            "<com.flowpowered.react.collision.broadphase.SweepAndPruneAlgorithm$AABBInt: void <init>(com.flowpowered.react.collision.shape.AABB)>": 0.3798738272833079
        }, 
        {
            "<com.flowpowered.react.collision.broadphase.SweepAndPruneAlgorithm$AABBInt: void <init>(com.flowpowered.react.collision.shape.AABB,com.flowpowered.react.collision.broadphase.SweepAndPruneAlgorithm$1)>": 0.3764006805795395
        }, 
        {
            "<com.flowpowered.react.collision.broadphase.SweepAndPruneAlgorithm$AABBInt: void <init>(long,long,com.flowpowered.react.collision.broadphase.SweepAndPruneAlgorithm$1)>": 0.2361477060856758
        }, 
        {
            "<com.flowpowered.react.collision.broadphase.SweepAndPruneAlgorithm$AABBInt: void <init>(long,long)>": 0.23610691344708185
        }, 
        {
            "<org.jbox2d.particle.ParticleSystem: long computeTag(float,float)>": 0.21120215612421098
        }
    ], 
    "<net.smert.jreactphysics3d.collision.shapes.CollisionShape: void <init>(net.smert.jreactphysics3d.collision.shapes.CollisionShape)>": [
        {
            "<boofcv.alg.feature.dense.DescribeDenseHogAlg: void computeCellHistograms()>": 0.22821179956052307
        }, 
        {
            "<boofcv.alg.flow.DenseOpticalFlowBlockPyramid: void checkNeighbors(int,int,boofcv.struct.flow.ImageFlow$D,boofcv.struct.flow.ImageFlow,float)>": 0.22725315123206385
        }, 
        {
            "<Catalano.Imaging.Filters.UnsharpMasking: void <init>(int,float)>": 0.22351026233061788
        }, 
        {
            "<boofcv.alg.flow.DenseOpticalFlowKlt: void process(boofcv.struct.pyramid.ImagePyramid,boofcv.struct.image.ImageGray[],boofcv.struct.image.ImageGray[],boofcv.struct.pyramid.ImagePyramid,boofcv.struct.flow.ImageFlow)>": 0.22243054159006495
        }, 
        {
            "<boofcv.alg.feature.detect.template.TemplateNCC$F32: void setupTemplate(boofcv.struct.image.GrayF32)>": 0.22123281192640962
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Transform: net.smert.jreactphysics3d.mathematics.Transform identity()>": [
        {
            "<Catalano.Imaging.Filters.GaussianBlur: void <init>()>": 0.019702760155977515
        }, 
        {
            "<Catalano.Imaging.Concurrent.Filters.BradleyLocalThreshold: void <init>()>": 0.019702760155977515
        }, 
        {
            "<Catalano.Imaging.Filters.CosineTransform: void <init>()>": 0.019702760155977515
        }, 
        {
            "<Catalano.Imaging.Filters.BradleyLocalThreshold: void <init>()>": 0.019702760155977515
        }, 
        {
            "<Catalano.Imaging.Filters.UnsharpMasking: void <init>()>": 0.019702760155977515
        }
    ], 
    "<net.smert.jreactphysics3d.collision.broadphase.PairManager: int computeHashBodies(int,int)>": [
        {
            "<com.flowpowered.react.collision.broadphase.PairManager: int computeHashBodies(int,int)>": 0.9456518133569217
        }, 
        {
            "<com.flowpowered.react.collision.broadphase.PairManager: int computeHash32Bits(int)>": 0.765570953740891
        }, 
        {
            "<com.flowpowered.react.collision.broadphase.PairManager: com.flowpowered.react.collision.broadphase.PairManager$BodyPair addPair(com.flowpowered.react.body.CollisionBody,com.flowpowered.react.body.CollisionBody)>": 0.633769185167292
        }, 
        {
            "<com.flowpowered.react.collision.broadphase.PairManager: com.flowpowered.react.collision.broadphase.PairManager$BodyPair findPair(int,int)>": 0.6129947482598213
        }, 
        {
            "<com.flowpowered.react.collision.broadphase.PairManager: void reallocatePairs()>": 0.6107691652757393
        }
    ], 
    "<net.smert.jreactphysics3d.engine.Island: void addContactManifold(net.smert.jreactphysics3d.engine.ContactManifold)>": [
        {
            "<Catalano.Imaging.Tools.BlobDetection: void ShuffleColor()>": 0.3389044739320369
        }, 
        {
            "<Catalano.Statistics.Kernels.Polynomial: void setDegree(int)>": 0.32202941451867023
        }, 
        {
            "<Catalano.Statistics.Kernels.NormalizedPolynomial: void setDegree(int)>": 0.32202941451867023
        }, 
        {
            "<Catalano.Imaging.Concurrent.Filters.FastVariance: void setRadius(int)>": 0.32202941451867023
        }, 
        {
            "<Catalano.Imaging.Concurrent.Filters.Minimum: void setRadius(int)>": 0.32202941451867023
        }
    ], 
    "<net.smert.jreactphysics3d.collision.shapes.ConvexMeshShape: net.smert.jreactphysics3d.mathematics.Vector3 getLocalSupportPointWithMargin(net.smert.jreactphysics3d.mathematics.Vector3,net.smert.jreactphysics3d.mathematics.Vector3)>": [
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void validate()>": 0.36556120411222065
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTreeFlatNodes: void validate()>": 0.3570847005344516
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void rebuildBottomUp()>": 0.3550430667948144
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void validateMetrics(org.jbox2d.collision.broadphase.DynamicTreeNode)>": 0.3494734112026797
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void validateStructure(org.jbox2d.collision.broadphase.DynamicTreeNode)>": 0.34606856940074465
        }
    ], 
    "<net.smert.jreactphysics3d.collision.shapes.ConeShape: void computeLocalInertiaTensor(net.smert.jreactphysics3d.mathematics.Matrix3x3,float)>": [
        {
            "<com.flowpowered.react.collision.shape.ConeShape: void computeLocalInertiaTensor(com.flowpowered.react.math.Matrix3x3,float)>": 0.439864415287596
        }, 
        {
            "<org.jbox2d.common.MathUtils: float clamp(float,float,float)>": 0.3889221714227493
        }, 
        {
            "<org.jbox2d.dynamics.contacts.Contact: float mixFriction(float,float)>": 0.3887108347724042
        }, 
        {
            "<org.jbox2d.common.Settings: float mixFriction(float,float)>": 0.3887108347724042
        }, 
        {
            "<org.jbox2d.testbed.perf.MathPerf: void runSinLUTTest(float)>": 0.379904026616533
        }
    ], 
    "<net.smert.jreactphysics3d.body.RigidBody: void setMaterial(net.smert.jreactphysics3d.engine.Material)>": [
        {
            "<org.dyn4j.sandbox.panels.LineGraphPanel: void setStaticSize(java.awt.Dimension)>": 0.05923488777590923
        }, 
        {
            "<org.jbox2d.testbed.tests.DrawingParticles: void step(org.jbox2d.testbed.framework.TestbedSettings)>": 0.057353933467640436
        }, 
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.05684427997196944
        }, 
        {
            "<boofcv.gui.feature.SelectRegionDescriptionPanel: void <init>()>": 0.05624015883323094
        }, 
        {
            "<boofcv.gui.d3.Polygon3DSequenceViewer: void <init>()>": 0.055674916760380555
        }
    ], 
    "<net.smert.jreactphysics3d.collision.BodyIndexPair: boolean equals(java.lang.Object)>": [
        {
            "<net.coobird.thumbnailator.util.exif.IfdStructure: boolean equals(java.lang.Object)>": 0.4210982292507745
        }, 
        {
            "<Catalano.Imaging.Filters.BinaryWatershed: boolean isWithin(int,int,int,int,int)>": 0.41106039722403154
        }, 
        {
            "<org.dyn4j.dynamics.Capacity: boolean equals(java.lang.Object)>": 0.4086008664614612
        }, 
        {
            "<Catalano.Core.IntRange: boolean equals(java.lang.Object)>": 0.3943582593391242
        }, 
        {
            "<com.flowpowered.react.body.Body: boolean equals(java.lang.Object)>": 0.3877735737196134
        }
    ], 
    "<net.smert.jreactphysics3d.collision.broadphase.BroadPhaseAlgorithm: void <init>(net.smert.jreactphysics3d.collision.CollisionDetection)>": [
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.10115513757351567
        }, 
        {
            "<org.dyn4j.sandbox.Sandbox: void init(com.jogamp.opengl.GLAutoDrawable)>": 0.09549225149960087
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.TestbedMain: void main(java.lang.String[])>": 0.09363821838346235
        }, 
        {
            "<org.dyn4j.sandbox.panels.LineGraphPanel: void setStaticSize(java.awt.Dimension)>": 0.09223309842157773
        }, 
        {
            "<boofcv.gui.d3.Polygon3DSequenceViewer: void <init>()>": 0.09199750902424841
        }
    ], 
    "<net.smert.jreactphysics3d.collision.broadphase.BoxAABB: void <init>()>": [
        {
            "<boofcv.alg.feature.describe.DescribePointBinaryCompare: void <init>(boofcv.alg.feature.describe.brief.BinaryCompareDefinition_I32)>": 0.45723323652978476
        }, 
        {
            "<boofcv.alg.interpolate.impl.ImplBilinearPixel_IL_U8: void <init>(int)>": 0.45387239109776173
        }, 
        {
            "<boofcv.alg.interpolate.impl.ImplBilinearPixel_IL_S32: void <init>(int)>": 0.45387239109776173
        }, 
        {
            "<boofcv.alg.interpolate.impl.ImplBilinearPixel_IL_S16: void <init>(int)>": 0.45387239109776173
        }, 
        {
            "<Catalano.Imaging.Texture.LawsTextureEnergy: void <init>(int[],int[])>": 0.44358974358974357
        }
    ], 
    "<net.smert.jreactphysics3d.constraint.HingeJoint: void solvePositionConstraint(net.smert.jreactphysics3d.engine.ConstraintSolverData)>": [
        {
            "<org.jbox2d.common.MathUtils: float abs(float)>": 0.1795564936815808
        }, 
        {
            "<boofcv.abst.feature.detect.extract.NonMaxLimiter$LocalExtreme: float getValue()>": 0.17809428167719876
        }, 
        {
            "<org.jbox2d.common.Vec3: void crossToOutUnsafe(org.jbox2d.common.Vec3,org.jbox2d.common.Vec3,org.jbox2d.common.Vec3)>": 0.17644792136449272
        }, 
        {
            "<org.jbox2d.collision.shapes.ChainShape: void computeAABB(org.jbox2d.collision.AABB,org.jbox2d.common.Transform,int)>": 0.1753031459178385
        }, 
        {
            "<Catalano.Math.Geometry.Line: void <init>(float,float,boolean)>": 0.1748363187159872
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Vector3: float length()>": [
        {
            "<org.jbox2d.common.Vec2: float length()>": 0.5459963803948733
        }, 
        {
            "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 multiply(com.flowpowered.react.math.Matrix4x4,com.flowpowered.react.math.Matrix4x4)>": 0.5355456354557451
        }, 
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.5258790871305085
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.5248080117259212
        }, 
        {
            "<org.jbox2d.dynamics.contacts.PositionSolverManifold: void initialize(org.jbox2d.dynamics.contacts.ContactPositionConstraint,org.jbox2d.common.Transform,org.jbox2d.common.Transform,int)>": 0.5171896570898831
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Quaternion: net.smert.jreactphysics3d.mathematics.Quaternion identity()>": [
        {
            "<Catalano.Imaging.Filters.UnsharpMasking: void setWeight(float)>": 0.23762845295103308
        }, 
        {
            "<org.jbox2d.particle.ParticleSystem: void setParticleDensity(float)>": 0.23649115667464587
        }, 
        {
            "<boofcv.alg.weights.WeightDistanceUniform_F32: void <init>(float)>": 0.23242332408618885
        }, 
        {
            "<org.jbox2d.particle.ParticleSystem: void setParticleRadius(float)>": 0.2264626884324068
        }, 
        {
            "<org.jbox2d.testbed.pooling.ColorKey: void set(float,float,float)>": 0.22067535474562483
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Vector3: void Lerp(net.smert.jreactphysics3d.mathematics.Vector3,net.smert.jreactphysics3d.mathematics.Vector3,float,net.smert.jreactphysics3d.mathematics.Vector3)>": [
        {
            "<org.jbox2d.dynamics.joints.FrictionJoint: void setMaxTorque(float)>": 0.28524052365456565
        }, 
        {
            "<org.jbox2d.dynamics.joints.MotorJoint: void setMaxForce(float)>": 0.28524052365456565
        }, 
        {
            "<org.jbox2d.dynamics.joints.FrictionJoint: void setMaxForce(float)>": 0.28524052365456565
        }, 
        {
            "<org.jbox2d.dynamics.joints.MotorJoint: void setMaxTorque(float)>": 0.28524052365456565
        }, 
        {
            "<org.jbox2d.dynamics.Fixture: void setDensity(float)>": 0.28524052365456565
        }
    ], 
    "<net.smert.jreactphysics3d.collision.shapes.ConeShape: float getHeight()>": [
        {
            "<com.flowpowered.react.collision.shape.CylinderShape: float getHeight()>": 0.4907407407407407
        }, 
        {
            "<com.flowpowered.react.collision.shape.ConeShape: float getHeight()>": 0.4907407407407407
        }, 
        {
            "<com.flowpowered.react.collision.shape.CapsuleShape: float getHeight()>": 0.4907407407407407
        }, 
        {
            "<com.flowpowered.react.constraint.SliderJoint: float getMotorForce(float)>": 0.48845356531534173
        }, 
        {
            "<com.flowpowered.react.constraint.HingeJoint: float getMotorTorque(float)>": 0.48845356531534173
        }
    ], 
    "<net.smert.jreactphysics3d.constraint.SliderJointInfo: void <init>(net.smert.jreactphysics3d.body.RigidBody,net.smert.jreactphysics3d.body.RigidBody,net.smert.jreactphysics3d.mathematics.Vector3,net.smert.jreactphysics3d.mathematics.Vector3,float,float)>": [
        {
            "<org.jbox2d.common.MathUtils: float clamp(float,float,float)>": 0.3140826236378521
        }, 
        {
            "<org.jbox2d.dynamics.contacts.Contact: float mixFriction(float,float)>": 0.312278622418633
        }, 
        {
            "<org.jbox2d.common.Settings: float mixFriction(float,float)>": 0.312278622418633
        }, 
        {
            "<boofcv.alg.color.ColorRgb: float rgbToGray_Weighted(float,float,float)>": 0.30401202356422163
        }, 
        {
            "<Catalano.Math.Matrix3x3: void <init>(float,float,float,float,float,float,float,float,float)>": 0.303580137660626
        }
    ], 
    "<net.smert.jreactphysics3d.engine.Impulse: void <init>(net.smert.jreactphysics3d.mathematics.Vector3,net.smert.jreactphysics3d.mathematics.Vector3,net.smert.jreactphysics3d.mathematics.Vector3,net.smert.jreactphysics3d.mathematics.Vector3)>": [
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.05995420341664487
        }, 
        {
            "<org.dyn4j.sandbox.Sandbox: void init(com.jogamp.opengl.GLAutoDrawable)>": 0.05556878428278657
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.TestbedMain: void main(java.lang.String[])>": 0.05549895860162588
        }, 
        {
            "<boofcv.demonstrations.transform.pyramid.EdgeIntensitiesApp: void main(java.lang.String[])>": 0.053018579459817486
        }, 
        {
            "<boofcv.demonstrations.tracker.CirculantVisualizationPanel: void <init>(boofcv.demonstrations.tracker.CirculantVisualizationPanel$Listener)>": 0.05235111965986589
        }
    ], 
    "<net.smert.jreactphysics3d.engine.DynamicsWorld: void resetBodiesForceAndTorque()>": [
        {
            "<com.flowpowered.react.engine.DynamicsWorld: void resetContactManifoldListsOfBodies()>": 0.30872110107420336
        }, 
        {
            "<com.flowpowered.react.engine.DynamicsWorld: void updateRigidBodiesAABB()>": 0.29995875287475715
        }, 
        {
            "<com.flowpowered.react.engine.DynamicsWorld: void resetBodiesMovementVariable()>": 0.2985485804363783
        }, 
        {
            "<com.flowpowered.react.engine.linked.LinkedDynamicsWorld: void clearLinkedBodies()>": 0.2882246717390419
        }, 
        {
            "<com.flowpowered.react.engine.DynamicsWorld: void enableSleeping(boolean)>": 0.2753327050823399
        }
    ], 
    "<net.smert.jreactphysics3d.collision.CollisionDetection: void computeBroadPhase()>": [
        {
            "<com.flowpowered.react.engine.DynamicsWorld: void updateRigidBodiesAABB()>": 0.39803552973112355
        }, 
        {
            "<com.flowpowered.react.engine.DynamicsWorld: void resetContactManifoldListsOfBodies()>": 0.3810188091633098
        }, 
        {
            "<com.flowpowered.react.engine.DynamicsWorld: void enableSleeping(boolean)>": 0.3762353813209911
        }, 
        {
            "<com.flowpowered.react.engine.DynamicsWorld: void resetBodiesMovementVariable()>": 0.3688790765362693
        }, 
        {
            "<com.flowpowered.react.engine.linked.LinkedDynamicsWorld: void clearLinkedBodies()>": 0.3650621042095937
        }
    ], 
    "<net.smert.jreactphysics3d.engine.Timer: void start()>": [
        {
            "<com.flowpowered.react.math.Mathematics: boolean approxEquals(float,float,float)>": 0.3524724956901241
        }, 
        {
            "<org.jbox2d.common.MathUtils: float clamp(float,float,float)>": 0.32548479690752924
        }, 
        {
            "<org.jbox2d.dynamics.contacts.Contact: float mixFriction(float,float)>": 0.323550221124887
        }, 
        {
            "<org.jbox2d.common.Settings: float mixFriction(float,float)>": 0.323550221124887
        }, 
        {
            "<boofcv.alg.color.ColorRgb: float rgbToGray_Weighted(float,float,float)>": 0.3148015029338234
        }
    ], 
    "<net.smert.jreactphysics3d.engine.ContactSolver: void applyImpulse(net.smert.jreactphysics3d.engine.Impulse,net.smert.jreactphysics3d.engine.ContactManifoldSolver)>": [
        {
            "<Catalano.Imaging.Filters.VerticalRunLengthSmoothing: void applyInPlace(Catalano.Imaging.FastBitmap)>": 0.09934998618139536
        }, 
        {
            "<Catalano.Imaging.Filters.HorizontalRunLengthSmoothing: void applyInPlace(Catalano.Imaging.FastBitmap)>": 0.09934998618139536
        }, 
        {
            "<org.dyn4j.collision.manifold.IndexedManifoldPointId: boolean equals(java.lang.Object)>": 0.09901179168284269
        }, 
        {
            "<boofcv.struct.image.ImageBase: boolean isInBounds(int,int)>": 0.09661163230397388
        }, 
        {
            "<boofcv.struct.flow.ImageFlow: boolean isInBounds(int,int)>": 0.09661163230397388
        }
    ], 
    "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: boolean isAffinelyDependent()>": [
        {
            "<Catalano.Imaging.Texture.BinaryPattern.UniformLocalBinaryPattern: boolean isUniform(int)>": 0.582118058259011
        }, 
        {
            "<com.flowpowered.react.collision.narrowphase.GJK.Simplex: boolean isAffinelyDependent()>": 0.5798827705734395
        }, 
        {
            "<net.coobird.thumbnailator.util.exif.IfdStructure: boolean isOffset()>": 0.5713820577479161
        }, 
        {
            "<com.flowpowered.react.collision.narrowphase.GJK.Simplex: boolean overlap(int,int)>": 0.5389823949636909
        }, 
        {
            "<com.flowpowered.react.collision.narrowphase.GJK.Simplex: boolean isSubset(int,int)>": 0.5389823949636909
        }
    ], 
    "<net.smert.jreactphysics3d.engine.DynamicsWorld: void integrateRigidBodiesPositions()>": [
        {
            "<Catalano.Math.Matrix: int Min(int[][])>": 0.15661237413491286
        }, 
        {
            "<Catalano.Math.Matrix: int Max(int[][])>": 0.15661237413491286
        }, 
        {
            "<Catalano.Imaging.Filters.Threshold: void applyInPlace(Catalano.Imaging.FastBitmap)>": 0.14069900741988073
        }, 
        {
            "<Catalano.Math.Matrix: float Sum(float[][])>": 0.13954134307318394
        }, 
        {
            "<Catalano.Math.Matrix: double Sum(double[][])>": 0.13819174535530038
        }
    ], 
    "<net.smert.jreactphysics3d.constraint.FixedJoint: void initBeforeSolve(net.smert.jreactphysics3d.engine.ConstraintSolverData)>": [
        {
            "<net.imglib2.view.TransformBuilder: void <init>(net.imglib2.Interval,net.imglib2.RandomAccessible)>": 0.11678206151430234
        }, 
        {
            "<boofcv.gui.DepthVideoAppBase: void mouseClicked(java.awt.event.MouseEvent)>": 0.11286731030325775
        }, 
        {
            "<boofcv.gui.StereoVideoAppBase: void mouseClicked(java.awt.event.MouseEvent)>": 0.11286731030325775
        }, 
        {
            "<org.dyn4j.sandbox.Sandbox: void renderBody(com.jogamp.opengl.GL2,org.dyn4j.sandbox.SandboxBody)>": 0.11256776212997602
        }, 
        {
            "<boofcv.factory.feature.detect.extract.FactoryFeatureExtractor: boofcv.abst.feature.detect.extract.NonMaxSuppression nonmax(boofcv.abst.feature.detect.extract.ConfigExtract)>": 0.11165676042797197
        }
    ], 
    "<net.smert.jreactphysics3d.engine.Profiler: void Reset()>": [
        {
            "<org.jbox2d.dynamics.contacts.Contact: float mixFriction(float,float)>": 0.30613640052656804
        }, 
        {
            "<org.jbox2d.common.Settings: float mixFriction(float,float)>": 0.30613640052656804
        }, 
        {
            "<org.jbox2d.common.MathUtils: float clamp(float,float,float)>": 0.30434878181199837
        }, 
        {
            "<boofcv.alg.color.ColorRgb: float rgbToGray_Weighted(float,float,float)>": 0.29712111792765
        }, 
        {
            "<boofcv.struct.RectangleRotate_F32: void <init>(float,float,float,float,float)>": 0.28761447294500897
        }
    ], 
    "<net.smert.jreactphysics3d.collision.broadphase.PairManager: net.smert.jreactphysics3d.collision.broadphase.BodyPair lookForAPair(int,int,int)>": [
        {
            "<com.flowpowered.react.collision.broadphase.PairManager: com.flowpowered.react.collision.broadphase.PairManager$BodyPair lookForAPair(int,int,int)>": 0.5218045539298599
        }, 
        {
            "<org.jbox2d.common.MathUtils: int max(int,int)>": 0.5217207940253941
        }, 
        {
            "<org.jbox2d.common.MathUtils: int min(int,int)>": 0.5217207940253941
        }, 
        {
            "<org.jbox2d.particle.ParticleSystem: int limitCapacity(int,int)>": 0.5217207940253941
        }, 
        {
            "<net.imglib2.transform.integer.ComponentMappingTransform: int getComponentMapping(int)>": 0.5206438467497294
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Matrix3x3: float getDeterminant()>": [
        {
            "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 multiply(com.flowpowered.react.math.Matrix4x4,com.flowpowered.react.math.Matrix4x4)>": 0.5415033139723732
        }, 
        {
            "<org.jbox2d.dynamics.contacts.PositionSolverManifold: void initialize(org.jbox2d.dynamics.contacts.ContactPositionConstraint,org.jbox2d.common.Transform,org.jbox2d.common.Transform,int)>": 0.5359913713940272
        }, 
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.5331936702915905
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.5321890436122279
        }, 
        {
            "<Catalano.Math.Matrix3x3: float Determinant()>": 0.5239284978815976
        }
    ], 
    "<net.smert.jreactphysics3d.engine.CollisionWorld: net.smert.jreactphysics3d.collision.shapes.CollisionShape createCollisionShape(net.smert.jreactphysics3d.collision.shapes.CollisionShape)>": [
        {
            "<boofcv.alg.filter.binary.Contour: boofcv.alg.filter.binary.Contour copy()>": 0.372121946149271
        }, 
        {
            "<boofcv.alg.feature.detect.edge.CannyEdge: void performThresholding(float,float,boofcv.struct.image.GrayU8)>": 0.34704560731529527
        }, 
        {
            "<boofcv.alg.filter.binary.BinaryImageOps: void clusterToBinary(java.util.List,boofcv.struct.image.GrayU8)>": 0.34535871866380813
        }, 
        {
            "<boofcv.gui.binary.VisualizeBinaryData: void renderExternal(java.util.List,boolean,boolean,double,java.awt.Graphics2D)>": 0.335320286805964
        }, 
        {
            "<boofcv.gui.binary.VisualizeBinaryData: java.awt.image.BufferedImage renderContours(java.util.List,int,int,int,int,java.awt.image.BufferedImage)>": 0.3283234260741478
        }
    ], 
    "<net.smert.jreactphysics3d.collision.shapes.BoxShape: void <init>(net.smert.jreactphysics3d.mathematics.Vector3,float)>": [
        {
            "<org.jbox2d.dynamics.joints.FrictionJoint: void setMaxTorque(float)>": 0.43499012893478967
        }, 
        {
            "<org.jbox2d.dynamics.joints.MotorJoint: void setMaxForce(float)>": 0.43499012893478967
        }, 
        {
            "<org.jbox2d.dynamics.joints.FrictionJoint: void setMaxForce(float)>": 0.43499012893478967
        }, 
        {
            "<org.jbox2d.dynamics.joints.MotorJoint: void setMaxTorque(float)>": 0.43499012893478967
        }, 
        {
            "<org.jbox2d.dynamics.Fixture: void setDensity(float)>": 0.43499012893478967
        }
    ], 
    "<net.smert.jreactphysics3d.body.RigidBody: void applyForceToCenter(net.smert.jreactphysics3d.mathematics.Vector3)>": [
        {
            "<org.dyn4j.dynamics.AABBBroadphaseFilter: boolean isAllowed(org.dyn4j.geometry.AABB,org.dyn4j.dynamics.Body,org.dyn4j.dynamics.BodyFixture)>": 0.11691043015725133
        }, 
        {
            "<boofcv.abst.sfm.d3.WrapVisOdomPixelDepthPnP: boolean isFault()>": 0.11653416485852638
        }, 
        {
            "<boofcv.abst.sfm.d3.VisOdomPixelDepthPnP_to_DepthVisualOdometry: boolean isFault()>": 0.11653416485852638
        }, 
        {
            "<boofcv.io.javacv.JavaCVVideoImageSequence: boolean hasNext()>": 0.11653416485852638
        }, 
        {
            "<org.dyn4j.dynamics.AABBBroadphaseFilter: boolean isAllowed(org.dyn4j.geometry.AABB,org.dyn4j.collision.Collidable,org.dyn4j.collision.Fixture)>": 0.11631196191736662
        }
    ], 
    "<net.smert.jreactphysics3d.collision.broadphase.PairManager: void removePairWithHashValue(int,int,int,int)>": [
        {
            "<com.flowpowered.react.collision.broadphase.PairManager: void removePairWithHashValue(int,int)>": 0.5580637514630934
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTreeFlatNodes: void validate()>": 0.5401695477810641
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTreeFlatNodes: void destroyProxy(int)>": 0.523414292207797
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTreeFlatNodes: int computeHeight(int)>": 0.507832328964483
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTreeFlatNodes: void validateStructure(int)>": 0.49545709772466273
        }
    ], 
    "<net.smert.jreactphysics3d.engine.DynamicsWorld: void updateOverlappingPair(net.smert.jreactphysics3d.collision.BroadPhasePair)>": [
        {
            "<net.coobird.thumbnailator.resizers.NullResizer: void <init>(java.lang.Object,java.util.Map)>": 0.1685499656158105
        }, 
        {
            "<net.coobird.thumbnailator.resizers.ProgressiveBilinearResizer: void <init>(java.util.Map)>": 0.1685499656158105
        }, 
        {
            "<net.coobird.thumbnailator.resizers.BicubicResizer: void <init>(java.util.Map)>": 0.1685499656158105
        }, 
        {
            "<net.coobird.thumbnailator.resizers.BilinearResizer: void <init>(java.util.Map)>": 0.1685499656158105
        }, 
        {
            "<com.flowpowered.react.collision.CollisionDetection: void broadPhaseNotifyRemovedOverlappingPair(com.flowpowered.react.collision.broadphase.PairManager$BodyPair)>": 0.1601601651215246
        }
    ], 
    "<net.smert.jreactphysics3d.collision.BodyIndexPair: void <init>(int,int)>": [
        {
            "<boofcv.alg.misc.PixelMath: void plus_A(int[],int,int,int,int,int,int[],int,int,int,int)>": 0.5147169131090034
        }, 
        {
            "<boofcv.alg.misc.PixelMath: void minus_B(int[],int,int,int,int,int,int[],int,int,int,int)>": 0.5147169131090034
        }, 
        {
            "<boofcv.alg.misc.PixelMath: void minus_A(int[],int,int,int,int,int,int[],int,int,int,int)>": 0.5147169131090034
        }, 
        {
            "<boofcv.alg.misc.PixelMath: void minus_A(byte[],int,int,int,int,int,byte[],int,int,int,int)>": 0.5117942040273815
        }, 
        {
            "<boofcv.alg.misc.PixelMath: void plus_A(byte[],int,int,int,int,int,byte[],int,int,int,int)>": 0.5117942040273815
        }
    ], 
    "<net.smert.jreactphysics3d.collision.broadphase.PairManager: int ComputeNextPowerOfTwo(int)>": [
        {
            "<com.flowpowered.react.collision.broadphase.PairManager: int computeNextPowerOfTwo(int)>": 1.0
        }, 
        {
            "<org.jbox2d.common.MathUtils: int nextPowerOfTwo(int)>": 1.0
        }, 
        {
            "<Catalano.Math.Tools: int NextPowerOf2(int)>": 0.8227634193258382
        }, 
        {
            "<boofcv.alg.transform.fft.DiscreteFourierTransformOps: int nextPow2(int)>": 0.5988270747197864
        }, 
        {
            "<com.flowpowered.react.collision.broadphase.PairManager: int computeHash32Bits(int)>": 0.4524467294313015
        }
    ], 
    "<net.smert.jreactphysics3d.engine.DynamicsWorld: void computeIslands()>": [
        {
            "<com.flowpowered.react.engine.DynamicsWorld: void computeIslands()>": 0.4184288579122466
        }, 
        {
            "<com.flowpowered.react.engine.DynamicsWorld: void update()>": 0.37615559196757975
        }, 
        {
            "<net.imglib2.transform.integer.SlicingTransform: boolean getComponentZero(int)>": 0.3520055302916894
        }, 
        {
            "<net.imglib2.transform.integer.MixedTransform: boolean getComponentZero(int)>": 0.3520055302916894
        }, 
        {
            "<net.imglib2.transform.integer.MixedTransform: boolean getComponentInversion(int)>": 0.3520055302916894
        }
    ], 
    "<net.smert.jreactphysics3d.body.Body: void setIsSleeping(boolean)>": [
        {
            "<com.flowpowered.react.body.Body: void setIsSleeping(boolean)>": 0.4209486166007905
        }, 
        {
            "<com.flowpowered.react.body.Body: void setIsAllowedToSleep(boolean)>": 0.38141900723033634
        }, 
        {
            "<boofcv.gui.calibration.CalibratedImageGridPanel: void setDisplay(boolean,boolean,boolean,boolean,boolean,double)>": 0.3334027409473085
        }, 
        {
            "<boofcv.demonstrations.calibration.SubpixelGridTargetDisplay: void setShow(boolean,boolean)>": 0.33228284819497533
        }, 
        {
            "<Catalano.Imaging.Filters.Mirror: void <init>(boolean,boolean)>": 0.32545626765365904
        }
    ], 
    "<net.smert.jreactphysics3d.constraint.ContactPoint: void <init>(net.smert.jreactphysics3d.constraint.ContactPointInfo)>": [
        {
            "<org.jbox2d.dynamics.joints.FrictionJoint: void setMaxTorque(float)>": 0.17180390464598236
        }, 
        {
            "<org.jbox2d.dynamics.joints.MotorJoint: void setMaxForce(float)>": 0.17180390464598236
        }, 
        {
            "<org.jbox2d.dynamics.joints.FrictionJoint: void setMaxForce(float)>": 0.17180390464598236
        }, 
        {
            "<org.jbox2d.dynamics.joints.MotorJoint: void setMaxTorque(float)>": 0.17180390464598236
        }, 
        {
            "<org.jbox2d.dynamics.Fixture: void setDensity(float)>": 0.17180390464598236
        }
    ], 
    "<net.smert.jreactphysics3d.constraint.HingeJoint: void <init>(net.smert.jreactphysics3d.constraint.HingeJointInfo)>": [
        {
            "<org.jbox2d.common.Rot: void mulUnsafe(org.jbox2d.common.Rot,org.jbox2d.common.Rot,org.jbox2d.common.Rot)>": 0.20210377656897352
        }, 
        {
            "<org.jbox2d.dynamics.joints.FrictionJoint: void setMaxTorque(float)>": 0.19794685933612957
        }, 
        {
            "<org.jbox2d.dynamics.joints.MotorJoint: void setMaxForce(float)>": 0.19794685933612957
        }, 
        {
            "<org.jbox2d.dynamics.joints.FrictionJoint: void setMaxForce(float)>": 0.19794685933612957
        }, 
        {
            "<org.jbox2d.dynamics.joints.MotorJoint: void setMaxTorque(float)>": 0.19794685933612957
        }
    ], 
    "<net.smert.jreactphysics3d.engine.ContactManifold: void removeContactPoint(int)>": [
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void rebuildBottomUp()>": 0.6095719300726669
        }, 
        {
            "<net.imglib2.AbstractInterval: long min(int)>": 0.6031105219865636
        }, 
        {
            "<net.imglib2.AbstractInterval: long max(int)>": 0.6031105219865636
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTreeFlatNodes: void freeNode(int)>": 0.5988261476424737
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void validate()>": 0.5962917377774688
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Transform: net.smert.jreactphysics3d.mathematics.Transform inverse()>": [
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.0417334232246221
        }, 
        {
            "<org.dyn4j.sandbox.Sandbox: void init(com.jogamp.opengl.GLAutoDrawable)>": 0.039397094819910584
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.TestbedMain: void main(java.lang.String[])>": 0.03863217916100952
        }, 
        {
            "<org.dyn4j.sandbox.panels.LineGraphPanel: void setStaticSize(java.awt.Dimension)>": 0.03805247092811746
        }, 
        {
            "<boofcv.gui.d3.Polygon3DSequenceViewer: void <init>()>": 0.03795527416419796
        }
    ], 
    "<net.smert.jreactphysics3d.collision.narrowphase.EPA.EdgeEPA: int indexOfNextCounterClockwiseEdge(int)>": [
        {
            "<com.flowpowered.react.collision.narrowphase.EPA.EdgeEPA: int indexOfNextCounterClockwiseEdge(int)>": 0.9026631481046514
        }, 
        {
            "<Catalano.Math.Tools: int Pow2(int)>": 0.515764403971776
        }, 
        {
            "<Catalano.Imaging.Filters.GaussianBlur: void setSize(int)>": 0.5088235992409497
        }, 
        {
            "<Catalano.Math.Tools: int PreviousPowerOf2(int)>": 0.49575006550184314
        }, 
        {
            "<Catalano.Statistics.Kernels.Polynomial: void setDegree(int)>": 0.4864912615124042
        }
    ], 
    "<net.smert.jreactphysics3d.constraint.SliderJointInfo: void <init>(net.smert.jreactphysics3d.body.RigidBody,net.smert.jreactphysics3d.body.RigidBody,net.smert.jreactphysics3d.mathematics.Vector3,net.smert.jreactphysics3d.mathematics.Vector3,float,float,float,float)>": [
        {
            "<org.jbox2d.common.MathUtils: float clamp(float,float,float)>": 0.42099674049191566
        }, 
        {
            "<org.jbox2d.dynamics.contacts.Contact: float mixFriction(float,float)>": 0.4182259835061025
        }, 
        {
            "<org.jbox2d.common.Settings: float mixFriction(float,float)>": 0.4182259835061025
        }, 
        {
            "<boofcv.alg.color.ColorRgb: float rgbToGray_Weighted(float,float,float)>": 0.406159126617719
        }, 
        {
            "<Catalano.Math.Matrix3x3: void <init>(float,float,float,float,float,float,float,float,float)>": 0.4037839118225678
        }
    ], 
    "<net.smert.jreactphysics3d.body.CollisionBody: void <init>(net.smert.jreactphysics3d.mathematics.Transform,net.smert.jreactphysics3d.collision.shapes.CollisionShape,int)>": [
        {
            "<net.imglib2.AbstractInterval: long min(int)>": 0.4460038826787277
        }, 
        {
            "<net.imglib2.AbstractInterval: long max(int)>": 0.4460038826787277
        }, 
        {
            "<net.imglib2.AbstractInterval: double realMax(int)>": 0.4392956309301544
        }, 
        {
            "<net.imglib2.AbstractInterval: double realMin(int)>": 0.4392956309301544
        }, 
        {
            "<org.dyn4j.collision.broadphase.DynamicAABBTree: void validate(org.dyn4j.collision.broadphase.DynamicAABBTreeNode)>": 0.428496502575373
        }
    ], 
    "<net.smert.jreactphysics3d.engine.DynamicsWorld: void setJointsPositionCorrectionTechnique(net.smert.jreactphysics3d.configuration.JointsPositionCorrectionTechnique)>": [
        {
            "<boofcv.demonstrations.fiducial.FiducialTrackerApp: void process(boofcv.io.image.SimpleImageSequence)>": 0.10883925584302587
        }, 
        {
            "<boofcv.gui.StandardAlgConfigPanel: void <init>()>": 0.10702501252028128
        }, 
        {
            "<boofcv.struct.feature.NccFeatureQueue: void <init>(int)>": 0.10447399127850501
        }, 
        {
            "<boofcv.struct.feature.BriefFeatureQueue: void <init>(int)>": 0.10447399127850501
        }, 
        {
            "<boofcv.demonstrations.shapes.DetectPolygonControlPanel: void configureSpinnerFloat(javax.swing.JSpinner)>": 0.10409496476252574
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Quaternion: net.smert.jreactphysics3d.mathematics.Vector3 getVectorV(net.smert.jreactphysics3d.mathematics.Vector3)>": [
        {
            "<com.flowpowered.react.math.Quaternion: void setAllValues(float,float,float,float)>": 0.19029008765649738
        }, 
        {
            "<com.flowpowered.react.math.Vector4: void setAllValues(float,float,float,float)>": 0.19029008765649738
        }, 
        {
            "<boofcv.struct.ImageRectangle_F32: float area()>": 0.19029008765649738
        }, 
        {
            "<org.jbox2d.testbed.pooling.ColorKey: void set(float,float,float,float)>": 0.19029008765649738
        }, 
        {
            "<org.jbox2d.common.Vec2: float length()>": 0.19029008765649738
        }
    ], 
    "<net.smert.jreactphysics3d.collision.broadphase.PairManager: int computeHash32Bits(int)>": [
        {
            "<com.flowpowered.react.collision.broadphase.PairManager: int computeHash32Bits(int)>": 0.9502828686972984
        }, 
        {
            "<com.flowpowered.react.collision.broadphase.PairManager: int computeHashBodies(int,int)>": 0.765570953740891
        }, 
        {
            "<com.flowpowered.react.collision.broadphase.PairManager: com.flowpowered.react.collision.broadphase.PairManager$BodyPair addPair(com.flowpowered.react.body.CollisionBody,com.flowpowered.react.body.CollisionBody)>": 0.5571663739082198
        }, 
        {
            "<com.flowpowered.react.collision.broadphase.PairManager: void reallocatePairs()>": 0.5539990417587377
        }, 
        {
            "<com.flowpowered.react.collision.broadphase.PairManager: com.flowpowered.react.collision.broadphase.PairManager$BodyPair findPair(int,int)>": 0.5472390291718174
        }
    ], 
    "<net.smert.jreactphysics3d.engine.Material: void <init>()>": [
        {
            "<com.flowpowered.react.engine.Material: void <init>()>": 0.2936507936507936
        }, 
        {
            "<Catalano.Imaging.Filters.Clahe: int roundPositive(float)>": 0.2000743219057197
        }, 
        {
            "<net.imglib2.position.transform.Round: long round(float)>": 0.19846608866973908
        }, 
        {
            "<com.flowpowered.react.collision.shape.ConeShape: void computeLocalInertiaTensor(com.flowpowered.react.math.Matrix3x3,float)>": 0.1981767075736411
        }, 
        {
            "<net.imglib2.util.Util: int round(float)>": 0.1976783861608994
        }
    ], 
    "<net.smert.jreactphysics3d.collision.shapes.CylinderShape: void computeLocalInertiaTensor(net.smert.jreactphysics3d.mathematics.Matrix3x3,float)>": [
        {
            "<com.flowpowered.react.collision.shape.CylinderShape: void computeLocalInertiaTensor(com.flowpowered.react.math.Matrix3x3,float)>": 0.5730864630816652
        }, 
        {
            "<boofcv.alg.interpolate.kernel.BicubicKernel_F32: float compute(float)>": 0.4474786090381279
        }, 
        {
            "<com.flowpowered.react.collision.shape.CapsuleShape: void computeLocalInertiaTensor(com.flowpowered.react.math.Matrix3x3,float)>": 0.4454721873594205
        }, 
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.44239614803888266
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.44144772849048003
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Vector2: net.smert.jreactphysics3d.mathematics.Vector2 set(float,float)>": [
        {
            "<org.jbox2d.common.MathUtils: float clamp(float,float,float)>": 0.477099955876002
        }, 
        {
            "<org.jbox2d.dynamics.contacts.Contact: float mixFriction(float,float)>": 0.47394080685185613
        }, 
        {
            "<org.jbox2d.common.Settings: float mixFriction(float,float)>": 0.47394080685185613
        }, 
        {
            "<boofcv.alg.color.ColorRgb: float rgbToGray_Weighted(float,float,float)>": 0.46021232197580664
        }, 
        {
            "<Catalano.Math.Matrix3x3: void <init>(float,float,float,float,float,float,float,float,float)>": 0.4574623540055015
        }
    ], 
    "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: net.smert.jreactphysics3d.mathematics.Vector3 computeClosestPointForSubset(int)>": [
        {
            "<Catalano.Imaging.Texture.BinaryPattern.UniformLocalBinaryPattern: boolean isUniform(int)>": 0.3365964719603513
        }, 
        {
            "<org.jbox2d.dynamics.World: int createParticle(org.jbox2d.particle.ParticleDef)>": 0.31762420843544625
        }, 
        {
            "<com.flowpowered.react.collision.narrowphase.GJK.Simplex: boolean computeClosestPoint(com.flowpowered.react.math.Vector3)>": 0.3132087872966885
        }, 
        {
            "<com.flowpowered.react.collision.narrowphase.GJK.Simplex: boolean overlap(int,int)>": 0.3126493242671103
        }, 
        {
            "<com.flowpowered.react.collision.narrowphase.GJK.Simplex: boolean isSubset(int,int)>": 0.3126493242671103
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 identity()>": [
        {
            "<Catalano.Imaging.Filters.UnsharpMasking: void setWeight(float)>": 0.22197284567390435
        }, 
        {
            "<org.jbox2d.particle.ParticleSystem: void setParticleDensity(float)>": 0.2170286830706078
        }, 
        {
            "<boofcv.alg.distort.radtan.RemoveRadialNtoN_F32: void compute(float,float,georegression.struct.point.Point2D_F32)>": 0.21613088394139662
        }, 
        {
            "<boofcv.alg.tracker.meanshift.LocalWeightedHistogramRotRect: void squareToImageSample(float,float,boofcv.struct.RectangleRotate_F32)>": 0.21589505296689465
        }, 
        {
            "<org.jbox2d.dynamics.joints.MouseJoint: float getReactionTorque(float)>": 0.21526419295572294
        }
    ], 
    "<net.smert.jreactphysics3d.collision.shapes.AABB: void <init>()>": [
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.10842661409823065
        }, 
        {
            "<org.dyn4j.sandbox.Sandbox: void init(com.jogamp.opengl.GLAutoDrawable)>": 0.10132274924351498
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.TestbedMain: void main(java.lang.String[])>": 0.10036934567095813
        }, 
        {
            "<boofcv.gui.d3.Polygon3DSequenceViewer: void <init>()>": 0.09608221554494978
        }, 
        {
            "<boofcv.demonstrations.transform.pyramid.EdgeIntensitiesApp: void main(java.lang.String[])>": 0.09588360327593043
        }
    ], 
    "<net.smert.jreactphysics3d.constraint.HingeJoint: void setMinAngleLimit(float)>": [
        {
            "<org.jbox2d.dynamics.joints.FrictionJoint: void setMaxTorque(float)>": 0.44435969846405554
        }, 
        {
            "<org.jbox2d.dynamics.joints.MotorJoint: void setMaxForce(float)>": 0.44435969846405554
        }, 
        {
            "<org.jbox2d.dynamics.joints.FrictionJoint: void setMaxForce(float)>": 0.44435969846405554
        }, 
        {
            "<org.jbox2d.dynamics.joints.MotorJoint: void setMaxTorque(float)>": 0.44435969846405554
        }, 
        {
            "<org.jbox2d.dynamics.Fixture: void setDensity(float)>": 0.44435969846405554
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Vector2 getColumn(int)>": [
        {
            "<boofcv.struct.image.Planar: boofcv.struct.image.ImageGray getBand(int)>": 0.34467242229591777
        }, 
        {
            "<boofcv.alg.InputSanityCheck: void checkSameShapeB(boofcv.struct.image.ImageMultiBand,boofcv.struct.image.ImageMultiBand)>": 0.3334972761205077
        }, 
        {
            "<boofcv.factory.feature.detect.template.FactoryTemplateMatching: boofcv.alg.feature.detect.template.TemplateMatchingIntensity createIntensity(boofcv.factory.feature.detect.template.TemplateScoreType,java.lang.Class)>": 0.32987151699980805
        }, 
        {
            "<boofcv.alg.InputSanityCheck: void checkSameShape(boofcv.struct.image.ImageBase,boofcv.struct.image.ImageBase)>": 0.3231577598010444
        }, 
        {
            "<boofcv.struct.convolve.KernelBase: void <init>(int)>": 0.31386683056432724
        }
    ], 
    "<net.smert.jreactphysics3d.engine.ProfileNode: net.smert.jreactphysics3d.engine.ProfileNode findSubNode(java.lang.String)>": [
        {
            "<org.dyn4j.sandbox.persist.XmlReader: void characters(char[],int,int)>": 0.22453997948039056
        }, 
        {
            "<org.dyn4j.sandbox.persist.XmlReader: void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)>": 0.18673200939927942
        }, 
        {
            "<org.dyn4j.sandbox.persist.XmlReader: void endElement(java.lang.String,java.lang.String,java.lang.String)>": 0.18192965070811673
        }, 
        {
            "<boofcv.io.image.UtilImageIO$1: boolean accept(java.io.File,java.lang.String)>": 0.18129355386727236
        }, 
        {
            "<boofcv.io.wrapper.images.BufferedFileImageSequence$Filter: boolean accept(java.io.File,java.lang.String)>": 0.18129355386727236
        }
    ], 
    "<net.smert.jreactphysics3d.engine.ContactSolver: void <init>(java.util.Map)>": [
        {
            "<net.coobird.thumbnailator.resizers.AbstractResizer: void <init>(java.lang.Object,java.util.Map)>": 0.16155392912556307
        }, 
        {
            "<boofcv.alg.bow.LearnSceneFromFiles: void loadSets(java.io.File,java.io.File,java.io.File)>": 0.1557605268401814
        }, 
        {
            "<org.dyn4j.sandbox.input.Keyboard: boolean isPressed(int)>": 0.1396260333513376
        }, 
        {
            "<boofcv.factory.geo.ConfigHomography: void <init>(boolean)>": 0.1315587028960544
        }, 
        {
            "<net.coobird.thumbnailator.resizers.NullResizer: void <init>()>": 0.12943032919158468
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Vector3: boolean equals(java.lang.Object)>": [
        {
            "<org.jbox2d.testbed.pooling.ColorKey: boolean equals(java.lang.Object)>": 0.655559565768941
        }, 
        {
            "<com.flowpowered.react.math.Quaternion: boolean equals(java.lang.Object)>": 0.6492250985731455
        }, 
        {
            "<org.jbox2d.common.Vec3: boolean equals(java.lang.Object)>": 0.6480153889556465
        }, 
        {
            "<com.flowpowered.react.math.Vector4: boolean equals(java.lang.Object)>": 0.6478623883776112
        }, 
        {
            "<com.flowpowered.react.math.Vector3: boolean equals(java.lang.Object)>": 0.6412513800056883
        }
    ], 
    "<net.smert.jreactphysics3d.engine.DynamicsWorld: void setTimeBeforeSleep(float)>": [
        {
            "<org.jbox2d.dynamics.joints.FrictionJoint: void setMaxTorque(float)>": 0.7178030303030303
        }, 
        {
            "<org.jbox2d.dynamics.joints.MotorJoint: void setMaxForce(float)>": 0.7178030303030303
        }, 
        {
            "<org.jbox2d.dynamics.joints.FrictionJoint: void setMaxForce(float)>": 0.7178030303030303
        }, 
        {
            "<org.jbox2d.dynamics.joints.MotorJoint: void setMaxTorque(float)>": 0.7178030303030303
        }, 
        {
            "<org.jbox2d.dynamics.Fixture: void setDensity(float)>": 0.7178030303030303
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Matrix2x2: java.lang.String toString()>": [
        {
            "<com.flowpowered.react.math.Vector2: java.lang.String toString()>": 0.5636663916940713
        }, 
        {
            "<org.jbox2d.common.Rot: java.lang.String toString()>": 0.5636663916940713
        }, 
        {
            "<org.jbox2d.common.Vec2: java.lang.String toString()>": 0.5636663916940713
        }, 
        {
            "<com.flowpowered.react.math.Vector3: java.lang.String toString()>": 0.5570418606516957
        }, 
        {
            "<org.jbox2d.common.Vec3: java.lang.String toString()>": 0.5570418606516957
        }
    ], 
    "<net.smert.jreactphysics3d.body.RigidBody: void <init>(net.smert.jreactphysics3d.mathematics.Transform,float,net.smert.jreactphysics3d.mathematics.Matrix3x3,net.smert.jreactphysics3d.collision.shapes.CollisionShape,int)>": [
        {
            "<net.imglib2.AbstractInterval: long min(int)>": 0.3082283269149797
        }, 
        {
            "<net.imglib2.AbstractInterval: long max(int)>": 0.3082283269149797
        }, 
        {
            "<net.imglib2.AbstractInterval: double realMax(int)>": 0.30357657558997087
        }, 
        {
            "<net.imglib2.AbstractInterval: double realMin(int)>": 0.30357657558997087
        }, 
        {
            "<org.dyn4j.collision.broadphase.DynamicAABBTree: void validate(org.dyn4j.collision.broadphase.DynamicAABBTreeNode)>": 0.2960121878502252
        }
    ], 
    "<net.smert.jreactphysics3d.engine.Island: void addJoint(net.smert.jreactphysics3d.constraint.Joint)>": [
        {
            "<Catalano.Imaging.Tools.BlobDetection: void ShuffleColor()>": 0.3389044739320369
        }, 
        {
            "<Catalano.Statistics.Kernels.Polynomial: void setDegree(int)>": 0.32202941451867023
        }, 
        {
            "<Catalano.Statistics.Kernels.NormalizedPolynomial: void setDegree(int)>": 0.32202941451867023
        }, 
        {
            "<Catalano.Imaging.Concurrent.Filters.FastVariance: void setRadius(int)>": 0.32202941451867023
        }, 
        {
            "<Catalano.Imaging.Concurrent.Filters.Minimum: void setRadius(int)>": 0.32202941451867023
        }
    ], 
    "<net.smert.jreactphysics3d.constraint.SliderJoint: void solvePositionConstraint(net.smert.jreactphysics3d.engine.ConstraintSolverData)>": [
        {
            "<org.jbox2d.common.Vec3: void crossToOutUnsafe(org.jbox2d.common.Vec3,org.jbox2d.common.Vec3,org.jbox2d.common.Vec3)>": 0.10632476844266021
        }, 
        {
            "<boofcv.abst.feature.detect.extract.NonMaxLimiter$LocalExtreme: float getValue()>": 0.10606983792540972
        }, 
        {
            "<org.jbox2d.common.Rot: void mulUnsafe(org.jbox2d.common.Rot,org.jbox2d.common.Rot,org.jbox2d.common.Rot)>": 0.10597060214740395
        }, 
        {
            "<Catalano.Math.Geometry.Line: void <init>(float,float,boolean)>": 0.10566875322393462
        }, 
        {
            "<org.jbox2d.common.MathUtils: float abs(float)>": 0.10490467565686347
        }
    ], 
    "<net.smert.jreactphysics3d.constraint.HingeJoint: float computeCorrespondingAngleNearLimits(float,float,float)>": [
        {
            "<com.flowpowered.react.constraint.HingeJoint: float computeCorrespondingAngleNearLimits(float,float,float)>": 0.5061460482148685
        }, 
        {
            "<com.flowpowered.react.constraint.HingeJoint: float computeCurrentHingeAngle(com.flowpowered.react.math.Quaternion,com.flowpowered.react.math.Quaternion)>": 0.43838698119023967
        }, 
        {
            "<org.jbox2d.common.MathUtils: float reduceAngle(float)>": 0.3729550399341141
        }, 
        {
            "<boofcv.alg.distort.radtan.RemoveRadialPtoN_F32: void compute(float,float,georegression.struct.point.Point2D_F32)>": 0.3713683746770153
        }, 
        {
            "<org.jbox2d.common.MathUtils: float clamp(float,float,float)>": 0.3650303446933173
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Transform: void <init>(net.smert.jreactphysics3d.mathematics.Vector3,net.smert.jreactphysics3d.mathematics.Matrix3x3)>": [
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.1061907736783491
        }, 
        {
            "<org.dyn4j.sandbox.Sandbox: void init(com.jogamp.opengl.GLAutoDrawable)>": 0.09923339599665497
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.TestbedMain: void main(java.lang.String[])>": 0.0982996523411924
        }, 
        {
            "<boofcv.gui.d3.Polygon3DSequenceViewer: void <init>()>": 0.09410092614535137
        }, 
        {
            "<boofcv.demonstrations.transform.pyramid.EdgeIntensitiesApp: void main(java.lang.String[])>": 0.09390640941452301
        }
    ], 
    "<net.smert.jreactphysics3d.body.RigidBody: net.smert.jreactphysics3d.mathematics.Matrix3x3 getInertiaTensorInverseWorld()>": [
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.042355466240778634
        }, 
        {
            "<org.dyn4j.sandbox.Sandbox: void init(com.jogamp.opengl.GLAutoDrawable)>": 0.03958043254139215
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.TestbedMain: void main(java.lang.String[])>": 0.039207997663044995
        }, 
        {
            "<boofcv.gui.d3.Polygon3DSequenceViewer: void <init>()>": 0.037533285261185205
        }, 
        {
            "<boofcv.demonstrations.transform.pyramid.EdgeIntensitiesApp: void main(java.lang.String[])>": 0.03745569992546835
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Vector2: float lengthSquare()>": [
        {
            "<com.flowpowered.react.math.Vector2: float lengthSquare()>": 0.5221025910364147
        }, 
        {
            "<org.jbox2d.common.Vec2: float lengthSquared()>": 0.5221025910364147
        }, 
        {
            "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 multiply(com.flowpowered.react.math.Matrix4x4,com.flowpowered.react.math.Matrix4x4)>": 0.5145314421331568
        }, 
        {
            "<Catalano.Math.Vector3: float Square()>": 0.5105658075134625
        }, 
        {
            "<com.flowpowered.react.math.Vector3: float lengthSquare()>": 0.5105658075134625
        }
    ], 
    "<net.smert.jreactphysics3d.engine.ContactSolver: void initializeForIsland(float,net.smert.jreactphysics3d.engine.Island)>": [
        {
            "<org.jbox2d.common.Vec2: void crossToOutUnsafe(org.jbox2d.common.Vec2,float,org.jbox2d.common.Vec2)>": 0.1794759554636982
        }, 
        {
            "<org.jbox2d.common.Vec2: void crossToOutUnsafe(float,org.jbox2d.common.Vec2,org.jbox2d.common.Vec2)>": 0.1794759554636982
        }, 
        {
            "<org.jbox2d.common.Rot: void mulUnsafe(org.jbox2d.common.Rot,org.jbox2d.common.Rot,org.jbox2d.common.Rot)>": 0.17715169390105118
        }, 
        {
            "<org.jbox2d.common.Vec3: void crossToOutUnsafe(org.jbox2d.common.Vec3,org.jbox2d.common.Vec3,org.jbox2d.common.Vec3)>": 0.16838992968794475
        }, 
        {
            "<org.jbox2d.dynamics.joints.FrictionJoint: void setMaxTorque(float)>": 0.1646598197791772
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 subtract(net.smert.jreactphysics3d.mathematics.Matrix2x2)>": [
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.4568705818995089
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.4558853245183447
        }, 
        {
            "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 multiply(com.flowpowered.react.math.Matrix4x4,com.flowpowered.react.math.Matrix4x4)>": 0.4526111104230872
        }, 
        {
            "<com.flowpowered.react.math.Quaternion: void inverse()>": 0.45247493499710123
        }, 
        {
            "<org.jbox2d.particle.ParticleSystem: void raycast(org.jbox2d.callbacks.ParticleRaycastCallback,org.jbox2d.common.Vec2,org.jbox2d.common.Vec2)>": 0.4489439960330402
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Quaternion: void <init>(net.smert.jreactphysics3d.mathematics.Vector3,float)>": [
        {
            "<com.flowpowered.react.math.Vector4: void <init>(float,float,float,float)>": 0.4347083292484992
        }, 
        {
            "<com.flowpowered.react.math.Quaternion: void <init>(float,float,float,float)>": 0.4347083292484992
        }, 
        {
            "<com.flowpowered.react.math.Vector3: void <init>(float,float,float)>": 0.4299709735691306
        }, 
        {
            "<org.jbox2d.testbed.perf.MathPerf: void runSinLUTTest(float)>": 0.42160674105544876
        }, 
        {
            "<org.jbox2d.testbed.pooling.ColorKey: void set(float,float,float)>": 0.4193867719409479
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Matrix2x2: boolean equals(java.lang.Object)>": [
        {
            "<org.jbox2d.testbed.pooling.ColorKey: boolean equals(java.lang.Object)>": 0.6650301812562168
        }, 
        {
            "<com.flowpowered.react.math.Quaternion: boolean equals(java.lang.Object)>": 0.6638889121434985
        }, 
        {
            "<com.flowpowered.react.math.Vector4: boolean equals(java.lang.Object)>": 0.662009833403327
        }, 
        {
            "<org.jbox2d.common.Vec3: boolean equals(java.lang.Object)>": 0.6546687736913049
        }, 
        {
            "<com.flowpowered.react.math.Vector3: boolean equals(java.lang.Object)>": 0.6539333556738265
        }
    ], 
    "<net.smert.jreactphysics3d.engine.ContactManifold: void addContactPoint(net.smert.jreactphysics3d.constraint.ContactPoint)>": [
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void rebuildBottomUp()>": 0.21783946815348837
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void validate()>": 0.2166331781237607
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTreeFlatNodes: void validate()>": 0.21152173793123902
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void validateMetrics(org.jbox2d.collision.broadphase.DynamicTreeNode)>": 0.20250273150802098
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: boolean moveProxy(int,org.jbox2d.collision.AABB,org.jbox2d.common.Vec2)>": 0.1991716241614131
        }
    ], 
    "<net.smert.jreactphysics3d.engine.CollisionWorld: void removeCollisionShape(net.smert.jreactphysics3d.collision.shapes.CollisionShape)>": [
        {
            "<net.imglib2.transform.integer.SlicingTransform: boolean getComponentZero(int)>": 0.5096599140580198
        }, 
        {
            "<net.imglib2.transform.integer.MixedTransform: boolean getComponentZero(int)>": 0.5096599140580198
        }, 
        {
            "<net.imglib2.transform.integer.MixedTransform: boolean getComponentInversion(int)>": 0.5096599140580198
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void validate()>": 0.49198071567624035
        }, 
        {
            "<org.jbox2d.particle.ParticleSystem: void setParticleMaxCount(int)>": 0.47741036925553404
        }
    ], 
    "<net.smert.jreactphysics3d.engine.ProfileNodeIterator: boolean isRoot()>": [
        {
            "<boofcv.abst.sfm.d3.WrapVisOdomPixelDepthPnP: boolean isFault()>": 0.5318681691089701
        }, 
        {
            "<boofcv.abst.sfm.d3.VisOdomPixelDepthPnP_to_DepthVisualOdometry: boolean isFault()>": 0.5318681691089701
        }, 
        {
            "<boofcv.io.javacv.JavaCVVideoImageSequence: boolean hasNext()>": 0.5318681691089701
        }, 
        {
            "<net.coobird.thumbnailator.util.exif.IfdStructure: boolean isOffset()>": 0.5187122016331693
        }, 
        {
            "<Catalano.Core.Structs.DoubleArrayList: boolean isEmpty()>": 0.5019351994283726
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Vector3: float get(int)>": [
        {
            "<boofcv.struct.image.Planar: boofcv.struct.image.ImageGray getBand(int)>": 0.42890203567788016
        }, 
        {
            "<boofcv.alg.InputSanityCheck: void checkSameShapeB(boofcv.struct.image.ImageMultiBand,boofcv.struct.image.ImageMultiBand)>": 0.4171324798146843
        }, 
        {
            "<boofcv.alg.InputSanityCheck: void checkSameShape(boofcv.struct.image.ImageBase,boofcv.struct.image.ImageBase)>": 0.4032461769202199
        }, 
        {
            "<boofcv.factory.feature.detect.template.FactoryTemplateMatching: boofcv.alg.feature.detect.template.TemplateMatchingIntensity createIntensity(boofcv.factory.feature.detect.template.TemplateScoreType,java.lang.Class)>": 0.399656041758047
        }, 
        {
            "<boofcv.struct.convolve.KernelBase: void <init>(int)>": 0.3826835001707348
        }
    ], 
    "<net.smert.jreactphysics3d.collision.narrowphase.EPA.TriangleEPA: boolean computeSilhouette(net.smert.jreactphysics3d.mathematics.Vector3[],int,net.smert.jreactphysics3d.collision.narrowphase.EPA.TrianglesStore)>": [
        {
            "<Catalano.Imaging.Texture.BinaryPattern.UniformLocalBinaryPattern: boolean isUniform(int)>": 0.2928650132225856
        }, 
        {
            "<com.flowpowered.react.collision.narrowphase.GJK.Simplex: boolean overlap(int,int)>": 0.27594389580681533
        }, 
        {
            "<com.flowpowered.react.collision.narrowphase.GJK.Simplex: boolean isSubset(int,int)>": 0.27594389580681533
        }, 
        {
            "<Catalano.Core.IntRange: boolean IsOverlapping(Catalano.Core.IntRange)>": 0.2746633288820785
        }, 
        {
            "<net.coobird.thumbnailator.util.exif.IfdStructure: boolean isOffset()>": 0.2626169663257607
        }
    ], 
    "<net.smert.jreactphysics3d.collision.broadphase.EndPoint: void setValues(int,boolean,long)>": [
        {
            "<com.flowpowered.react.collision.broadphase.SweepAndPruneAlgorithm$EndPoint: void setValues(int,boolean,long)>": 0.44592476489028215
        }, 
        {
            "<boofcv.abst.feature.detect.extract.ConfigExtract: void <init>(int,float,int,boolean,boolean,boolean)>": 0.3649964926061399
        }, 
        {
            "<org.dyn4j.sandbox.Sandbox: void setPaused(boolean)>": 0.35713355191934026
        }, 
        {
            "<boofcv.alg.misc.PixelMath: void plus_A(long[],int,int,long,long,long,long[],int,int,int,int)>": 0.3545318097182732
        }, 
        {
            "<boofcv.alg.misc.PixelMath: void minus_B(long[],int,int,long,long,long,long[],int,int,int,int)>": 0.3545318097182732
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Vector3: net.smert.jreactphysics3d.mathematics.Vector3 set(float,float,float)>": [
        {
            "<org.jbox2d.common.MathUtils: float clamp(float,float,float)>": 0.5001937271949172
        }, 
        {
            "<org.jbox2d.dynamics.contacts.Contact: float mixFriction(float,float)>": 0.4968429436482886
        }, 
        {
            "<org.jbox2d.common.Settings: float mixFriction(float,float)>": 0.4968429436482886
        }, 
        {
            "<boofcv.alg.color.ColorRgb: float rgbToGray_Weighted(float,float,float)>": 0.4823416593268568
        }, 
        {
            "<Catalano.Math.Matrix3x3: void <init>(float,float,float,float,float,float,float,float,float)>": 0.4788426777791386
        }
    ], 
    "<net.smert.jreactphysics3d.constraint.HingeJointInfo: void <init>(net.smert.jreactphysics3d.body.RigidBody,net.smert.jreactphysics3d.body.RigidBody,net.smert.jreactphysics3d.mathematics.Vector3,net.smert.jreactphysics3d.mathematics.Vector3,float,float,float,float)>": [
        {
            "<org.jbox2d.common.MathUtils: float clamp(float,float,float)>": 0.4218770587559675
        }, 
        {
            "<org.jbox2d.dynamics.contacts.Contact: float mixFriction(float,float)>": 0.41908836788075804
        }, 
        {
            "<org.jbox2d.common.Settings: float mixFriction(float,float)>": 0.41908836788075804
        }, 
        {
            "<boofcv.alg.color.ColorRgb: float rgbToGray_Weighted(float,float,float)>": 0.40696232710181157
        }, 
        {
            "<Catalano.Math.Matrix3x3: void <init>(float,float,float,float,float,float,float,float,float)>": 0.4045452397315077
        }
    ], 
    "<net.smert.jreactphysics3d.engine.ConstraintSolver: void setConstrainedVelocitiesArrays(net.smert.jreactphysics3d.mathematics.Vector3[],net.smert.jreactphysics3d.mathematics.Vector3[])>": [
        {
            "<net.imglib2.AbstractInterval: long min(int)>": 0.4415235130063622
        }, 
        {
            "<net.imglib2.AbstractInterval: long max(int)>": 0.4415235130063622
        }, 
        {
            "<net.imglib2.AbstractInterval: double realMax(int)>": 0.43447364862673754
        }, 
        {
            "<net.imglib2.AbstractInterval: double realMin(int)>": 0.43447364862673754
        }, 
        {
            "<org.dyn4j.collision.broadphase.DynamicAABBTree: void validate(org.dyn4j.collision.broadphase.DynamicAABBTreeNode)>": 0.43016136024814583
        }
    ], 
    "<net.smert.jreactphysics3d.engine.Timer: void nextStep()>": [
        {
            "<org.dyn4j.collision.broadphase.DynamicAABBTree: void validate(org.dyn4j.collision.broadphase.DynamicAABBTreeNode)>": 0.45401283245238055
        }, 
        {
            "<net.imglib2.transform.integer.SlicingTransform: boolean getComponentZero(int)>": 0.4513882809110802
        }, 
        {
            "<net.imglib2.transform.integer.MixedTransform: boolean getComponentZero(int)>": 0.4513882809110802
        }, 
        {
            "<net.imglib2.transform.integer.MixedTransform: boolean getComponentInversion(int)>": 0.4513882809110802
        }, 
        {
            "<org.dyn4j.sandbox.Sandbox: void render(com.jogamp.opengl.GL2)>": 0.4511419072962714
        }
    ], 
    "<net.smert.jreactphysics3d.body.RigidBody: void setMass(float)>": [
        {
            "<org.jbox2d.dynamics.joints.FrictionJoint: void setMaxTorque(float)>": 0.7178030303030303
        }, 
        {
            "<org.jbox2d.dynamics.joints.MotorJoint: void setMaxForce(float)>": 0.7178030303030303
        }, 
        {
            "<org.jbox2d.dynamics.joints.FrictionJoint: void setMaxForce(float)>": 0.7178030303030303
        }, 
        {
            "<org.jbox2d.dynamics.joints.MotorJoint: void setMaxTorque(float)>": 0.7178030303030303
        }, 
        {
            "<org.jbox2d.dynamics.Fixture: void setDensity(float)>": 0.7178030303030303
        }
    ], 
    "<net.smert.jreactphysics3d.collision.broadphase.SweepAndPruneAlgorithm: void resizeArrays()>": [
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void validate()>": 0.4287113610345817
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTreeFlatNodes: void validate()>": 0.42612909938705246
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void validateMetrics(org.jbox2d.collision.broadphase.DynamicTreeNode)>": 0.4179639498173324
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTreeFlatNodes: void validateStructure(int)>": 0.4174443465079983
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTree: void rebuildBottomUp()>": 0.41585528226299284
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 transpose()>": [
        {
            "<com.flowpowered.react.math.Vector4: com.flowpowered.react.math.Vector4 negate()>": 0.45125393158595417
        }, 
        {
            "<org.jbox2d.common.Vec2: void absLocal()>": 0.4502419383497161
        }, 
        {
            "<com.flowpowered.react.math.Vector3: com.flowpowered.react.math.Vector3 negate()>": 0.44601408008172805
        }, 
        {
            "<com.flowpowered.react.math.Quaternion: void <init>(float,com.flowpowered.react.math.Vector3)>": 0.4435311861996305
        }, 
        {
            "<org.jbox2d.testbed.perf.MathPerf: void runSinLUTTest(float)>": 0.4375087498315487
        }
    ], 
    "<net.smert.jreactphysics3d.collision.broadphase.BodyPair: int hashCode()>": [
        {
            "<boofcv.alg.feature.describe.DescribeSiftCommon: int getDescriptorLength()>": 0.3590768944753376
        }, 
        {
            "<boofcv.alg.filter.misc.ImplAverageDownSampleN: void down(boofcv.struct.image.GrayS8,int,boofcv.struct.image.GrayI8)>": 0.35662236393007046
        }, 
        {
            "<boofcv.alg.filter.misc.ImplAverageDownSampleN: void down(boofcv.struct.image.GrayU8,int,boofcv.struct.image.GrayI8)>": 0.3558889037868328
        }, 
        {
            "<boofcv.alg.filter.misc.ImplAverageDownSampleN: void down(boofcv.struct.image.GrayU16,int,boofcv.struct.image.GrayI16)>": 0.35445796137899366
        }, 
        {
            "<boofcv.alg.filter.misc.ImplAverageDownSampleN: void down(boofcv.struct.image.GrayS16,int,boofcv.struct.image.GrayI16)>": 0.35431879527224386
        }
    ], 
    "<net.smert.jreactphysics3d.body.RigidBody: void setAngularVelocity(net.smert.jreactphysics3d.mathematics.Vector3)>": [
        {
            "<Catalano.Imaging.Filters.GaussianBlur: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Concurrent.Filters.BradleyLocalThreshold: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.CosineTransform: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.BradleyLocalThreshold: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.UnsharpMasking: void <init>()>": 0.018184824186332698
        }
    ], 
    "<net.smert.jreactphysics3d.engine.ContactSolver: void applySplitImpulse(net.smert.jreactphysics3d.engine.Impulse,net.smert.jreactphysics3d.engine.ContactManifoldSolver)>": [
        {
            "<Catalano.Imaging.Filters.VerticalRunLengthSmoothing: void applyInPlace(Catalano.Imaging.FastBitmap)>": 0.09934998618139536
        }, 
        {
            "<Catalano.Imaging.Filters.HorizontalRunLengthSmoothing: void applyInPlace(Catalano.Imaging.FastBitmap)>": 0.09934998618139536
        }, 
        {
            "<org.dyn4j.collision.manifold.IndexedManifoldPointId: boolean equals(java.lang.Object)>": 0.09901179168284269
        }, 
        {
            "<boofcv.struct.image.ImageBase: boolean isInBounds(int,int)>": 0.09661163230397388
        }, 
        {
            "<boofcv.struct.flow.ImageFlow: boolean isInBounds(int,int)>": 0.09661163230397388
        }
    ], 
    "<net.smert.jreactphysics3d.collision.narrowphase.EPA.EPAAlgorithm: int isOriginInTetrahedron(net.smert.jreactphysics3d.mathematics.Vector3,net.smert.jreactphysics3d.mathematics.Vector3,net.smert.jreactphysics3d.mathematics.Vector3,net.smert.jreactphysics3d.mathematics.Vector3)>": [
        {
            "<com.flowpowered.react.collision.narrowphase.EPA.EPAAlgorithm: int isOriginInTetrahedron(com.flowpowered.react.math.Vector3,com.flowpowered.react.math.Vector3,com.flowpowered.react.math.Vector3,com.flowpowered.react.math.Vector3)>": 0.315959604745829
        }, 
        {
            "<com.flowpowered.react.collision.narrowphase.EPA.TriangleEPA: boolean isClosestPointInternalToTriangle()>": 0.16693681579811726
        }, 
        {
            "<Catalano.Math.Geometry.Line: boolean isHorizontal()>": 0.15454925739676845
        }, 
        {
            "<com.flowpowered.react.collision.shape.CylinderShape: boolean isEqualTo(com.flowpowered.react.collision.shape.CollisionShape)>": 0.15116559046893982
        }, 
        {
            "<com.flowpowered.react.collision.shape.ConeShape: boolean isEqualTo(com.flowpowered.react.collision.shape.CollisionShape)>": 0.15116559046893982
        }
    ], 
    "<net.smert.jreactphysics3d.collision.narrowphase.GJK.GJKAlgorithm: boolean testCollision(net.smert.jreactphysics3d.collision.shapes.CollisionShape,net.smert.jreactphysics3d.mathematics.Transform,net.smert.jreactphysics3d.collision.shapes.CollisionShape,net.smert.jreactphysics3d.mathematics.Transform,net.smert.jreactphysics3d.constraint.ContactPointInfo)>": [
        {
            "<org.jbox2d.common.Rot: void mulUnsafe(org.jbox2d.common.Rot,org.jbox2d.common.Rot,org.jbox2d.common.Rot)>": 0.16973349490917272
        }, 
        {
            "<org.jbox2d.common.Vec3: void crossToOutUnsafe(org.jbox2d.common.Vec3,org.jbox2d.common.Vec3,org.jbox2d.common.Vec3)>": 0.1642119149590956
        }, 
        {
            "<org.jbox2d.common.Vec2: void crossToOutUnsafe(org.jbox2d.common.Vec2,float,org.jbox2d.common.Vec2)>": 0.16399192004570387
        }, 
        {
            "<org.jbox2d.common.Vec2: void crossToOutUnsafe(float,org.jbox2d.common.Vec2,org.jbox2d.common.Vec2)>": 0.16399192004570387
        }, 
        {
            "<org.jbox2d.dynamics.Body: void <init>(org.jbox2d.dynamics.BodyDef,org.jbox2d.dynamics.World)>": 0.15435861293196024
        }
    ], 
    "<net.smert.jreactphysics3d.engine.ContactSolver: void computeFrictionVectors(net.smert.jreactphysics3d.mathematics.Vector3,net.smert.jreactphysics3d.engine.ContactManifoldSolver)>": [
        {
            "<org.jbox2d.dynamics.joints.FrictionJoint: void setMaxTorque(float)>": 0.16157592742015622
        }, 
        {
            "<org.jbox2d.dynamics.joints.MotorJoint: void setMaxForce(float)>": 0.16157592742015622
        }, 
        {
            "<org.jbox2d.dynamics.joints.FrictionJoint: void setMaxForce(float)>": 0.16157592742015622
        }, 
        {
            "<org.jbox2d.dynamics.joints.MotorJoint: void setMaxTorque(float)>": 0.16157592742015622
        }, 
        {
            "<org.jbox2d.dynamics.Fixture: void setDensity(float)>": 0.16157592742015622
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Vector3: net.smert.jreactphysics3d.mathematics.Vector3 multiply(float)>": [
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.43023490060916214
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.42921495511747626
        }, 
        {
            "<boofcv.alg.distort.radtan.AddRadialPtoN_F32: void compute(float,float,georegression.struct.point.Point2D_F32)>": 0.42398558229502326
        }, 
        {
            "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 multiply(com.flowpowered.react.math.Matrix4x4,com.flowpowered.react.math.Matrix4x4)>": 0.4234847030530057
        }, 
        {
            "<org.jbox2d.dynamics.contacts.ContactSolver: void solveVelocityConstraints()>": 0.42343920670640794
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Vector3: java.lang.String toString()>": [
        {
            "<com.flowpowered.react.math.Vector2: java.lang.String toString()>": 0.5815679785196011
        }, 
        {
            "<org.jbox2d.common.Rot: java.lang.String toString()>": 0.5815679785196011
        }, 
        {
            "<org.jbox2d.common.Vec2: java.lang.String toString()>": 0.5815679785196011
        }, 
        {
            "<com.flowpowered.react.math.Vector3: java.lang.String toString()>": 0.566311297410341
        }, 
        {
            "<org.jbox2d.common.Vec3: java.lang.String toString()>": 0.566311297410341
        }
    ], 
    "<net.smert.jreactphysics3d.collision.BroadPhasePair: net.smert.jreactphysics3d.collision.BodyIndexPair newBodiesIndexPair()>": [
        {
            "<Catalano.Imaging.Filters.GaussianBlur: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Concurrent.Filters.BradleyLocalThreshold: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.CosineTransform: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.BradleyLocalThreshold: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.UnsharpMasking: void <init>()>": 0.018184824186332698
        }
    ], 
    "<net.smert.jreactphysics3d.collision.shapes.CylinderShape: float getHeight()>": [
        {
            "<com.flowpowered.react.collision.shape.CylinderShape: float getHeight()>": 0.4907407407407407
        }, 
        {
            "<com.flowpowered.react.collision.shape.ConeShape: float getHeight()>": 0.4907407407407407
        }, 
        {
            "<com.flowpowered.react.collision.shape.CapsuleShape: float getHeight()>": 0.4907407407407407
        }, 
        {
            "<com.flowpowered.react.constraint.SliderJoint: float getMotorForce(float)>": 0.48845356531534173
        }, 
        {
            "<com.flowpowered.react.constraint.HingeJoint: float getMotorTorque(float)>": 0.48845356531534173
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Vector3: net.smert.jreactphysics3d.mathematics.Vector3 zero()>": [
        {
            "<org.jbox2d.common.Color3f: void <init>()>": 0.21616235959161328
        }, 
        {
            "<org.jbox2d.common.Vec3: void <init>()>": 0.21616235959161328
        }, 
        {
            "<org.jbox2d.dynamics.joints.MouseJoint: float getReactionTorque(float)>": 0.2073221072156823
        }, 
        {
            "<Catalano.Imaging.Filters.ImageNormalization: void setMean(float)>": 0.20393148436292374
        }, 
        {
            "<Catalano.Imaging.Filters.ImageNormalization: void setVariance(float)>": 0.20393148436292374
        }
    ], 
    "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Vector3 getColumn(int)>": [
        {
            "<boofcv.factory.background.FactoryBackgroundModel: boofcv.alg.background.stationary.BackgroundStationaryGaussian stationaryGaussian(boofcv.factory.background.ConfigBackgroundGaussian,boofcv.struct.image.ImageType)>": 0.31940454435690274
        }, 
        {
            "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 negate(com.flowpowered.react.math.Matrix4x4)>": 0.3187194946947619
        }, 
        {
            "<com.flowpowered.react.math.Matrix4x4: void setAllValues(float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float)>": 0.3187183513435457
        }, 
        {
            "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 set(com.flowpowered.react.math.Matrix4x4)>": 0.314898135874689
        }, 
        {
            "<com.flowpowered.react.math.Matrix3x3: com.flowpowered.react.math.Matrix3x3 negate(com.flowpowered.react.math.Matrix3x3)>": 0.313059183816465
        }
    ], 
    "<net.smert.jreactphysics3d.collision.narrowphase.EPA.TriangleEPA: void setAdjacentEdge(int,net.smert.jreactphysics3d.collision.narrowphase.EPA.EdgeEPA)>": [
        {
            "<net.imglib2.transform.integer.SlicingTransform: boolean getComponentZero(int)>": 0.5186349987812284
        }, 
        {
            "<net.imglib2.transform.integer.MixedTransform: boolean getComponentZero(int)>": 0.5186349987812284
        }, 
        {
            "<net.imglib2.transform.integer.MixedTransform: boolean getComponentInversion(int)>": 0.5186349987812284
        }, 
        {
            "<org.jbox2d.common.BufferUtils: int[] reallocateBuffer(int[],int,int,int,boolean)>": 0.503266394977323
        }, 
        {
            "<org.jbox2d.common.BufferUtils: float[] reallocateBuffer(float[],int,int,int,boolean)>": 0.503266394977323
        }
    ], 
    "<net.smert.jreactphysics3d.constraint.Joint: boolean isActive()>": [
        {
            "<boofcv.abst.sfm.d3.WrapVisOdomPixelDepthPnP: boolean isFault()>": 0.5312000961653445
        }, 
        {
            "<boofcv.abst.sfm.d3.VisOdomPixelDepthPnP_to_DepthVisualOdometry: boolean isFault()>": 0.5312000961653445
        }, 
        {
            "<boofcv.io.javacv.JavaCVVideoImageSequence: boolean hasNext()>": 0.5312000961653445
        }, 
        {
            "<net.imglib2.KDTree$KDTreeCursor: boolean hasNext()>": 0.4897004091326671
        }, 
        {
            "<boofcv.struct.flow.ImageFlow$D: boolean isValid()>": 0.4897004091326671
        }
    ], 
    "<net.smert.jreactphysics3d.body.Body: void setIsAllowedToSleep(boolean)>": [
        {
            "<com.flowpowered.react.body.Body: void setIsAllowedToSleep(boolean)>": 0.4111111111111111
        }, 
        {
            "<com.flowpowered.react.body.Body: void setIsSleeping(boolean)>": 0.38141900723033634
        }, 
        {
            "<boofcv.gui.calibration.CalibratedImageGridPanel: void setDisplay(boolean,boolean,boolean,boolean,boolean,double)>": 0.31813733109966535
        }, 
        {
            "<boofcv.demonstrations.calibration.SubpixelGridTargetDisplay: void setShow(boolean,boolean)>": 0.31639244559094165
        }, 
        {
            "<Catalano.Imaging.Filters.Mirror: void <init>(boolean,boolean)>": 0.31039295736380357
        }
    ]
}