{
    "<com.flowpowered.react.math.Matrix2x2: float get(int,int)>": [
        {
            "<boofcv.alg.weights.WeightPixelUniform_F32: float weight(int,int)>": 0.5495285270308691
        }, 
        {
            "<boofcv.core.image.border.ImageBorderValue$Value_F32: float getOutside(int,int)>": 0.5495285270308691
        }, 
        {
            "<boofcv.core.image.border.ImageBorderValue$Value_F32: void setOutside(int,int,float)>": 0.5183933767987647
        }, 
        {
            "<boofcv.core.image.border.ImageBorderValue$Value_I: void setOutside(int,int,int)>": 0.5073434279468665
        }, 
        {
            "<org.dyn4j.examples.ExampleJOGL: void reshape(com.jogamp.opengl.GLAutoDrawable,int,int,int,int)>": 0.500393775723844
        }
    ], 
    "<com.flowpowered.react.collision.broadphase.PairManager: com.flowpowered.react.collision.broadphase.PairManager$BodyPair findPairWithHashValue(int,int,int)>": [
        {
            "<org.jbox2d.common.MathUtils: int max(int,int)>": 0.6660220365719036
        }, 
        {
            "<org.jbox2d.common.MathUtils: int min(int,int)>": 0.6660220365719036
        }, 
        {
            "<org.jbox2d.particle.ParticleSystem: int limitCapacity(int,int)>": 0.6660220365719036
        }, 
        {
            "<Catalano.Imaging.Texture.BinaryPattern.UniformLocalBinaryPattern: boolean isUniform(int)>": 0.6260527613112379
        }, 
        {
            "<net.smert.jreactphysics3d.collision.broadphase.PairManager: net.smert.jreactphysics3d.collision.broadphase.BodyPair findPairWithHashValue(int,int,int)>": 0.5776820346027153
        }
    ], 
    "<com.flowpowered.react.constraint.ConstraintSolver: void setConstrainedVelocitiesArrays(com.flowpowered.react.math.Vector3[],com.flowpowered.react.math.Vector3[])>": [
        {
            "<boofcv.factory.background.ConfigBackgroundGaussian: void checkValidity()>": 0.20726904858097367
        }, 
        {
            "<boofcv.abst.feature.detect.extract.ConfigExtract: void checkValidity()>": 0.19969312605698578
        }, 
        {
            "<boofcv.core.image.GImageGrayDistorted: java.lang.Class getImageType()>": 0.19535575579923165
        }, 
        {
            "<boofcv.core.image.GImageGrayDistorted: boofcv.struct.image.ImageGray getImage()>": 0.19535575579923165
        }, 
        {
            "<Catalano.Statistics.Distributions.BinomialDistribution: void <init>(int,double)>": 0.19371730009115795
        }
    ], 
    "<com.flowpowered.react.collision.BroadPhasePair: void setPreviousSeparatingAxis(com.flowpowered.react.math.Vector3)>": [
        {
            "<Catalano.Imaging.Filters.GaussianBlur: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Concurrent.Filters.BradleyLocalThreshold: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.CosineTransform: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.BradleyLocalThreshold: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.UnsharpMasking: void <init>()>": 0.018184824186332698
        }
    ], 
    "<com.flowpowered.react.collision.RayCaster$IntersectedBody: void <init>(com.flowpowered.react.body.CollisionBody,com.flowpowered.react.math.Vector3,com.flowpowered.react.collision.RayCaster$1)>": [
        {
            "<org.dyn4j.sandbox.panels.LineGraphPanel: void setStaticSize(java.awt.Dimension)>": 0.03984095364447979
        }, 
        {
            "<org.jbox2d.testbed.tests.DrawingParticles: void step(org.jbox2d.testbed.framework.TestbedSettings)>": 0.03857583749052298
        }, 
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.03823304826514973
        }, 
        {
            "<boofcv.gui.feature.SelectRegionDescriptionPanel: void <init>()>": 0.037826720791800154
        }, 
        {
            "<boofcv.gui.d3.Polygon3DSequenceViewer: void <init>()>": 0.03744654309470488
        }
    ], 
    "<com.flowpowered.react.engine.DynamicsWorld: void updateOverlappingPair(com.flowpowered.react.collision.BroadPhasePair)>": [
        {
            "<net.coobird.thumbnailator.resizers.NullResizer: void <init>(java.lang.Object,java.util.Map)>": 0.1685499656158105
        }, 
        {
            "<net.coobird.thumbnailator.resizers.ProgressiveBilinearResizer: void <init>(java.util.Map)>": 0.1685499656158105
        }, 
        {
            "<net.coobird.thumbnailator.resizers.BicubicResizer: void <init>(java.util.Map)>": 0.1685499656158105
        }, 
        {
            "<net.coobird.thumbnailator.resizers.BilinearResizer: void <init>(java.util.Map)>": 0.1685499656158105
        }, 
        {
            "<net.coobird.thumbnailator.resizers.NullResizer: void <init>()>": 0.15975241260567344
        }
    ], 
    "<com.flowpowered.react.engine.linked.LinkedDynamicsWorld: void clearLinkedBodies()>": [
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void resetContactManifoldListsOfBodies()>": 0.4533080168093735
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void updateRigidBodiesAABB()>": 0.4230676197458741
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void resetBodiesMovementVariable()>": 0.4175783897057852
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void setIsSleepingEnabled(boolean)>": 0.3927305656662409
        }, 
        {
            "<net.smert.jreactphysics3d.collision.CollisionDetection: void computeBroadPhase()>": 0.3650621042095937
        }
    ], 
    "<com.flowpowered.react.math.Vector4: void set(int,float)>": [
        {
            "<boofcv.alg.weights.WeightPixelUniform_F32: float weight(int,int)>": 0.35067848796612633
        }, 
        {
            "<boofcv.core.image.border.ImageBorderValue$Value_F32: float getOutside(int,int)>": 0.35067848796612633
        }, 
        {
            "<boofcv.core.image.border.ImageBorderValue$Value_F32: void setOutside(int,int,float)>": 0.345552599958871
        }, 
        {
            "<boofcv.alg.weights.WeightPixelUniform_F32: float weightIndex(int)>": 0.325477245342895
        }, 
        {
            "<Catalano.Imaging.Tools.GradientImage: float getOrientation(int,int)>": 0.31040348048442923
        }
    ], 
    "<com.flowpowered.react.math.Matrix2x2: com.flowpowered.react.math.Vector2 getRow(int)>": [
        {
            "<boofcv.core.image.border.ImageBorderValue$Value_I: void setOutside(int,int,int)>": 0.4966616068166122
        }, 
        {
            "<org.dyn4j.examples.ExampleJOGL: void reshape(com.jogamp.opengl.GLAutoDrawable,int,int,int,int)>": 0.4893146606557609
        }, 
        {
            "<net.coobird.thumbnailator.geometry.Positions$1: java.awt.Point calculate(int,int,int,int,int,int,int,int)>": 0.47437111780712504
        }, 
        {
            "<Catalano.Imaging.Tools.IntegralImage: int getInternalData(int,int)>": 0.46420451256364215
        }, 
        {
            "<net.coobird.thumbnailator.geometry.Coordinate: java.awt.Point calculate(int,int,int,int,int,int,int,int)>": 0.4578204272586427
        }
    ], 
    "<com.flowpowered.react.math.Vector2: com.flowpowered.react.math.Vector2 add(com.flowpowered.react.math.Vector2,com.flowpowered.react.math.Vector2)>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 abs()>": 0.33504727325988715
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 abs()>": 0.332501895878842
        }, 
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector3 toVector3()>": 0.33192521430159905
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: net.smert.jreactphysics3d.mathematics.Vector3 abs()>": 0.3300894130493818
        }, 
        {
            "<org.jbox2d.common.Vec2: void absLocal()>": 0.3293957108051163
        }
    ], 
    "<com.flowpowered.react.math.Matrix2x2: float getDeterminant()>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Vector2: float lengthSquare()>": 0.4071610568751857
        }, 
        {
            "<org.jbox2d.common.Vec2: float lengthSquared()>": 0.4071610568751857
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: float lengthSquare()>": 0.39854423809786155
        }, 
        {
            "<Catalano.Math.Vector3: float Square()>": 0.39854423809786155
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 inverse()>": 0.39661235793076255
        }
    ], 
    "<com.flowpowered.react.math.Quaternion: void normalize()>": [
        {
            "<Catalano.Math.Vector4: float Norm()>": 0.5077970614930454
        }, 
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.5055672738291276
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 multiply(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": 0.5047068776585149
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.5046574259153123
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 inverse()>": 0.5045384569425517
        }
    ], 
    "<com.flowpowered.react.math.Matrix4x4: void setToIdentity()>": [
        {
            "<org.dyn4j.sandbox.utilities.ColorUtilities: java.awt.Color convertColor(float[])>": 0.1379196154290324
        }, 
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.1232145033894868
        }, 
        {
            "<org.dyn4j.sandbox.Sandbox: void init(com.jogamp.opengl.GLAutoDrawable)>": 0.11956719708121466
        }, 
        {
            "<org.dyn4j.sandbox.SandboxBody: void stencil(com.jogamp.opengl.GL2)>": 0.11934780239639842
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.TestbedMain: void main(java.lang.String[])>": 0.11638363502517113
        }
    ], 
    "<com.flowpowered.react.collision.broadphase.SweepAndPruneAlgorithm$BoxAABB: int hashCode()>": [
        {
            "<Catalano.Math.Tools: int Pow2(int)>": 0.429986375823372
        }, 
        {
            "<net.imglib2.display.awt.UnsignedIntDataBuffer: int getElem(int)>": 0.3490741344281584
        }, 
        {
            "<net.imglib2.display.AbstractArrayColorTable: int argb(int)>": 0.3454149239898697
        }, 
        {
            "<net.imglib2.display.awt.SignedByteDataBuffer: int getElem(int)>": 0.338405861187708
        }, 
        {
            "<org.jbox2d.common.MathUtils: int max(int,int)>": 0.33252598957281454
        }
    ], 
    "<com.flowpowered.react.engine.OverlappingPair: void update()>": [
        {
            "<org.dyn4j.sandbox.panels.LineGraphPanel: void setStaticSize(java.awt.Dimension)>": 0.04134491152973615
        }, 
        {
            "<org.jbox2d.testbed.tests.DrawingParticles: void step(org.jbox2d.testbed.framework.TestbedSettings)>": 0.04003203845127178
        }, 
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.03967630926057839
        }, 
        {
            "<boofcv.gui.feature.SelectRegionDescriptionPanel: void <init>()>": 0.039254643313832986
        }, 
        {
            "<boofcv.gui.d3.Polygon3DSequenceViewer: void <init>()>": 0.03886011427237866
        }
    ], 
    "<com.flowpowered.react.collision.broadphase.NoBroadPhaseAlgorithm: void removeObject(com.flowpowered.react.body.CollisionBody)>": [
        {
            "<net.smert.jreactphysics3d.collision.broadphase.NoBroadPhaseAlgorithm: void removeObject(net.smert.jreactphysics3d.body.CollisionBody)>": 0.3605998168498168
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void computeIslands()>": 0.3166447812717987
        }, 
        {
            "<net.imglib2.KDTree: boolean verifyDimensions(java.util.List,int)>": 0.3020429774376882
        }, 
        {
            "<boofcv.gui.binary.VisualizeBinaryData: java.awt.image.BufferedImage renderContours(java.util.List,int[],int,int,int,java.awt.image.BufferedImage)>": 0.29325434641745074
        }, 
        {
            "<Catalano.Imaging.Tools.BlobExtractor: Catalano.Imaging.FastBitmap Extract(Catalano.Imaging.FastBitmap,Catalano.Imaging.Tools.Blob)>": 0.28705007628282714
        }
    ], 
    "<com.flowpowered.react.collision.broadphase.SweepAndPruneAlgorithm: boolean testIntersect2D(com.flowpowered.react.collision.broadphase.SweepAndPruneAlgorithm$BoxAABB,com.flowpowered.react.collision.broadphase.SweepAndPruneAlgorithm$BoxAABB,int,int)>": [
        {
            "<net.smert.jreactphysics3d.collision.broadphase.SweepAndPruneAlgorithm: boolean testIntersect2D(net.smert.jreactphysics3d.collision.broadphase.BoxAABB,net.smert.jreactphysics3d.collision.broadphase.BoxAABB,int,int)>": 0.636539130092894
        }, 
        {
            "<org.jbox2d.collision.broadphase.DynamicTreeFlatNodes: int getMaxBalance()>": 0.5400551740749449
        }, 
        {
            "<Catalano.Math.Dissimilarities.Dissimilarity: double SokalMichener(int[],int[])>": 0.5270566719049676
        }, 
        {
            "<Catalano.Math.Dissimilarities.Dissimilarity: double RogersTanimoto(int[],int[])>": 0.5270566719049676
        }, 
        {
            "<Catalano.Math.Dissimilarities.Dissimilarity: double Jaccard(int[],int[])>": 0.5268984826810255
        }
    ], 
    "<com.flowpowered.react.body.RigidBody: void applyTorque(com.flowpowered.react.math.Vector3)>": [
        {
            "<org.dyn4j.sandbox.Sandbox: void renderBody(com.jogamp.opengl.GL2,org.dyn4j.sandbox.SandboxBody)>": 0.15066219776353326
        }, 
        {
            "<boofcv.gui.DepthVideoAppBase: void mouseClicked(java.awt.event.MouseEvent)>": 0.14795005126048627
        }, 
        {
            "<boofcv.gui.StereoVideoAppBase: void mouseClicked(java.awt.event.MouseEvent)>": 0.14795005126048627
        }, 
        {
            "<net.imglib2.view.TransformBuilder: void <init>(net.imglib2.Interval,net.imglib2.RandomAccessible)>": 0.14727912127904344
        }, 
        {
            "<boofcv.gui.VideoProcessAppBase: void mouseClicked(java.awt.event.MouseEvent)>": 0.14607290547234328
        }
    ], 
    "<com.flowpowered.react.collision.shape.SphereShape: void updateAABB(com.flowpowered.react.collision.shape.AABB,com.flowpowered.react.math.Transform)>": [
        {
            "<boofcv.factory.background.FactoryBackgroundModel: boofcv.alg.background.stationary.BackgroundStationaryGaussian stationaryGaussian(boofcv.factory.background.ConfigBackgroundGaussian,boofcv.struct.image.ImageType)>": 0.1782008464818133
        }, 
        {
            "<boofcv.factory.background.FactoryBackgroundModel: boofcv.alg.background.moving.BackgroundMovingGaussian movingGaussian(boofcv.factory.background.ConfigBackgroundGaussian,boofcv.struct.distort.PointTransformModel_F32,boofcv.struct.image.ImageType)>": 0.17024944015132593
        }, 
        {
            "<boofcv.factory.background.FactoryBackgroundModel: boofcv.alg.background.stationary.BackgroundStationaryBasic stationaryBasic(boofcv.factory.background.ConfigBackgroundBasic,boofcv.struct.image.ImageType)>": 0.16695245721380172
        }, 
        {
            "<net.imglib2.type.numeric.complex.AbstractComplexType: void setComplexNumber(float,float)>": 0.16153745076698334
        }, 
        {
            "<org.jbox2d.callbacks.DebugDraw: void setCamera(float,float,float)>": 0.15964790409548932
        }
    ], 
    "<com.flowpowered.react.math.Matrix3x3: int hashCode()>": [
        {
            "<net.smert.jreactphysics3d.collision.BodyIndexPair: int hashCode()>": 0.3689007215729643
        }, 
        {
            "<net.smert.jreactphysics3d.collision.shapes.CollisionShape: int hashCode()>": 0.3538254133993859
        }, 
        {
            "<boofcv.alg.feature.describe.DescribeSiftCommon: int getDescriptorLength()>": 0.33927307554618297
        }, 
        {
            "<boofcv.alg.fiducial.square.DetectFiducialSquareBinary: int getTotalGridElements()>": 0.33481327372611813
        }, 
        {
            "<boofcv.app.CreateFiducialSquareBinary: int numberOfElements()>": 0.33481327372611813
        }
    ], 
    "<com.flowpowered.react.collision.CollisionDetection: void broadPhaseNotifyAddedOverlappingPair(com.flowpowered.react.collision.broadphase.PairManager$BodyPair)>": [
        {
            "<net.coobird.thumbnailator.Thumbnails$Builder: net.coobird.thumbnailator.Thumbnails$Builder keepAspectRatio(boolean)>": 0.14312532938888956
        }, 
        {
            "<net.coobird.thumbnailator.Thumbnails$Builder: net.coobird.thumbnailator.Thumbnails$Builder height(int)>": 0.111131627450155
        }, 
        {
            "<net.coobird.thumbnailator.Thumbnails$Builder: net.coobird.thumbnailator.Thumbnails$Builder width(int)>": 0.111131627450155
        }, 
        {
            "<net.coobird.thumbnailator.Thumbnails$Builder: net.coobird.thumbnailator.Thumbnails$Builder resizer(net.coobird.thumbnailator.resizers.Resizer)>": 0.11060119782041292
        }, 
        {
            "<net.coobird.thumbnailator.resizers.NullResizer: void <init>(java.lang.Object,java.util.Map)>": 0.10969086361906959
        }
    ], 
    "<com.flowpowered.react.collision.RayCaster: boolean intersects(com.flowpowered.react.math.Vector3,com.flowpowered.react.math.Vector3,com.flowpowered.react.collision.shape.CapsuleShape,com.flowpowered.react.math.Vector3)>": [
        {
            "<boofcv.alg.distort.radtan.RemoveRadialPtoN_F32: void compute(float,float,georegression.struct.point.Point2D_F32)>": 0.4231944768205207
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Quaternion: net.smert.jreactphysics3d.mathematics.Quaternion fromMatrix(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": 0.41857949449432297
        }, 
        {
            "<org.jbox2d.particle.ParticleSystem: void raycast(org.jbox2d.callbacks.ParticleRaycastCallback,org.jbox2d.common.Vec2,org.jbox2d.common.Vec2)>": 0.41384665761806205
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 inverse()>": 0.41292433145881596
        }, 
        {
            "<org.jbox2d.collision.shapes.CircleShape: boolean raycast(org.jbox2d.collision.RayCastOutput,org.jbox2d.collision.RayCastInput,org.jbox2d.common.Transform,int)>": 0.4122390019739445
        }
    ], 
    "<com.flowpowered.react.math.Transform: com.flowpowered.react.math.Vector3 multiply(com.flowpowered.react.math.Transform,com.flowpowered.react.math.Vector3)>": [
        {
            "<net.smert.jreactphysics3d.collision.broadphase.BodyPair: int hashCode()>": 0.0
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: void <init>(float,float,float,float)>": 0.0
        }, 
        {
            "<net.smert.jreactphysics3d.constraint.SliderJoint: void initBeforeSolve(net.smert.jreactphysics3d.engine.ConstraintSolverData)>": 0.0
        }, 
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.EPA.Utils: void halfLink(net.smert.jreactphysics3d.collision.narrowphase.EPA.EdgeEPA,net.smert.jreactphysics3d.collision.narrowphase.EPA.EdgeEPA)>": 0.0
        }, 
        {
            "<net.smert.jreactphysics3d.collision.shapes.BoxShape: boolean isEqualTo(net.smert.jreactphysics3d.collision.shapes.CollisionShape)>": 0.0
        }
    ], 
    "<com.flowpowered.react.collision.shape.CollisionShape$CollisionShapeType: void <init>(java.lang.String,int)>": [
        {
            "<net.smert.jreactphysics3d.configuration.ContactsPositionCorrectionTechnique: void <init>(java.lang.String,int)>": 0.4415584415584415
        }, 
        {
            "<net.smert.jreactphysics3d.constraint.JointType: void <init>(java.lang.String,int)>": 0.4415584415584415
        }, 
        {
            "<net.smert.jreactphysics3d.collision.shapes.CollisionShapeType: void <init>(java.lang.String,int)>": 0.4415584415584415
        }, 
        {
            "<net.smert.jreactphysics3d.configuration.JointsPositionCorrectionTechnique: void <init>(java.lang.String,int)>": 0.4415584415584415
        }, 
        {
            "<Catalano.Statistics.Analysis.PrincipalComponentAnalysis$AnalysisMethod: void <init>(java.lang.String,int)>": 0.4415584415584415
        }
    ], 
    "<com.flowpowered.react.math.Vector2: float get(int)>": [
        {
            "<boofcv.alg.weights.WeightPixelUniform_F32: float weight(int,int)>": 0.4252670770492092
        }, 
        {
            "<boofcv.core.image.border.ImageBorderValue$Value_F32: float getOutside(int,int)>": 0.4252670770492092
        }, 
        {
            "<boofcv.alg.weights.WeightPixelUniform_F32: float weightIndex(int)>": 0.39557787939464667
        }, 
        {
            "<boofcv.core.image.border.ImageBorderValue$Value_F32: void setOutside(int,int,float)>": 0.37652942644698706
        }, 
        {
            "<boofcv.alg.feature.detect.intensity.impl.ImplFastHelper_F32: void setThresholds(int)>": 0.3614041905012866
        }
    ], 
    "<com.flowpowered.react.math.Matrix4x4: void <init>(float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float)>": [
        {
            "<org.jbox2d.testbed.framework.j2d.DebugDrawJ2D$1: java.lang.Object newColor(float,float,float,float)>": 0.6598782027437448
        }, 
        {
            "<org.jbox2d.common.MathUtils: float clamp(float,float,float)>": 0.4891662582182036
        }, 
        {
            "<org.jbox2d.dynamics.contacts.Contact: float mixFriction(float,float)>": 0.48586475829112846
        }, 
        {
            "<org.jbox2d.common.Settings: float mixFriction(float,float)>": 0.48586475829112846
        }, 
        {
            "<net.smert.jreactphysics3d.engine.Profiler: float GetElapsedTimeSinceStart()>": 0.4741360107268963
        }
    ], 
    "<com.flowpowered.react.constraint.HingeJoint: void solveVelocityConstraint(com.flowpowered.react.constraint.ConstraintSolver$ConstraintSolverData)>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 inverse()>": 0.24890848434737609
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector2: net.smert.jreactphysics3d.mathematics.Vector2 setUnitOrthogonal()>": 0.24646277830319482
        }, 
        {
            "<org.jbox2d.collision.shapes.ChainShape: void computeAABB(org.jbox2d.collision.AABB,org.jbox2d.common.Transform,int)>": 0.24568881810410054
        }, 
        {
            "<org.jbox2d.collision.shapes.CircleShape: boolean testPoint(org.jbox2d.common.Transform,org.jbox2d.common.Vec2)>": 0.24541419351870222
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 multiply(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": 0.24506539854570808
        }
    ], 
    "<com.flowpowered.react.constraint.HingeJoint: void setMotorSpeed(float)>": [
        {
            "<org.jbox2d.common.MathUtils: float min(float,float)>": 0.27217205551146173
        }, 
        {
            "<org.jbox2d.dynamics.contacts.Contact: float mixRestitution(float,float)>": 0.27217205551146173
        }, 
        {
            "<org.jbox2d.common.MathUtils: float max(float,float)>": 0.27217205551146173
        }, 
        {
            "<org.jbox2d.common.Settings: float mixRestitution(float,float)>": 0.27217205551146173
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Mathematics: boolean ApproxEqual(float,float,float)>": 0.24674262326211144
        }
    ], 
    "<com.flowpowered.react.collision.linkedphase.LinkedPhase: java.util.Set getBodiesInRange(com.flowpowered.react.body.RigidBody)>": [
        {
            "<boofcv.alg.interpolate.impl.NearestNeighborPixel_S16: float get_border(float,float)>": 0.40353871683174836
        }, 
        {
            "<boofcv.alg.interpolate.impl.NearestNeighborPixel_U8: float get_border(float,float)>": 0.40353871683174836
        }, 
        {
            "<boofcv.alg.interpolate.impl.NearestNeighborPixel_U16: float get_border(float,float)>": 0.40353871683174836
        }, 
        {
            "<boofcv.alg.interpolate.impl.NearestNeighborPixel_S32: float get_border(float,float)>": 0.40353871683174836
        }, 
        {
            "<boofcv.alg.interpolate.impl.NearestNeighborPixel_F32: float get_border(float,float)>": 0.3536454562800827
        }
    ], 
    "<com.flowpowered.react.collision.shape.ConeShape: com.flowpowered.react.math.Vector3 getLocalSupportPointWithMargin(com.flowpowered.react.math.Vector3)>": [
        {
            "<Catalano.Math.Vector3: float Norm()>": 0.35149341831031
        }, 
        {
            "<Catalano.Math.Vector3: float Normalize()>": 0.3509150651624006
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 abs()>": 0.34970808499694084
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 inverse()>": 0.34832587265178866
        }, 
        {
            "<Catalano.Math.Vector4: float Norm()>": 0.3481019811313741
        }
    ], 
    "<com.flowpowered.react.math.Vector4: com.flowpowered.react.math.Vector4 normalize()>": [
        {
            "<Catalano.Math.Vector4: float Norm()>": 0.5065557152724729
        }, 
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.5043700279919913
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 multiply(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": 0.5035116140129858
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.5034624690093009
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 inverse()>": 0.5033436935651576
        }
    ], 
    "<com.flowpowered.react.collision.broadphase.PairManager: com.flowpowered.react.collision.broadphase.PairManager$BodyPair getLastOverlappingPair()>": [
        {
            "<boofcv.alg.segmentation.watershed.WatershedVincentSoille1991: int getTotalRegions()>": 0.3563740901696042
        }, 
        {
            "<net.imglib2.img.planar.PlanarImg: net.imglib2.img.basictypeaccess.array.ArrayDataAccess update(java.lang.Object)>": 0.30041873235939165
        }, 
        {
            "<Catalano.Imaging.Tools.BlobDetection: void ShuffleColor()>": 0.29165904468749415
        }, 
        {
            "<net.imglib2.util.RealSum: void <init>(int)>": 0.28625670574657586
        }, 
        {
            "<boofcv.alg.filter.binary.LinearContourLabelChang2004: void handleStep3(boofcv.struct.image.GrayS32)>": 0.2861106942472253
        }
    ], 
    "<com.flowpowered.react.math.Vector2: int hashCode()>": [
        {
            "<org.jbox2d.common.Vec2: int hashCode()>": 0.7133023170954206
        }, 
        {
            "<org.jbox2d.common.Vec3: int hashCode()>": 0.5830590393718094
        }, 
        {
            "<org.jbox2d.testbed.pooling.ColorKey: int hashCode()>": 0.5671461395922573
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Quaternion: int hashCode()>": 0.4869717669385721
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: int hashCode()>": 0.4869717669385721
        }
    ], 
    "<com.flowpowered.react.collision.shape.ConvexMeshShape: void addEdge(int,int)>": [
        {
            "<boofcv.alg.feature.detect.interest.GeneralFeatureDetector: void <init>(boofcv.abst.feature.detect.intensity.GeneralFeatureIntensity,boofcv.abst.feature.detect.extract.NonMaxSuppression)>": 0.22615682386723285
        }, 
        {
            "<org.jbox2d.testbed.framework.TestbedModel: void setCurrTestIndex(int)>": 0.2199593115015476
        }, 
        {
            "<boofcv.alg.sfm.d3.VisOdomDualTrackPnP: int dropUnusedTracks()>": 0.21719771039908053
        }, 
        {
            "<net.coobird.thumbnailator.makers.FixedSizeThumbnailMaker: net.coobird.thumbnailator.makers.FixedSizeThumbnailMaker size(int,int)>": 0.20989799485130353
        }, 
        {
            "<boofcv.io.jcodec.JCodecSimplified: void setLoop(boolean)>": 0.2087720045998127
        }
    ], 
    "<com.flowpowered.react.collision.shape.BoxShape: void <init>(com.flowpowered.react.math.Vector3,float)>": [
        {
            "<boofcv.factory.background.ConfigBackgroundGaussian: void checkValidity()>": 0.4148956577676298
        }, 
        {
            "<boofcv.factory.background.ConfigBackgroundBasic: void checkValidity()>": 0.38253338484584026
        }, 
        {
            "<Catalano.Math.Vector3: float getMin()>": 0.2756145972391662
        }, 
        {
            "<Catalano.Math.Vector3: float getMax()>": 0.2756145972391662
        }, 
        {
            "<boofcv.alg.distort.DistortImageOps: void updateBoundBox(boofcv.struct.distort.PixelTransform_F32,boofcv.struct.ImageRectangle_F32)>": 0.2751601577462672
        }
    ], 
    "<com.flowpowered.react.math.Vector2: com.flowpowered.react.math.Vector2 normalize()>": [
        {
            "<Catalano.Math.Vector3: float Norm()>": 0.47853792176569065
        }, 
        {
            "<Catalano.Math.Vector4: float Norm()>": 0.47172766157643076
        }, 
        {
            "<Catalano.Math.Vector3: float Normalize()>": 0.4670575402697445
        }, 
        {
            "<boofcv.alg.feature.detect.intensity.impl.ImplShiTomasiCorner_F32: float computeIntensity()>": 0.4646166247130709
        }, 
        {
            "<boofcv.alg.feature.detect.intensity.impl.ImplShiTomasiCornerWeighted_F32: float computeResponse()>": 0.4646166247130709
        }
    ], 
    "<com.flowpowered.react.math.Vector3: com.flowpowered.react.math.Vector3 multiply(float,com.flowpowered.react.math.Vector3)>": [
        {
            "<boofcv.alg.feature.detect.line.gridline.Edgel: void <init>(float,float,float)>": 0.1490551505581848
        }, 
        {
            "<org.jbox2d.common.MathUtils: float map(float,float,float,float,float)>": 0.14096019152099476
        }, 
        {
            "<Catalano.Math.Matrix3x3: void <init>(float,float,float,float,float,float,float,float,float)>": 0.14047546561061652
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 set(float,float,float,float,float,float,float,float,float)>": 0.14034914351761746
        }, 
        {
            "<net.smert.jreactphysics3d.engine.Profiler: float GetElapsedTimeSinceStart()>": 0.1400270254342746
        }
    ], 
    "<com.flowpowered.react.collision.shape.CapsuleShape: void <init>(float,float)>": [
        {
            "<boofcv.factory.background.ConfigBackgroundGaussian: void checkValidity()>": 0.38846883045332353
        }, 
        {
            "<boofcv.factory.background.ConfigBackgroundBasic: void checkValidity()>": 0.372203410526392
        }, 
        {
            "<net.smert.jreactphysics3d.collision.shapes.CylinderShape: void <init>(float,float,float)>": 0.3528370187887991
        }, 
        {
            "<boofcv.alg.background.stationary.BackgroundStationaryGaussian: void <init>(float,float,boofcv.struct.image.ImageType)>": 0.3469416758243944
        }, 
        {
            "<boofcv.alg.background.moving.BackgroundMovingGaussian: void <init>(float,float,boofcv.struct.distort.PointTransformModel_F32,boofcv.struct.image.ImageType)>": 0.33650931111542143
        }
    ], 
    "<com.flowpowered.react.engine.DynamicsWorld: com.flowpowered.react.constraint.Joint createJoint(com.flowpowered.react.constraint.Joint$JointInfo)>": [
        {
            "<boofcv.core.image.border.FactoryImageBorder: boofcv.core.image.border.ImageBorder single(java.lang.Class,boofcv.core.image.border.BorderType)>": 0.28704881141712385
        }, 
        {
            "<boofcv.core.image.border.FactoryImageBorder: boofcv.core.image.border.ImageBorder interleaved(java.lang.Class,boofcv.core.image.border.BorderType)>": 0.28704881141712385
        }, 
        {
            "<boofcv.factory.weights.FactoryWeights: boofcv.alg.weights.WeightPixel_F32 pixel(boofcv.factory.weights.WeightType,boolean)>": 0.2865867400766491
        }, 
        {
            "<boofcv.factory.feature.detect.template.FactoryTemplateMatching: boofcv.alg.feature.detect.template.TemplateMatchingIntensity createIntensity(boofcv.factory.feature.detect.template.TemplateScoreType,java.lang.Class)>": 0.28515202148899277
        }, 
        {
            "<boofcv.factory.weights.FactoryWeights: boofcv.alg.weights.WeightDistance_F32 distance(boofcv.factory.weights.WeightType,float,boolean)>": 0.2801575495395846
        }
    ], 
    "<com.flowpowered.react.constraint.ContactPoint: void setWorldPointOnFirstBody(com.flowpowered.react.math.Vector3)>": [
        {
            "<Catalano.Imaging.Filters.GaussianBlur: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Concurrent.Filters.BradleyLocalThreshold: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.CosineTransform: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.BradleyLocalThreshold: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.UnsharpMasking: void <init>()>": 0.018184824186332698
        }
    ], 
    "<com.flowpowered.react.engine.DynamicsWorld: void addJointToBody(com.flowpowered.react.constraint.Joint)>": [
        {
            "<boofcv.demonstrations.tracker.VideoTrackerObjectQuadApp: void process(boofcv.io.image.SimpleImageSequence)>": 0.10065595966403643
        }, 
        {
            "<boofcv.demonstrations.fiducial.FiducialTrackerApp: void process(boofcv.io.image.SimpleImageSequence)>": 0.09922052510847315
        }, 
        {
            "<Catalano.Statistics.Distributions.BinomialDistribution: void <init>(int,double)>": 0.09698858754422515
        }, 
        {
            "<boofcv.factory.background.ConfigBackgroundGaussian: void checkValidity()>": 0.09682137694272418
        }, 
        {
            "<boofcv.factory.feature.detect.intensity.FactoryIntensityPointAlg: boofcv.alg.feature.detect.intensity.FastCornerIntensity fast(int,int,java.lang.Class)>": 0.09570477633026507
        }
    ], 
    "<com.flowpowered.react.collision.shape.CapsuleShape: com.flowpowered.react.math.Vector3 getLocalSupportPointWithMargin(com.flowpowered.react.math.Vector3)>": [
        {
            "<boofcv.alg.distort.DistortImageOps: void updateBoundBox(boofcv.struct.distort.PixelTransform_F32,boofcv.struct.ImageRectangle_F32)>": 0.2179058887230672
        }, 
        {
            "<Catalano.Math.Vector3: float getMin()>": 0.21436243409500683
        }, 
        {
            "<Catalano.Math.Vector3: float getMax()>": 0.21436243409500683
        }, 
        {
            "<Catalano.Math.Vector4: boolean equals(java.lang.Object)>": 0.20193058520924662
        }, 
        {
            "<org.jbox2d.common.MathUtils: void clampToOut(org.jbox2d.common.Vec2,org.jbox2d.common.Vec2,org.jbox2d.common.Vec2,org.jbox2d.common.Vec2)>": 0.20006314321717342
        }
    ], 
    "<com.flowpowered.react.math.Quaternion: com.flowpowered.react.math.Quaternion getUnit()>": [
        {
            "<Catalano.Math.Vector4: float Norm()>": 0.4939547764800789
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 inverse()>": 0.4905379062671723
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 multiply(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": 0.48941444460559064
        }, 
        {
            "<Catalano.Math.Vector3: float Norm()>": 0.48682773692967646
        }, 
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.4865574182847005
        }
    ], 
    "<com.flowpowered.react.engine.ContactSolver: com.flowpowered.react.engine.Impulse computePenetrationImpulse(float,com.flowpowered.react.engine.ContactSolver$ContactPointSolver)>": [
        {
            "<boofcv.alg.feature.detect.line.gridline.Edgel: void <init>(float,float,float)>": 0.04307120808965034
        }, 
        {
            "<net.imglib2.type.numeric.complex.AbstractComplexType: void setComplexNumber(float,float)>": 0.04070695472596215
        }, 
        {
            "<org.jbox2d.callbacks.DebugDraw: void setCamera(float,float,float)>": 0.0402025950625807
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.DebugDrawJ2D$1: java.awt.Color newColor(float,float,float,float)>": 0.0398741059208812
        }, 
        {
            "<Catalano.Core.FloatPoint: void <init>(float,float)>": 0.03903520302671684
        }
    ], 
    "<com.flowpowered.react.collision.shape.BoxShape: void computeLocalInertiaTensor(com.flowpowered.react.math.Matrix3x3,float)>": [
        {
            "<org.jbox2d.common.MathUtils: float clamp(float,float,float)>": 0.40598554829757294
        }, 
        {
            "<org.jbox2d.dynamics.contacts.Contact: float mixFriction(float,float)>": 0.40526796262750825
        }, 
        {
            "<org.jbox2d.common.Settings: float mixFriction(float,float)>": 0.40526796262750825
        }, 
        {
            "<boofcv.alg.feature.detect.intensity.impl.ImplHarrisCorner_F32: float computeIntensity()>": 0.4023763933534569
        }, 
        {
            "<boofcv.alg.feature.detect.intensity.impl.ImplHarrisCornerWeighted_F32: float computeResponse()>": 0.4023763933534569
        }
    ], 
    "<com.flowpowered.react.engine.ContactManifold: void setSecondFrictionVector(com.flowpowered.react.math.Vector3)>": [
        {
            "<Catalano.Imaging.Filters.GaussianBlur: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Concurrent.Filters.BradleyLocalThreshold: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.CosineTransform: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.BradleyLocalThreshold: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.UnsharpMasking: void <init>()>": 0.018184824186332698
        }
    ], 
    "<com.flowpowered.react.engine.ContactSolver: void setConstrainedVelocitiesArrays(com.flowpowered.react.math.Vector3[],com.flowpowered.react.math.Vector3[])>": [
        {
            "<boofcv.factory.background.ConfigBackgroundGaussian: void checkValidity()>": 0.24558197479523
        }, 
        {
            "<boofcv.abst.feature.detect.extract.ConfigExtract: void checkValidity()>": 0.23643292370623695
        }, 
        {
            "<boofcv.core.image.GImageGrayDistorted: java.lang.Class getImageType()>": 0.23104192695741527
        }, 
        {
            "<boofcv.core.image.GImageGrayDistorted: boofcv.struct.image.ImageGray getImage()>": 0.23104192695741527
        }, 
        {
            "<Catalano.Statistics.Distributions.BinomialDistribution: void <init>(int,double)>": 0.22297502277467293
        }
    ], 
    "<com.flowpowered.react.math.Transform: void setToIdentity()>": [
        {
            "<org.jbox2d.testbed.tests.DominoTower: org.jbox2d.common.Vec2 getDefaultCameraPos()>": 0.04937432319157865
        }, 
        {
            "<org.jbox2d.testbed.tests.BulletTest: org.jbox2d.common.Vec2 getDefaultCameraPos()>": 0.04937432319157865
        }, 
        {
            "<org.jbox2d.testbed.framework.TestbedTest: org.jbox2d.common.Vec2 getDefaultCameraPos()>": 0.04937432319157865
        }, 
        {
            "<org.jbox2d.testbed.tests.BlobTest4: org.jbox2d.common.Vec2 getDefaultCameraPos()>": 0.04937432319157865
        }, 
        {
            "<org.jbox2d.testbed.tests.CircleStress: org.jbox2d.common.Vec2 getDefaultCameraPos()>": 0.04937432319157865
        }
    ], 
    "<com.flowpowered.react.engine.CollisionWorld: void <init>()>": [
        {
            "<net.smert.jreactphysics3d.engine.CollisionWorld: void <init>()>": 0.38256242220893144
        }, 
        {
            "<org.dyn4j.sandbox.persist.XmlReader: void <init>()>": 0.31373041783571604
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void <init>(net.smert.jreactphysics3d.mathematics.Vector3,float)>": 0.30731677802545493
        }, 
        {
            "<boofcv.gui.feature.ScaleSpacePyramidPointPanel: void <init>(double)>": 0.2752607621245601
        }, 
        {
            "<boofcv.alg.filter.binary.Contour: void <init>()>": 0.27146691383362975
        }
    ], 
    "<com.flowpowered.react.math.Quaternion: void <init>(float,float,float,float)>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: void <init>(float,float,float,float,float,float,float,float,float)>": 0.6305295083505689
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: void <init>(float,float,float,float)>": 0.6180618128461138
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Quaternion: void <init>(float,float,float,float)>": 0.6180618128461138
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: void <init>(float,float,float)>": 0.6064048416899118
        }, 
        {
            "<org.jbox2d.testbed.pooling.ColorKey: void set(float,float,float)>": 0.597555262225389
        }
    ], 
    "<com.flowpowered.react.math.Vector3: int hashCode()>": [
        {
            "<org.jbox2d.common.Vec3: int hashCode()>": 0.6839368101956593
        }, 
        {
            "<org.jbox2d.testbed.pooling.ColorKey: int hashCode()>": 0.5906932274156884
        }, 
        {
            "<org.jbox2d.common.Vec2: int hashCode()>": 0.5830590393718094
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Quaternion: int hashCode()>": 0.5062243573061735
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: int hashCode()>": 0.5062243573061735
        }
    ], 
    "<com.flowpowered.react.math.Matrix2x2: com.flowpowered.react.math.Matrix2x2 getTranspose()>": [
        {
            "<org.jbox2d.testbed.framework.j2d.DebugDrawJ2D$1: java.awt.Color newColor(float,float,float,float)>": 0.24977079175260378
        }, 
        {
            "<org.jbox2d.callbacks.DebugDraw: void setCamera(float,float,float)>": 0.24808767488439915
        }, 
        {
            "<org.jbox2d.testbed.framework.TestbedCamera: void setCamera(org.jbox2d.common.Vec2,float)>": 0.24428181255747558
        }, 
        {
            "<org.jbox2d.common.Mat33: void <init>(float,float,float,float,float,float,float,float,float)>": 0.2407334254392862
        }, 
        {
            "<boofcv.factory.background.FactoryBackgroundModel: boofcv.alg.background.stationary.BackgroundStationaryGaussian stationaryGaussian(boofcv.factory.background.ConfigBackgroundGaussian,boofcv.struct.image.ImageType)>": 0.2401559717240707
        }
    ], 
    "<com.flowpowered.react.body.RigidBody: void setIsSleeping(boolean)>": [
        {
            "<boofcv.demonstrations.feature.disparity.VisualizeStereoDisparity: void changeGuiActive(boolean,boolean)>": 0.15064191421060857
        }, 
        {
            "<boofcv.alg.feature.detect.extract.NonMaxBlockRelaxed: void <init>(boolean,boolean)>": 0.1445051042948175
        }, 
        {
            "<boofcv.alg.feature.detect.extract.NonMaxBlockStrict: void <init>(boolean,boolean)>": 0.1445051042948175
        }, 
        {
            "<org.dyn4j.dynamics.WeldJointTest: void isSpringDamper()>": 0.1443777366374992
        }, 
        {
            "<org.dyn4j.dynamics.DistanceJointTest: void isSpringDamper()>": 0.1436472217143158
        }
    ], 
    "<com.flowpowered.react.math.Vector4: com.flowpowered.react.math.Vector4 set(com.flowpowered.react.math.Vector4)>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 abs()>": 0.4256714634797857
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 abs()>": 0.4229558427748502
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: net.smert.jreactphysics3d.mathematics.Vector3 abs()>": 0.4201977893509872
        }, 
        {
            "<org.jbox2d.common.Vec2: void absLocal()>": 0.41973192911492135
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 invert()>": 0.41440393910442697
        }
    ], 
    "<com.flowpowered.react.collision.shape.ConvexMeshShape: void <init>(float[],int,int)>": [
        {
            "<Catalano.Math.Vector4: boolean equals(java.lang.Object)>": 0.25161372797530446
        }, 
        {
            "<boofcv.alg.feature.detect.line.ImageLinePruneMerge: void pruneSimilar(float,float,int,int)>": 0.24918616995554255
        }, 
        {
            "<Catalano.Math.Vector3: float getMin()>": 0.24910629600395262
        }, 
        {
            "<Catalano.Math.Vector3: float getMax()>": 0.24910629600395262
        }, 
        {
            "<boofcv.alg.distort.DistortImageOps: void updateBoundBox(boofcv.struct.distort.PixelTransform_F32,boofcv.struct.ImageRectangle_F32)>": 0.24664383174266277
        }
    ], 
    "<com.flowpowered.react.engine.ContactSolver: com.flowpowered.react.engine.Impulse computeFriction2Impulse(float,com.flowpowered.react.engine.ContactSolver$ContactPointSolver)>": [
        {
            "<boofcv.alg.feature.detect.line.gridline.Edgel: void <init>(float,float,float)>": 0.04307120808965034
        }, 
        {
            "<net.imglib2.type.numeric.complex.AbstractComplexType: void setComplexNumber(float,float)>": 0.04070695472596215
        }, 
        {
            "<org.jbox2d.callbacks.DebugDraw: void setCamera(float,float,float)>": 0.0402025950625807
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.DebugDrawJ2D$1: java.awt.Color newColor(float,float,float,float)>": 0.0398741059208812
        }, 
        {
            "<Catalano.Core.FloatPoint: void <init>(float,float)>": 0.03903520302671684
        }
    ], 
    "<com.flowpowered.react.collision.broadphase.PairManager: int computePairOffset(com.flowpowered.react.collision.broadphase.PairManager$BodyPair)>": [
        {
            "<boofcv.abst.feature.detect.extract.ConfigExtract: void checkValidity()>": 0.3015365085053463
        }, 
        {
            "<boofcv.alg.shapes.polygon.BinaryPolygonDetector: void setNumberOfSides(int,int)>": 0.2970903649033699
        }, 
        {
            "<net.coobird.thumbnailator.builders.ThumbnailParameterBuilder: net.coobird.thumbnailator.builders.ThumbnailParameterBuilder size(int,int)>": 0.29048191533493156
        }, 
        {
            "<boofcv.abst.feature.detect.interest.ConfigFast: void checkValidity()>": 0.2864319700281361
        }, 
        {
            "<boofcv.struct.image.ImageGray: boofcv.struct.image.ImageGray subimage(int,int,int,int,boofcv.struct.image.ImageGray)>": 0.2801784788021326
        }
    ], 
    "<com.flowpowered.react.constraint.SliderJoint: void warmstart(com.flowpowered.react.constraint.ConstraintSolver$ConstraintSolverData)>": [
        {
            "<net.imglib2.util.Util: int round(float)>": 0.08617928061205002
        }, 
        {
            "<boofcv.struct.feature.CachedSineCosine_F32: int computeIndex(float)>": 0.08581896969577042
        }, 
        {
            "<org.jbox2d.collision.shapes.ChainShape: void computeAABB(org.jbox2d.collision.AABB,org.jbox2d.common.Transform,int)>": 0.08479570786107886
        }, 
        {
            "<org.jbox2d.particle.ParticleSystem: void solvePressure(org.jbox2d.dynamics.TimeStep)>": 0.08474822083432737
        }, 
        {
            "<org.jbox2d.dynamics.Island: void solve(org.jbox2d.dynamics.Profile,org.jbox2d.dynamics.TimeStep,org.jbox2d.common.Vec2,boolean)>": 0.08398065442553251
        }
    ], 
    "<com.flowpowered.react.collision.narrowphase.GJK.Simplex: void updateCache()>": [
        {
            "<org.jbox2d.collision.broadphase.Pair: int compareTo(org.jbox2d.collision.broadphase.Pair)>": 0.275693325613394
        }, 
        {
            "<Catalano.Imaging.Shapes.IntRectangle: boolean isInside(int,int)>": 0.2741797117981249
        }, 
        {
            "<Catalano.Imaging.Filters.HysteresisThreshold: void applyInPlace(Catalano.Imaging.FastBitmap)>": 0.2734320286696267
        }, 
        {
            "<org.jbox2d.collision.broadphase.Pair: int compareTo(java.lang.Object)>": 0.27263249033675047
        }, 
        {
            "<boofcv.misc.BoofMiscOps: void boundRectangleInside(boofcv.struct.image.ImageBase,boofcv.struct.ImageRectangle)>": 0.2724916977291429
        }
    ], 
    "<com.flowpowered.react.engine.DynamicsWorld: void resetBodiesForceAndTorque()>": [
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void resetContactManifoldListsOfBodies()>": 0.35065606221301915
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void updateRigidBodiesAABB()>": 0.3310008732420588
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void resetBodiesMovementVariable()>": 0.3176235918980885
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void setIsSleepingEnabled(boolean)>": 0.3080403446271625
        }, 
        {
            "<net.smert.jreactphysics3d.collision.CollisionDetection: void computeBroadPhase()>": 0.2856212562128687
        }
    ], 
    "<com.flowpowered.react.constraint.SliderJoint$SliderJointInfo: void <init>(com.flowpowered.react.body.RigidBody,com.flowpowered.react.body.RigidBody,com.flowpowered.react.math.Vector3,com.flowpowered.react.math.Vector3,float,float,float,float)>": [
        {
            "<org.jbox2d.common.MathUtils: float clamp(float,float,float)>": 0.3353013451228443
        }, 
        {
            "<org.jbox2d.dynamics.contacts.Contact: float mixFriction(float,float)>": 0.33284283086543015
        }, 
        {
            "<org.jbox2d.common.Settings: float mixFriction(float,float)>": 0.33284283086543015
        }, 
        {
            "<net.smert.jreactphysics3d.engine.Profiler: float GetElapsedTimeSinceStart()>": 0.3251935116599583
        }, 
        {
            "<boofcv.alg.color.ColorRgb: float rgbToGray_Weighted(float,float,float)>": 0.32360812160838337
        }
    ], 
    "<com.flowpowered.react.collision.CollisionDetection: void <init>(com.flowpowered.react.engine.CollisionWorld)>": [
        {
            "<org.dyn4j.sandbox.utilities.RenderUtilities: void drawJoint(com.jogamp.opengl.GL2,org.dyn4j.dynamics.joint.Joint,double)>": 0.23455847990005435
        }, 
        {
            "<boofcv.alg.filter.misc.AverageDownSampleOps: void down(boofcv.struct.image.ImageGray,int,boofcv.struct.image.ImageGray)>": 0.23024120087692074
        }, 
        {
            "<net.coobird.thumbnailator.makers.ThumbnailMaker$ReadinessTracker: void <init>()>": 0.22347618601856797
        }, 
        {
            "<boofcv.io.jcodec.JCodecMediaManager: void <init>()>": 0.22347618601856797
        }, 
        {
            "<org.dyn4j.sandbox.input.Keyboard: void <init>()>": 0.22347618601856797
        }
    ], 
    "<com.flowpowered.react.math.Matrix3x3: float getTrace()>": [
        {
            "<org.jbox2d.dynamics.joints.GearJoint: float getReactionTorque(float)>": 0.38254651168841475
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 inverse()>": 0.37491207845936425
        }, 
        {
            "<org.jbox2d.particle.ParticleSystem: float getParticleInvMass()>": 0.3741327523593238
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 multiply(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": 0.37375489118349003
        }, 
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.3732946582342528
        }
    ], 
    "<com.flowpowered.react.collision.broadphase.SweepAndPruneAlgorithm$AABBInt: void <init>(long,long,com.flowpowered.react.collision.broadphase.SweepAndPruneAlgorithm$1)>": [
        {
            "<net.smert.jreactphysics3d.collision.broadphase.AABBInt: void <init>(long,long)>": 0.4713655698443367
        }, 
        {
            "<net.imglib2.util.IntervalIndexer: long indexToPositionWithOffset(long,long[],long[],long[],int)>": 0.3349662219373462
        }, 
        {
            "<net.imglib2.view.SubsampleIntervalView: void <init>(net.imglib2.RandomAccessibleInterval,long)>": 0.32832519184241016
        }, 
        {
            "<net.imglib2.iterator.IntervalIterator: void <init>(long[],long[])>": 0.3217338900699826
        }, 
        {
            "<net.imglib2.view.SubsampleIntervalView: void <init>(net.imglib2.RandomAccessibleInterval,long[])>": 0.3215835772395368
        }
    ], 
    "<com.flowpowered.react.collision.broadphase.PairManager: com.flowpowered.react.collision.broadphase.PairManager$BodyPair findPair(int,int)>": [
        {
            "<net.smert.jreactphysics3d.collision.broadphase.PairManager: int computeHashBodies(int,int)>": 0.6129947482598213
        }, 
        {
            "<net.smert.jreactphysics3d.collision.broadphase.PairManager: net.smert.jreactphysics3d.collision.broadphase.BodyPair findPair(int,int)>": 0.6001247354847153
        }, 
        {
            "<net.smert.jreactphysics3d.collision.broadphase.PairManager: net.smert.jreactphysics3d.collision.broadphase.BodyPair addPair(net.smert.jreactphysics3d.body.CollisionBody,net.smert.jreactphysics3d.body.CollisionBody)>": 0.5622389266580019
        }, 
        {
            "<net.smert.jreactphysics3d.collision.broadphase.PairManager: int computeHash32Bits(int)>": 0.5472390291718174
        }, 
        {
            "<net.smert.jreactphysics3d.collision.broadphase.PairManager: void reallocatePairs()>": 0.5033520673097667
        }
    ], 
    "<com.flowpowered.react.math.Vector2: float dot(com.flowpowered.react.math.Vector2)>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Vector2: float lengthSquare()>": 0.47792427104524626
        }, 
        {
            "<org.jbox2d.common.Vec2: float lengthSquared()>": 0.47792427104524626
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: float lengthSquare()>": 0.4658499360942867
        }, 
        {
            "<Catalano.Math.Vector3: float Square()>": 0.4658499360942867
        }, 
        {
            "<boofcv.alg.feature.detect.intensity.impl.ImplHarrisCorner_F32: float computeIntensity()>": 0.46333530187546434
        }
    ], 
    "<com.flowpowered.react.constraint.ContactPoint: void setSecondFrictionVector(com.flowpowered.react.math.Vector3)>": [
        {
            "<Catalano.Imaging.Filters.GaussianBlur: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Concurrent.Filters.BradleyLocalThreshold: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.CosineTransform: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.BradleyLocalThreshold: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.UnsharpMasking: void <init>()>": 0.018184824186332698
        }
    ], 
    "<com.flowpowered.react.constraint.Joint: void <init>(com.flowpowered.react.constraint.Joint$JointInfo)>": [
        {
            "<boofcv.io.jcodec.JCodecSimplified: void setLoop(boolean)>": 0.20620714227580317
        }, 
        {
            "<boofcv.factory.filter.binary.ConfigThreshold: boofcv.factory.filter.binary.ConfigThreshold global(boofcv.factory.filter.binary.ThresholdType)>": 0.19543049966170103
        }, 
        {
            "<boofcv.alg.InputSanityCheck: void checkSubimage(boofcv.struct.image.ImageBase)>": 0.19107241535322006
        }, 
        {
            "<net.coobird.thumbnailator.builders.ThumbnailParameterBuilder: net.coobird.thumbnailator.builders.ThumbnailParameterBuilder scale(double,double)>": 0.19065159016607866
        }, 
        {
            "<net.coobird.thumbnailator.ThumbnailParameter: void <init>(double,double,net.coobird.thumbnailator.geometry.Region,boolean,java.lang.String,java.lang.String,float,int,java.util.List,net.coobird.thumbnailator.resizers.Resizer,boolean,boolean)>": 0.1854724272132513
        }
    ], 
    "<com.flowpowered.react.engine.ContactSolver: void initializeContactConstraints()>": [
        {
            "<org.jbox2d.particle.ParticleSystem: void raycast(org.jbox2d.callbacks.ParticleRaycastCallback,org.jbox2d.common.Vec2,org.jbox2d.common.Vec2)>": 0.12772772772430782
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 inverse()>": 0.1274149980659891
        }, 
        {
            "<org.jbox2d.collision.shapes.ChainShape: void computeAABB(org.jbox2d.collision.AABB,org.jbox2d.common.Transform,int)>": 0.12666881861113746
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 multiply(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": 0.12655249458170614
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Quaternion: net.smert.jreactphysics3d.mathematics.Quaternion inverse()>": 0.12627017153854758
        }
    ], 
    "<com.flowpowered.react.math.Vector4: com.flowpowered.react.math.Vector4 getUnit()>": [
        {
            "<Catalano.Math.Vector4: float Norm()>": 0.49289041318878174
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 inverse()>": 0.4899169261743526
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 multiply(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": 0.4885605657840532
        }, 
        {
            "<Catalano.Math.Vector4: float Normalize()>": 0.486968897268398
        }, 
        {
            "<Catalano.Math.Vector3: float Norm()>": 0.4857646560099141
        }
    ], 
    "<com.flowpowered.react.constraint.HingeJoint: void enableLimit(boolean)>": [
        {
            "<Catalano.Imaging.Filters.Mirror: void <init>(boolean,boolean)>": 0.23512003652927826
        }, 
        {
            "<boofcv.alg.feature.detect.extract.NonMaxBlock: void <init>(boolean,boolean)>": 0.23512003652927826
        }, 
        {
            "<boofcv.gui.calibration.CalibratedImageGridPanel: void setDisplay(boolean,boolean,boolean,boolean,boolean,double)>": 0.22865133265544454
        }, 
        {
            "<boofcv.demonstrations.calibration.SubpixelGridTargetDisplay: void setShow(boolean,boolean)>": 0.22806853641132135
        }, 
        {
            "<boofcv.gui.VideoProcessAppBase: void setPause(boolean)>": 0.22700567010160635
        }
    ], 
    "<com.flowpowered.react.engine.Material$UnmodifiableMaterial: void <init>(com.flowpowered.react.engine.Material,com.flowpowered.react.engine.Material$1)>": [
        {
            "<org.dyn4j.sandbox.panels.LineGraphPanel: void setStaticSize(java.awt.Dimension)>": 0.05923488777590923
        }, 
        {
            "<org.jbox2d.testbed.tests.DrawingParticles: void step(org.jbox2d.testbed.framework.TestbedSettings)>": 0.057353933467640436
        }, 
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.05684427997196944
        }, 
        {
            "<boofcv.gui.feature.SelectRegionDescriptionPanel: void <init>()>": 0.05624015883323094
        }, 
        {
            "<boofcv.gui.d3.Polygon3DSequenceViewer: void <init>()>": 0.055674916760380555
        }
    ], 
    "<com.flowpowered.react.collision.shape.CylinderShape: void getLocalBounds(com.flowpowered.react.math.Vector3,com.flowpowered.react.math.Vector3)>": [
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector4 Abs()>": 0.37459054146133736
        }, 
        {
            "<Catalano.Math.Vector3: Catalano.Math.Vector3 Abs()>": 0.36741823249897065
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 abs()>": 0.36218707709157216
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 abs()>": 0.35985362687442163
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: net.smert.jreactphysics3d.mathematics.Vector3 abs()>": 0.3574903423294967
        }
    ], 
    "<com.flowpowered.react.collision.BroadPhasePair: boolean isEqualTo(com.flowpowered.react.collision.BroadPhasePair)>": [
        {
            "<boofcv.abst.sfm.d3.WrapVisOdomPixelDepthPnP: boolean isFault()>": 0.4338373554509977
        }, 
        {
            "<boofcv.abst.sfm.d3.VisOdomPixelDepthPnP_to_DepthVisualOdometry: boolean isFault()>": 0.4338373554509977
        }, 
        {
            "<boofcv.io.javacv.JavaCVVideoImageSequence: boolean hasNext()>": 0.4338373554509977
        }, 
        {
            "<net.imglib2.KDTree$KDTreeCursor: boolean hasNext()>": 0.4001190461197689
        }, 
        {
            "<boofcv.struct.flow.ImageFlow$D: boolean isValid()>": 0.4001190461197689
        }
    ], 
    "<com.flowpowered.react.collision.broadphase.PairManager$BodyPair: void <init>(com.flowpowered.react.body.CollisionBody,com.flowpowered.react.body.CollisionBody)>": [
        {
            "<org.dyn4j.sandbox.panels.LineGraphPanel: void setStaticSize(java.awt.Dimension)>": 0.04134491152973615
        }, 
        {
            "<org.jbox2d.testbed.tests.DrawingParticles: void step(org.jbox2d.testbed.framework.TestbedSettings)>": 0.04003203845127178
        }, 
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.03967630926057839
        }, 
        {
            "<boofcv.gui.feature.SelectRegionDescriptionPanel: void <init>()>": 0.039254643313832986
        }, 
        {
            "<boofcv.gui.d3.Polygon3DSequenceViewer: void <init>()>": 0.03886011427237866
        }
    ], 
    "<com.flowpowered.react.collision.shape.ConeShape: void computeLocalInertiaTensor(com.flowpowered.react.math.Matrix3x3,float)>": [
        {
            "<net.smert.jreactphysics3d.collision.shapes.ConeShape: void computeLocalInertiaTensor(net.smert.jreactphysics3d.mathematics.Matrix3x3,float)>": 0.439864415287596
        }, 
        {
            "<org.jbox2d.common.MathUtils: float clamp(float,float,float)>": 0.3915916635068923
        }, 
        {
            "<org.jbox2d.dynamics.contacts.Contact: float mixFriction(float,float)>": 0.3913803268565471
        }, 
        {
            "<org.jbox2d.common.Settings: float mixFriction(float,float)>": 0.3913803268565471
        }, 
        {
            "<org.jbox2d.common.Transform: org.jbox2d.common.Vec2 mulTrans(org.jbox2d.common.Transform,org.jbox2d.common.Vec2)>": 0.3861020927849697
        }
    ], 
    "<com.flowpowered.react.constraint.BallAndSocketJoint: void initBeforeSolve(com.flowpowered.react.constraint.ConstraintSolver$ConstraintSolverData)>": [
        {
            "<org.jbox2d.common.Vec2: boolean isValid()>": 0.1031751512408052
        }, 
        {
            "<org.box2d.proto.Box2D$PbJoint$Builder: com.google.protobuf.AbstractMessage$Builder mergeFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)>": 0.09934837417172512
        }, 
        {
            "<org.box2d.proto.Box2D$PbJoint$Builder: com.google.protobuf.AbstractMessageLite$Builder mergeFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)>": 0.09934837417172512
        }, 
        {
            "<org.box2d.proto.Box2D$PbJoint$Builder: com.google.protobuf.Message$Builder mergeFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)>": 0.09934837417172512
        }, 
        {
            "<org.box2d.proto.Box2D$PbJoint$Builder: com.google.protobuf.MessageLite$Builder mergeFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)>": 0.09934837417172512
        }
    ], 
    "<com.flowpowered.react.engine.ContactSolver: void applyImpulse(com.flowpowered.react.engine.Impulse,com.flowpowered.react.engine.ContactSolver$ContactManifoldSolver)>": [
        {
            "<org.dyn4j.collision.manifold.IndexedManifoldPointId: boolean equals(java.lang.Object)>": 0.13846824222227905
        }, 
        {
            "<Catalano.Imaging.Filters.VerticalRunLengthSmoothing: void applyInPlace(Catalano.Imaging.FastBitmap)>": 0.13829737966301184
        }, 
        {
            "<Catalano.Imaging.Filters.HorizontalRunLengthSmoothing: void applyInPlace(Catalano.Imaging.FastBitmap)>": 0.13829737966301184
        }, 
        {
            "<boofcv.struct.image.ImageBase: boolean isInBounds(int,int)>": 0.1378388937138985
        }, 
        {
            "<boofcv.struct.flow.ImageFlow: boolean isInBounds(int,int)>": 0.1378388937138985
        }
    ], 
    "<com.flowpowered.react.collision.narrowphase.EPA.EdgeEPA: boolean computeSilhouette(com.flowpowered.react.math.Vector3[],int,com.flowpowered.react.collision.narrowphase.EPA.TrianglesStore)>": [
        {
            "<Catalano.Imaging.Filters.Add: void <init>(int,int,int)>": 0.3999825266690218
        }, 
        {
            "<Catalano.Imaging.Filters.Subtract: void <init>(int,int,int)>": 0.3999825266690218
        }, 
        {
            "<org.box2d.proto.Box2D$PbJoint: void writeTo(com.google.protobuf.CodedOutputStream)>": 0.3906808988004054
        }, 
        {
            "<org.box2d.proto.Box2D$PbBody: void writeTo(com.google.protobuf.CodedOutputStream)>": 0.38777815712265545
        }, 
        {
            "<org.box2d.proto.Box2D$PbJoint: int getSerializedSize()>": 0.3864962600241535
        }
    ], 
    "<com.flowpowered.react.math.Transform: void setPosition(com.flowpowered.react.math.Vector3)>": [
        {
            "<Catalano.Imaging.Filters.GaussianBlur: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Concurrent.Filters.BradleyLocalThreshold: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.CosineTransform: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.BradleyLocalThreshold: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.UnsharpMasking: void <init>()>": 0.018184824186332698
        }
    ], 
    "<com.flowpowered.react.collision.broadphase.PairManager: int computeHash32Bits(int)>": [
        {
            "<net.smert.jreactphysics3d.collision.broadphase.PairManager: int computeHash32Bits(int)>": 0.9502828686972984
        }, 
        {
            "<net.smert.jreactphysics3d.collision.broadphase.PairManager: int computeHashBodies(int,int)>": 0.765570953740891
        }, 
        {
            "<net.smert.jreactphysics3d.collision.broadphase.PairManager: net.smert.jreactphysics3d.collision.broadphase.BodyPair findPair(int,int)>": 0.5573927777847023
        }, 
        {
            "<net.smert.jreactphysics3d.collision.broadphase.PairManager: net.smert.jreactphysics3d.collision.broadphase.BodyPair addPair(net.smert.jreactphysics3d.body.CollisionBody,net.smert.jreactphysics3d.body.CollisionBody)>": 0.5276601077417512
        }, 
        {
            "<net.smert.jreactphysics3d.collision.broadphase.PairManager: void reallocatePairs()>": 0.5091344745256978
        }
    ], 
    "<com.flowpowered.react.math.Matrix2x2: void setToIdentity()>": [
        {
            "<org.dyn4j.sandbox.utilities.ColorUtilities: java.awt.Color convertColor(float[])>": 0.13078827057458287
        }, 
        {
            "<net.imglib2.display.screenimage.awt.AWTScreenImageUtil: int numElements(long[])>": 0.1276754132416582
        }, 
        {
            "<net.imglib2.img.planar.PlanarImg: int getIndex(int[])>": 0.11955128163983593
        }, 
        {
            "<boofcv.gui.image.AnimatePanel: void <init>(int,java.awt.image.BufferedImage[])>": 0.11901095284871835
        }, 
        {
            "<org.dyn4j.geometry.CapsuleTest: void getFoci()>": 0.11783776986024778
        }
    ], 
    "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Vector4 multiply(com.flowpowered.react.math.Matrix4x4,com.flowpowered.react.math.Vector4)>": [
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.527120857398977
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 multiply(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": 0.5268629892438466
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 inverse()>": 0.5265184068806904
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.5262090155944978
        }, 
        {
            "<org.jbox2d.dynamics.contacts.PositionSolverManifold: void initialize(org.jbox2d.dynamics.contacts.ContactPositionConstraint,org.jbox2d.common.Transform,org.jbox2d.common.Transform,int)>": 0.5191126860265103
        }
    ], 
    "<com.flowpowered.react.collision.shape.CylinderShape: void <init>(float,float)>": [
        {
            "<boofcv.factory.background.ConfigBackgroundGaussian: void checkValidity()>": 0.4294883871407968
        }, 
        {
            "<boofcv.factory.background.ConfigBackgroundBasic: void checkValidity()>": 0.39087101491498216
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: void <init>(float,float,float,float,float,float,float,float,float)>": 0.37929303644330603
        }, 
        {
            "<boofcv.alg.background.stationary.BackgroundStationaryGaussian: void <init>(float,float,boofcv.struct.image.ImageType)>": 0.37596892853588904
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: void <init>(float,float,float,float)>": 0.3746473518270236
        }
    ], 
    "<com.flowpowered.react.engine.DynamicsWorld: void notifyNewContact(com.flowpowered.react.collision.BroadPhasePair,com.flowpowered.react.constraint.ContactPoint$ContactPointInfo)>": [
        {
            "<boofcv.abst.feature.detect.extract.ConfigExtract: void checkValidity()>": 0.17093042602812747
        }, 
        {
            "<boofcv.alg.feature.color.GHistogramFeatureOps: void histogram(boofcv.struct.image.Planar,boofcv.alg.feature.color.Histogram_F64)>": 0.16078116482947702
        }, 
        {
            "<boofcv.factory.distort.FactoryDistort: boofcv.alg.distort.ImageDistort distortIL(boolean,boofcv.alg.interpolate.InterpolatePixelMB,boofcv.struct.image.ImageType)>": 0.15911677138161223
        }, 
        {
            "<Catalano.Statistics.Distributions.BinomialDistribution: void <init>(int,double)>": 0.15852607080359735
        }, 
        {
            "<boofcv.factory.feature.detect.intensity.FactoryIntensityPointAlg: boofcv.alg.feature.detect.intensity.FastCornerIntensity fast(int,int,java.lang.Class)>": 0.15799714870266982
        }
    ], 
    "<com.flowpowered.react.body.Body: void setIsSleeping(boolean)>": [
        {
            "<net.smert.jreactphysics3d.body.Body: void setIsSleeping(boolean)>": 0.4209486166007905
        }, 
        {
            "<net.smert.jreactphysics3d.body.Body: void setIsAllowedToSleep(boolean)>": 0.38141900723033634
        }, 
        {
            "<boofcv.gui.calibration.CalibratedImageGridPanel: void setDisplay(boolean,boolean,boolean,boolean,boolean,double)>": 0.3334027409473085
        }, 
        {
            "<boofcv.demonstrations.calibration.SubpixelGridTargetDisplay: void setShow(boolean,boolean)>": 0.33228284819497533
        }, 
        {
            "<Catalano.Imaging.Filters.Mirror: void <init>(boolean,boolean)>": 0.32545626765365904
        }
    ], 
    "<com.flowpowered.react.engine.ContactManifold: void removeContactPoint(int)>": [
        {
            "<org.jbox2d.common.MathUtils: int max(int,int)>": 0.3677179881128636
        }, 
        {
            "<org.jbox2d.common.MathUtils: int min(int,int)>": 0.3677179881128636
        }, 
        {
            "<org.jbox2d.particle.ParticleSystem: int limitCapacity(int,int)>": 0.3677179881128636
        }, 
        {
            "<boofcv.struct.image.ImageGray: boofcv.struct.image.ImageBase subimage(int,int,int,int,boofcv.struct.image.ImageBase)>": 0.3585364242617312
        }, 
        {
            "<boofcv.alg.filter.binary.ThresholdSquareBlockMinMax: void process(boofcv.struct.image.ImageGray,boofcv.struct.image.GrayU8)>": 0.35708451633614374
        }
    ], 
    "<com.flowpowered.react.constraint.ContactPoint: void setFirstFrictionVector(com.flowpowered.react.math.Vector3)>": [
        {
            "<Catalano.Imaging.Filters.GaussianBlur: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Concurrent.Filters.BradleyLocalThreshold: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.CosineTransform: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.BradleyLocalThreshold: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.UnsharpMasking: void <init>()>": 0.018184824186332698
        }
    ], 
    "<com.flowpowered.react.constraint.SliderJoint$SliderJointInfo: void <init>(com.flowpowered.react.body.RigidBody,com.flowpowered.react.body.RigidBody,com.flowpowered.react.math.Vector3,com.flowpowered.react.math.Vector3)>": [
        {
            "<boofcv.alg.weights.WeightDistanceUniform_F32: void <init>(float)>": 0.081960044134478
        }, 
        {
            "<net.smert.jreactphysics3d.constraint.SliderJoint: void setMaxTranslationLimit(float)>": 0.07756698076580884
        }, 
        {
            "<net.smert.jreactphysics3d.constraint.SliderJoint: void setMinTranslationLimit(float)>": 0.07756698076580884
        }, 
        {
            "<net.imglib2.type.numeric.complex.AbstractComplexType: void setComplexNumber(float,float)>": 0.07737838186755955
        }, 
        {
            "<net.smert.jreactphysics3d.collision.shapes.SphereShape: void <init>(float,float)>": 0.07591221002704063
        }
    ], 
    "<com.flowpowered.react.engine.ContactSolver$ContactManifoldSolver: void <init>()>": [
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.09282632048482294
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.TestbedMain: void main(java.lang.String[])>": 0.08592832235509576
        }, 
        {
            "<org.dyn4j.sandbox.Sandbox: void init(com.jogamp.opengl.GLAutoDrawable)>": 0.08530618505879436
        }, 
        {
            "<boofcv.demonstrations.transform.pyramid.EdgeIntensitiesApp: void main(java.lang.String[])>": 0.08208798329594226
        }, 
        {
            "<boofcv.demonstrations.tracker.CirculantVisualizationPanel: void <init>(boofcv.demonstrations.tracker.CirculantVisualizationPanel$Listener)>": 0.08040659862597266
        }
    ], 
    "<com.flowpowered.react.constraint.SliderJoint: void setMaxMotorForce(float)>": [
        {
            "<boofcv.factory.background.ConfigBackgroundGaussian: void checkValidity()>": 0.3233313251818545
        }, 
        {
            "<boofcv.factory.background.ConfigBackgroundBasic: void checkValidity()>": 0.309235443963506
        }, 
        {
            "<net.smert.jreactphysics3d.constraint.HingeJoint: void setMaxMotorTorque(float)>": 0.28917771769483847
        }, 
        {
            "<net.smert.jreactphysics3d.constraint.SliderJoint: void setMaxMotorForce(float)>": 0.28917771769483847
        }, 
        {
            "<net.smert.jreactphysics3d.constraint.HingeJoint: void setMinAngleLimit(float)>": 0.28349964891238366
        }
    ], 
    "<com.flowpowered.react.math.Vector3: com.flowpowered.react.math.Vector3 getUnit()>": [
        {
            "<Catalano.Math.Vector3: float Norm()>": 0.48656275835571355
        }, 
        {
            "<Catalano.Math.Vector3: float Normalize()>": 0.47936027091329514
        }, 
        {
            "<Catalano.Math.Vector4: float Norm()>": 0.47788536795156766
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 inverse()>": 0.47018996149718045
        }, 
        {
            "<Catalano.Math.Vector4: float Normalize()>": 0.4676511697632835
        }
    ], 
    "<com.flowpowered.react.math.Matrix2x2: float getTrace()>": [
        {
            "<net.smert.jreactphysics3d.collision.shapes.CylinderShape: float getHeight()>": 0.3746145110209333
        }, 
        {
            "<net.smert.jreactphysics3d.collision.shapes.CapsuleShape: float getHeight()>": 0.3746145110209333
        }, 
        {
            "<net.smert.jreactphysics3d.collision.shapes.ConeShape: float getHeight()>": 0.3746145110209333
        }, 
        {
            "<net.smert.jreactphysics3d.constraint.HingeJoint: float getMotorTorque(float)>": 0.37393794282227766
        }, 
        {
            "<net.smert.jreactphysics3d.constraint.SliderJoint: float getMotorForce(float)>": 0.37393794282227766
        }
    ], 
    "<com.flowpowered.react.math.Vector4: int getMaxAxis()>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: int getMaxAxis()>": 0.4061820467193259
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: int getMinAxis()>": 0.4037701911177416
        }, 
        {
            "<Catalano.Math.Vector3: int getMinIndex()>": 0.4037701911177416
        }, 
        {
            "<Catalano.Math.Vector3: int getMaxIndex()>": 0.4037701911177416
        }, 
        {
            "<Catalano.Math.Vector4: int getMinIndex()>": 0.3832475293258679
        }
    ], 
    "<com.flowpowered.react.math.Quaternion: java.lang.String toString()>": [
        {
            "<org.jbox2d.common.Vec2: java.lang.String toString()>": 0.605588241414918
        }, 
        {
            "<org.jbox2d.common.Vec3: java.lang.String toString()>": 0.5867486461516431
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: java.lang.String toString()>": 0.5493326001194485
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector2: java.lang.String toString()>": 0.5483852914447129
        }, 
        {
            "<org.jbox2d.common.Rot: java.lang.String toString()>": 0.5483852914447129
        }
    ], 
    "<com.flowpowered.react.constraint.HingeJoint: void resetLimits()>": [
        {
            "<net.smert.jreactphysics3d.constraint.SliderJoint: void setMaxTranslationLimit(float)>": 0.13179205741732966
        }, 
        {
            "<net.smert.jreactphysics3d.constraint.SliderJoint: void setMinTranslationLimit(float)>": 0.13179205741732966
        }, 
        {
            "<org.jbox2d.common.Color3f: void <init>()>": 0.1310356045902398
        }, 
        {
            "<org.jbox2d.common.Vec3: void <init>()>": 0.1310356045902398
        }, 
        {
            "<net.imglib2.type.numeric.complex.AbstractComplexType: void setComplexNumber(float,float)>": 0.1309462316541243
        }
    ], 
    "<com.flowpowered.react.engine.DynamicsWorld: void enableSleeping(boolean)>": [
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void setIsSleepingEnabled(boolean)>": 0.5014019510485425
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void updateRigidBodiesAABB()>": 0.43582784165331645
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void resetContactManifoldListsOfBodies()>": 0.42056350051632624
        }, 
        {
            "<net.coobird.thumbnailator.makers.ThumbnailMaker$ReadinessTracker: boolean isReady()>": 0.4016143818679056
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void resetBodiesMovementVariable()>": 0.3973307379307481
        }
    ], 
    "<com.flowpowered.react.collision.broadphase.PairManager: com.flowpowered.react.collision.broadphase.PairManager$BodyPair lookForAPair(int,int,int)>": [
        {
            "<org.jbox2d.common.MathUtils: int max(int,int)>": 0.5304218743840022
        }, 
        {
            "<org.jbox2d.common.MathUtils: int min(int,int)>": 0.5304218743840022
        }, 
        {
            "<org.jbox2d.particle.ParticleSystem: int limitCapacity(int,int)>": 0.5304218743840022
        }, 
        {
            "<net.smert.jreactphysics3d.collision.broadphase.PairManager: net.smert.jreactphysics3d.collision.broadphase.BodyPair lookForAPair(int,int,int)>": 0.5218045539298599
        }, 
        {
            "<boofcv.struct.image.ImageBase: boolean isInBounds(int,int)>": 0.4947908184123354
        }
    ], 
    "<com.flowpowered.react.math.Quaternion: com.flowpowered.react.math.Quaternion slerp(com.flowpowered.react.math.Quaternion,com.flowpowered.react.math.Quaternion,float)>": [
        {
            "<boofcv.alg.distort.LensDistortionOps: void roundInside(georegression.struct.shapes.RectangleLength2D_F32)>": 0.42579067857799485
        }, 
        {
            "<Catalano.Math.Tools: float Angle(float,float)>": 0.37475015897059194
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Mathematics: float Sqrt(float)>": 0.3668745487091899
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Mathematics: float ArcSin(float)>": 0.3668745487091899
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Mathematics: float Cos(float)>": 0.3668745487091899
        }
    ], 
    "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 negate(com.flowpowered.react.math.Matrix4x4)>": [
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector4 Abs()>": 0.4426921147055208
        }, 
        {
            "<Catalano.Math.Vector3: Catalano.Math.Vector3 Abs()>": 0.43240327421703284
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.DebugDrawJ2D$1: java.lang.Object newColor(float,float,float,float)>": 0.41805706294745026
        }, 
        {
            "<org.jbox2d.common.Mat22: org.jbox2d.common.Mat22 abs()>": 0.415053398221129
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 abs()>": 0.40912665594052267
        }
    ], 
    "<com.flowpowered.react.engine.DynamicsWorld: void disperseCache()>": [
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void updateRigidBodiesAABB()>": 0.34221233264996476
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void resetContactManifoldListsOfBodies()>": 0.33893897977532855
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void setIsSleepingEnabled(boolean)>": 0.33114627548446485
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void resetBodiesMovementVariable()>": 0.322065434258764
        }, 
        {
            "<net.smert.jreactphysics3d.collision.broadphase.NoBroadPhaseAlgorithm: void addObject(net.smert.jreactphysics3d.body.CollisionBody,net.smert.jreactphysics3d.collision.shapes.AABB)>": 0.30568655399056516
        }
    ], 
    "<com.flowpowered.react.collision.shape.CollisionShape: void <init>(com.flowpowered.react.collision.shape.CollisionShape$CollisionShapeType,float)>": [
        {
            "<org.jbox2d.common.MathUtils: float clamp(float,float,float)>": 0.29817342214652415
        }, 
        {
            "<org.jbox2d.dynamics.contacts.Contact: float mixFriction(float,float)>": 0.2963288765117143
        }, 
        {
            "<org.jbox2d.common.Settings: float mixFriction(float,float)>": 0.2963288765117143
        }, 
        {
            "<boofcv.struct.RectangleRotate_F32: void <init>(float,float,float,float,float)>": 0.29028104102046637
        }, 
        {
            "<Catalano.Math.Vector4: void <init>(float,float,float,float)>": 0.29004089989262577
        }
    ], 
    "<com.flowpowered.react.math.Vector2: com.flowpowered.react.math.Vector2 subtract(com.flowpowered.react.math.Vector2)>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 inverse()>": 0.4230515673767139
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 multiply(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": 0.4218578993006978
        }, 
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.4190822068715384
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 multiply(net.smert.jreactphysics3d.mathematics.Matrix2x2)>": 0.4182684766594068
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.41808352855820397
        }
    ], 
    "<com.flowpowered.react.collision.shape.AABB: boolean testCollision(com.flowpowered.react.collision.shape.AABB)>": [
        {
            "<Catalano.Math.Vector3: float getMin()>": 0.3434607428820241
        }, 
        {
            "<Catalano.Math.Vector3: float getMax()>": 0.3434607428820241
        }, 
        {
            "<boofcv.alg.distort.DistortImageOps: void updateBoundBox(boofcv.struct.distort.PixelTransform_F32,boofcv.struct.ImageRectangle_F32)>": 0.34000517821251486
        }, 
        {
            "<Catalano.Math.Vector4: boolean equals(java.lang.Object)>": 0.33989931665741835
        }, 
        {
            "<Catalano.Math.Vector3: boolean equals(java.lang.Object)>": 0.3269585771131628
        }
    ], 
    "<com.flowpowered.react.math.Vector4: boolean isUnit()>": [
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.5188667388028934
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.517830949020989
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 multiply(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": 0.5173689591005264
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 inverse()>": 0.516387400875388
        }, 
        {
            "<org.jbox2d.dynamics.contacts.PositionSolverManifold: void initialize(org.jbox2d.dynamics.contacts.ContactPositionConstraint,org.jbox2d.common.Transform,org.jbox2d.common.Transform,int)>": 0.5107501169002404
        }
    ], 
    "<com.flowpowered.react.engine.Material: void setFrictionCoefficient(float)>": [
        {
            "<boofcv.factory.background.ConfigBackgroundGaussian: void checkValidity()>": 0.3576379882883496
        }, 
        {
            "<boofcv.alg.background.stationary.BackgroundStationaryBasic: void <init>(float,float,boofcv.struct.image.ImageType)>": 0.3415979091245608
        }, 
        {
            "<boofcv.alg.background.stationary.BackgroundStationaryGaussian: void <init>(float,float,boofcv.struct.image.ImageType)>": 0.3350401305321443
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void setSleepLinearVelocity(float)>": 0.3330403520701663
        }, 
        {
            "<net.smert.jreactphysics3d.body.RigidBody: void setMass(float)>": 0.3330403520701663
        }
    ], 
    "<com.flowpowered.react.Utilities$IntPair: int hashCode()>": [
        {
            "<org.dyn4j.dynamics.Capacity: int hashCode()>": 0.4161450280568054
        }, 
        {
            "<boofcv.alg.feature.describe.DescribeSiftCommon: int getDescriptorLength()>": 0.40581350004890837
        }, 
        {
            "<org.dyn4j.collision.broadphase.DynamicAABBTreeLeaf: int hashCode()>": 0.39904280401844044
        }, 
        {
            "<org.dyn4j.collision.broadphase.SapProxy: int hashCode()>": 0.39904280401844044
        }, 
        {
            "<org.dyn4j.dynamics.contact.ContactPointId: int hashCode()>": 0.39904280401844044
        }
    ], 
    "<com.flowpowered.react.collision.narrowphase.EPA.TriangleEPA: int get(int)>": [
        {
            "<boofcv.core.image.border.ImageBorderValue$Value_I: void setOutside(int,int,int)>": 0.6947213385265045
        }, 
        {
            "<org.dyn4j.examples.ExampleJOGL: void reshape(com.jogamp.opengl.GLAutoDrawable,int,int,int,int)>": 0.686348504974208
        }, 
        {
            "<net.coobird.thumbnailator.geometry.Positions$1: java.awt.Point calculate(int,int,int,int,int,int,int,int)>": 0.6708620684009216
        }, 
        {
            "<Catalano.Imaging.Tools.IntegralImage: int getInternalData(int,int)>": 0.6636891976035976
        }, 
        {
            "<net.imglib2.AbstractLocalizableInt: int getIntPosition(int)>": 0.6625834258610575
        }
    ], 
    "<com.flowpowered.react.math.Vector2: void <init>(com.flowpowered.react.math.Vector2)>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 abs()>": 0.46881414489584755
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 abs()>": 0.4655212684864066
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: net.smert.jreactphysics3d.mathematics.Vector3 abs()>": 0.46215070535486247
        }, 
        {
            "<org.jbox2d.common.Vec2: void absLocal()>": 0.4610047606711484
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector2: net.smert.jreactphysics3d.mathematics.Vector2 abs()>": 0.4526586883743469
        }
    ], 
    "<com.flowpowered.react.math.Matrix3x3: com.flowpowered.react.math.Matrix3x3 negate(com.flowpowered.react.math.Matrix3x3)>": [
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector4 Abs()>": 0.43250736996901773
        }, 
        {
            "<Catalano.Math.Vector3: Catalano.Math.Vector3 Abs()>": 0.42252767839046923
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.DebugDrawJ2D$1: java.lang.Object newColor(float,float,float,float)>": 0.4087358050540762
        }, 
        {
            "<org.jbox2d.common.Mat22: org.jbox2d.common.Mat22 abs()>": 0.4054116854365121
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 abs()>": 0.400089115201873
        }
    ], 
    "<com.flowpowered.react.collision.shape.AABB: void <init>(com.flowpowered.react.math.Vector3,com.flowpowered.react.math.Vector3)>": [
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.05166538288755293
        }, 
        {
            "<org.dyn4j.sandbox.Sandbox: void init(com.jogamp.opengl.GLAutoDrawable)>": 0.048280384649317755
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.TestbedMain: void main(java.lang.String[])>": 0.04782608695652174
        }, 
        {
            "<boofcv.gui.d3.Polygon3DSequenceViewer: void <init>()>": 0.04578326544732735
        }, 
        {
            "<boofcv.demonstrations.transform.pyramid.EdgeIntensitiesApp: void main(java.lang.String[])>": 0.04568862651563708
        }
    ], 
    "<com.flowpowered.react.engine.CollisionWorld: com.flowpowered.react.collision.RayCaster$IntersectedBody findClosestIntersectingBody(com.flowpowered.react.math.Vector3,com.flowpowered.react.math.Vector3)>": [
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void resetBodiesMovementVariable()>": 0.05836576777194364
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: int getNumJoints()>": 0.05796736197002104
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: int getNumRigidBodies()>": 0.05796736197002104
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void resetContactManifoldListsOfBodies()>": 0.050201208056406176
        }, 
        {
            "<net.smert.jreactphysics3d.collision.broadphase.NoBroadPhaseAlgorithm: void addObject(net.smert.jreactphysics3d.body.CollisionBody,net.smert.jreactphysics3d.collision.shapes.AABB)>": 0.04634237486658291
        }
    ], 
    "<com.flowpowered.react.constraint.HingeJoint: float computeCurrentHingeAngle(com.flowpowered.react.math.Quaternion,com.flowpowered.react.math.Quaternion)>": [
        {
            "<net.smert.jreactphysics3d.constraint.HingeJoint: float computeCorrespondingAngleNearLimits(float,float,float)>": 0.43838698119023967
        }, 
        {
            "<net.smert.jreactphysics3d.constraint.HingeJoint: float computeCurrentHingeAngle(net.smert.jreactphysics3d.mathematics.Quaternion,net.smert.jreactphysics3d.mathematics.Quaternion)>": 0.4310184997368713
        }, 
        {
            "<boofcv.alg.weights.WeightDistanceSqGaussian_F32: float weight(float)>": 0.3439872623679587
        }, 
        {
            "<Catalano.Math.Vector3: float Norm()>": 0.3386542708080189
        }, 
        {
            "<Catalano.Core.FloatPoint: float DistanceTo(Catalano.Core.FloatPoint)>": 0.3381484313740852
        }
    ], 
    "<com.flowpowered.react.engine.linked.LinkedDynamicsWorld: void addLinkedBodies(java.util.Collection)>": [
        {
            "<Catalano.Core.Concurrent.MulticoreExecutor: java.util.List run(java.util.Collection)>": 0.37300147112942766
        }, 
        {
            "<org.dyn4j.sandbox.input.Mouse: void clear()>": 0.34832930973624504
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void resetContactManifoldListsOfBodies()>": 0.33805099832183766
        }, 
        {
            "<org.dyn4j.dynamics.contact.SimpleContactManager: void shift(org.dyn4j.geometry.Vector2)>": 0.3368399076778748
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void updateRigidBodiesAABB()>": 0.3333921247080492
        }
    ], 
    "<com.flowpowered.react.math.Quaternion: float lengthSquare()>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Quaternion: float lengthSquare()>": 0.5285884824131092
        }, 
        {
            "<Catalano.Math.Vector4: float Square()>": 0.5285884824131092
        }, 
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.5281755726526416
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.5271219466004621
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 multiply(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": 0.5266477643014582
        }
    ], 
    "<com.flowpowered.react.collision.shape.ConvexMeshShape: boolean isEqualTo(com.flowpowered.react.collision.shape.CollisionShape)>": [
        {
            "<boofcv.abst.sfm.d3.WrapVisOdomPixelDepthPnP: boolean isFault()>": 0.49216282019697555
        }, 
        {
            "<boofcv.abst.sfm.d3.VisOdomPixelDepthPnP_to_DepthVisualOdometry: boolean isFault()>": 0.49216282019697555
        }, 
        {
            "<boofcv.io.javacv.JavaCVVideoImageSequence: boolean hasNext()>": 0.49216282019697555
        }, 
        {
            "<Catalano.Core.IntRange: boolean IsOverlapping(Catalano.Core.IntRange)>": 0.4859457925923748
        }, 
        {
            "<boofcv.io.wrapper.images.JpegByteImageSequence: boolean hasNext()>": 0.47744215976192067
        }
    ], 
    "<com.flowpowered.react.body.RigidBody: void setLinearDamping(float)>": [
        {
            "<boofcv.factory.background.ConfigBackgroundGaussian: void checkValidity()>": 0.3576379882883496
        }, 
        {
            "<boofcv.alg.background.stationary.BackgroundStationaryBasic: void <init>(float,float,boofcv.struct.image.ImageType)>": 0.3415979091245608
        }, 
        {
            "<boofcv.alg.background.stationary.BackgroundStationaryGaussian: void <init>(float,float,boofcv.struct.image.ImageType)>": 0.3350401305321443
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void setSleepLinearVelocity(float)>": 0.3330403520701663
        }, 
        {
            "<net.smert.jreactphysics3d.body.RigidBody: void setMass(float)>": 0.3330403520701663
        }
    ], 
    "<com.flowpowered.react.math.Vector3: com.flowpowered.react.math.Vector3 set(com.flowpowered.react.math.Vector3)>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 abs()>": 0.41355098736532264
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 abs()>": 0.41107504599591427
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: net.smert.jreactphysics3d.mathematics.Vector3 abs()>": 0.4084911467873694
        }, 
        {
            "<org.jbox2d.common.Vec2: void absLocal()>": 0.40822093661512154
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 invert()>": 0.40257932625478376
        }
    ], 
    "<com.flowpowered.react.engine.Timer: void <init>(double)>": [
        {
            "<Catalano.Math.Distances.MinkowskiDistance: void setOrder(double)>": 0.4323331227128607
        }, 
        {
            "<org.dyn4j.dynamics.joint.FrictionJoint: void setMaximumForce(double)>": 0.3953762815025213
        }, 
        {
            "<org.dyn4j.dynamics.joint.PinJoint: void setFrequency(double)>": 0.3953762815025213
        }, 
        {
            "<org.dyn4j.dynamics.BodyFixture: void setFriction(double)>": 0.3953762815025213
        }, 
        {
            "<org.dyn4j.dynamics.joint.PrismaticJoint: void setMaximumMotorForce(double)>": 0.3953762815025213
        }
    ], 
    "<com.flowpowered.react.collision.broadphase.SweepAndPruneAlgorithm: long encodeFloatIntoInteger(float)>": [
        {
            "<net.smert.jreactphysics3d.collision.broadphase.Utils: long encodeFloatIntoInteger(float)>": 1.0
        }, 
        {
            "<Catalano.Math.Approximation: long abs(long)>": 0.2960723604758609
        }, 
        {
            "<net.imglib2.type.numeric.integer.UnsignedIntType: long get()>": 0.27981113200466695
        }, 
        {
            "<net.imglib2.type.numeric.ARGBType: int rgba(float,float,float,float)>": 0.273502620760706
        }, 
        {
            "<net.imglib2.position.transform.FloorOffset: long f(float,long)>": 0.26505985986534597
        }
    ], 
    "<com.flowpowered.react.collision.shape.ConeShape: void <init>(com.flowpowered.react.collision.shape.ConeShape)>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 abs()>": 0.36747426997102833
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 abs()>": 0.3659377798771752
        }, 
        {
            "<org.jbox2d.common.Vec2: void absLocal()>": 0.3647306829630053
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: net.smert.jreactphysics3d.mathematics.Vector3 abs()>": 0.3640305723931361
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 invert()>": 0.3587575079725914
        }
    ], 
    "<com.flowpowered.react.math.Vector3: com.flowpowered.react.math.Vector3 getAbsoluteVector()>": [
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector4 Abs()>": 0.47727150516944095
        }, 
        {
            "<Catalano.Math.Vector3: Catalano.Math.Vector3 Abs()>": 0.4663800705467372
        }, 
        {
            "<org.jbox2d.common.Mat22: org.jbox2d.common.Mat22 abs()>": 0.4482356761800751
        }, 
        {
            "<org.jbox2d.common.Vec2: org.jbox2d.common.Vec2 abs()>": 0.43869291498922225
        }, 
        {
            "<org.jbox2d.common.Vec2: org.jbox2d.common.Vec2 abs(org.jbox2d.common.Vec2)>": 0.42134170765482815
        }
    ], 
    "<com.flowpowered.react.math.Matrix3x3: com.flowpowered.react.math.Matrix3x3 subtract(com.flowpowered.react.math.Matrix3x3)>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 abs()>": 0.34880039863177614
        }, 
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector3 toVector3()>": 0.34735736895278224
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 abs()>": 0.34631274344848256
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: net.smert.jreactphysics3d.mathematics.Vector3 abs()>": 0.3438966623718137
        }, 
        {
            "<org.jbox2d.common.Vec2: void absLocal()>": 0.343366647582108
        }
    ], 
    "<com.flowpowered.react.collision.narrowphase.GJK.Simplex: boolean overlap(int,int)>": [
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: boolean overlap(int,int)>": 0.9448928917162578
        }, 
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: boolean isSubset(int,int)>": 0.9448928917162578
        }, 
        {
            "<Catalano.Imaging.Texture.BinaryPattern.UniformLocalBinaryPattern: boolean isUniform(int)>": 0.7374439229204929
        }, 
        {
            "<Catalano.Imaging.Shapes.IntRectangle: boolean isOverlaped(int,int,int,int)>": 0.710826686715408
        }, 
        {
            "<net.coobird.thumbnailator.util.exif.IfdStructure: boolean isOffset()>": 0.6550822017253819
        }
    ], 
    "<com.flowpowered.react.collision.broadphase.SweepAndPruneAlgorithm$EndPoint: void setValues(int,boolean,long)>": [
        {
            "<net.smert.jreactphysics3d.collision.broadphase.EndPoint: void setValues(int,boolean,long)>": 0.44592476489028215
        }, 
        {
            "<boofcv.abst.feature.detect.extract.ConfigExtract: void <init>(int,float,int,boolean,boolean,boolean)>": 0.3649964926061399
        }, 
        {
            "<org.dyn4j.sandbox.Sandbox: void setPaused(boolean)>": 0.35713355191934026
        }, 
        {
            "<boofcv.alg.misc.PixelMath: void plus_A(long[],int,int,long,long,long,long[],int,int,int,int)>": 0.3545318097182732
        }, 
        {
            "<boofcv.alg.misc.PixelMath: void minus_B(long[],int,int,long,long,long,long[],int,int,int,int)>": 0.3545318097182732
        }
    ], 
    "<com.flowpowered.react.math.Transform: com.flowpowered.react.math.Transform getInverse()>": [
        {
            "<org.dyn4j.sandbox.panels.LineGraphPanel: void setStaticSize(java.awt.Dimension)>": 0.030015011259383207
        }, 
        {
            "<org.jbox2d.testbed.tests.DrawingParticles: void step(org.jbox2d.testbed.framework.TestbedSettings)>": 0.029061909685954818
        }, 
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.02880366229180393
        }, 
        {
            "<boofcv.gui.feature.SelectRegionDescriptionPanel: void <init>()>": 0.02849754703672208
        }, 
        {
            "<boofcv.gui.d3.Polygon3DSequenceViewer: void <init>()>": 0.0282111322595883
        }
    ], 
    "<com.flowpowered.react.body.Body: void setIsAllowedToSleep(boolean)>": [
        {
            "<net.smert.jreactphysics3d.body.Body: void setIsAllowedToSleep(boolean)>": 0.4111111111111111
        }, 
        {
            "<net.smert.jreactphysics3d.body.Body: void setIsSleeping(boolean)>": 0.38141900723033634
        }, 
        {
            "<boofcv.gui.calibration.CalibratedImageGridPanel: void setDisplay(boolean,boolean,boolean,boolean,boolean,double)>": 0.31813733109966535
        }, 
        {
            "<boofcv.demonstrations.calibration.SubpixelGridTargetDisplay: void setShow(boolean,boolean)>": 0.31639244559094165
        }, 
        {
            "<Catalano.Imaging.Filters.Mirror: void <init>(boolean,boolean)>": 0.31039295736380357
        }
    ], 
    "<com.flowpowered.react.constraint.ContactPoint$ContactPointInfo: void setFirstLocalPoint(com.flowpowered.react.math.Vector3)>": [
        {
            "<Catalano.Imaging.Filters.GaussianBlur: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Concurrent.Filters.BradleyLocalThreshold: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.CosineTransform: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.BradleyLocalThreshold: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.UnsharpMasking: void <init>()>": 0.018184824186332698
        }
    ], 
    "<com.flowpowered.react.collision.narrowphase.EPA.EPAAlgorithm$TriangleComparison: int compare(com.flowpowered.react.collision.narrowphase.EPA.TriangleEPA,com.flowpowered.react.collision.narrowphase.EPA.TriangleEPA)>": [
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.EPA.TriangleComparison: int compare(net.smert.jreactphysics3d.collision.narrowphase.EPA.TriangleEPA,net.smert.jreactphysics3d.collision.narrowphase.EPA.TriangleEPA)>": 0.32267233347878665
        }, 
        {
            "<net.imglib2.type.numeric.real.FloatType: int compareTo(net.imglib2.type.numeric.real.FloatType)>": 0.27830890470313274
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector2: int getMaxAxis()>": 0.25781854690767303
        }, 
        {
            "<net.imglib2.type.label.BasePairCharType: int compareTo(net.imglib2.type.label.BasePairCharType)>": 0.2572242309548291
        }, 
        {
            "<net.smert.jreactphysics3d.engine.ContactManifold: int getMaxArea(float,float,float,float)>": 0.2569339784836246
        }
    ], 
    "<com.flowpowered.react.math.Vector2: float length()>": [
        {
            "<boofcv.alg.weights.WeightDistanceSqGaussian_F32: float weight(float)>": 0.5405991746138122
        }, 
        {
            "<Catalano.Math.Vector3: float Norm()>": 0.5295909727651733
        }, 
        {
            "<Catalano.Core.FloatPoint: float DistanceTo(Catalano.Core.FloatPoint)>": 0.5118108253834971
        }, 
        {
            "<Catalano.Math.Vector4: float Norm()>": 0.5064959202020096
        }, 
        {
            "<boofcv.alg.feature.detect.intensity.impl.ImplShiTomasiCorner_F32: float computeIntensity()>": 0.4801703352015619
        }
    ], 
    "<com.flowpowered.react.engine.Impulse: void <init>(com.flowpowered.react.math.Vector3,com.flowpowered.react.math.Vector3,com.flowpowered.react.math.Vector3,com.flowpowered.react.math.Vector3)>": [
        {
            "<org.dyn4j.sandbox.panels.LineGraphPanel: void setStaticSize(java.awt.Dimension)>": 0.021295885499998
        }, 
        {
            "<org.jbox2d.testbed.tests.DrawingParticles: void step(org.jbox2d.testbed.framework.TestbedSettings)>": 0.020619652471058063
        }, 
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.02043642392288316
        }, 
        {
            "<boofcv.gui.feature.SelectRegionDescriptionPanel: void <init>()>": 0.02021923275258207
        }, 
        {
            "<boofcv.gui.d3.Polygon3DSequenceViewer: void <init>()>": 0.020016019225635895
        }
    ], 
    "<com.flowpowered.react.collision.narrowphase.GJK.Simplex: void computeClosestPointsOfAAndB(com.flowpowered.react.math.Vector3,com.flowpowered.react.math.Vector3)>": [
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: void addPoint(net.smert.jreactphysics3d.mathematics.Vector3,net.smert.jreactphysics3d.mathematics.Vector3,net.smert.jreactphysics3d.mathematics.Vector3)>": 0.2893817491159092
        }, 
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: void computeDeterminants()>": 0.2865422786902841
        }, 
        {
            "<Catalano.Imaging.Tools.GradientImage: float getOrientation(int,int)>": 0.2555309460615048
        }, 
        {
            "<Catalano.Imaging.Tools.GradientImage: float getMagnitude(int,int)>": 0.2555309460615048
        }, 
        {
            "<Catalano.Imaging.Filters.ImagePyramids: void Downscale(Catalano.Imaging.FastBitmap)>": 0.2553206810317282
        }
    ], 
    "<com.flowpowered.react.math.Vector4: com.flowpowered.react.math.Vector4 divide(float)>": [
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.4239581014547126
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.4231550060895535
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 multiply(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": 0.42221234602184493
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 inverse()>": 0.4220627196217448
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Quaternion: net.smert.jreactphysics3d.mathematics.Quaternion fromMatrix(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": 0.41899846860876205
        }
    ], 
    "<com.flowpowered.react.engine.ContactManifold: void setFirstFrictionVector(com.flowpowered.react.math.Vector3)>": [
        {
            "<Catalano.Imaging.Filters.GaussianBlur: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Concurrent.Filters.BradleyLocalThreshold: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.CosineTransform: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.BradleyLocalThreshold: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.UnsharpMasking: void <init>()>": 0.018184824186332698
        }
    ], 
    "<com.flowpowered.react.engine.CollisionWorld: com.flowpowered.react.collision.shape.CollisionShape createCollisionShape(com.flowpowered.react.collision.shape.CollisionShape)>": [
        {
            "<boofcv.alg.filter.binary.Contour: boofcv.alg.filter.binary.Contour copy()>": 0.372121946149271
        }, 
        {
            "<boofcv.alg.feature.detect.edge.CannyEdge: void performThresholding(float,float,boofcv.struct.image.GrayU8)>": 0.34704560731529527
        }, 
        {
            "<boofcv.alg.filter.binary.BinaryImageOps: void clusterToBinary(java.util.List,boofcv.struct.image.GrayU8)>": 0.34535871866380813
        }, 
        {
            "<boofcv.gui.binary.VisualizeBinaryData: void renderExternal(java.util.List,boolean,boolean,double,java.awt.Graphics2D)>": 0.335320286805964
        }, 
        {
            "<boofcv.gui.binary.VisualizeBinaryData: java.awt.image.BufferedImage renderContours(java.util.List,int,int,int,int,java.awt.image.BufferedImage)>": 0.3283234260741478
        }
    ], 
    "<com.flowpowered.react.math.Transform: void <init>(com.flowpowered.react.math.Transform)>": [
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.05989967479834492
        }, 
        {
            "<org.dyn4j.sandbox.Sandbox: void init(com.jogamp.opengl.GLAutoDrawable)>": 0.05597518450463017
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.TestbedMain: void main(java.lang.String[])>": 0.05544848204857085
        }, 
        {
            "<boofcv.gui.d3.Polygon3DSequenceViewer: void <init>()>": 0.05308008105678631
        }, 
        {
            "<boofcv.demonstrations.transform.pyramid.EdgeIntensitiesApp: void main(java.lang.String[])>": 0.05297035882277426
        }
    ], 
    "<com.flowpowered.react.collision.shape.AABB: void setMax(com.flowpowered.react.math.Vector3)>": [
        {
            "<Catalano.Imaging.Filters.GaussianBlur: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Concurrent.Filters.BradleyLocalThreshold: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.CosineTransform: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.BradleyLocalThreshold: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.UnsharpMasking: void <init>()>": 0.018184824186332698
        }
    ], 
    "<com.flowpowered.react.collision.narrowphase.SphereVsSphereAlgorithm: boolean testCollision(com.flowpowered.react.collision.shape.CollisionShape,com.flowpowered.react.math.Transform,com.flowpowered.react.collision.shape.CollisionShape,com.flowpowered.react.math.Transform,com.flowpowered.react.constraint.ContactPoint$ContactPointInfo)>": [
        {
            "<boofcv.alg.weights.WeightDistanceSqGaussian_F32: float weight(float)>": 0.1685319983298604
        }, 
        {
            "<boofcv.alg.distort.LensDistortionOps: void roundInside(georegression.struct.shapes.RectangleLength2D_F32)>": 0.16649853096591954
        }, 
        {
            "<org.jbox2d.common.MathUtils: float sin(float)>": 0.1656516901082809
        }, 
        {
            "<org.jbox2d.common.MathUtils: float cos(float)>": 0.16333468896118306
        }, 
        {
            "<Catalano.Math.Geometry.Line: void <init>(float,float,boolean)>": 0.1620945363298777
        }
    ], 
    "<com.flowpowered.react.collision.broadphase.PairManager: void <init>(com.flowpowered.react.collision.CollisionDetection)>": [
        {
            "<Catalano.Imaging.Color: void <init>(int[])>": 0.18460246655488638
        }, 
        {
            "<org.jbox2d.pooling.stacks.DynamicIntStack: void <init>(int)>": 0.18423888166519406
        }, 
        {
            "<Catalano.Statistics.HistogramStatistics: int Mode(int[])>": 0.18178285375329817
        }, 
        {
            "<net.imglib2.transform.integer.permutation.SingleDimensionPermutationTransform: void applyInverse(int[],int[])>": 0.18042195912175807
        }, 
        {
            "<net.imglib2.transform.integer.permutation.SingleDimensionPermutationTransform: void apply(int[],int[])>": 0.18042195912175807
        }
    ], 
    "<com.flowpowered.react.collision.shape.BoxShape: void getLocalBounds(com.flowpowered.react.math.Vector3,com.flowpowered.react.math.Vector3)>": [
        {
            "<boofcv.factory.background.FactoryBackgroundModel: boofcv.alg.background.stationary.BackgroundStationaryGaussian stationaryGaussian(boofcv.factory.background.ConfigBackgroundGaussian,boofcv.struct.image.ImageType)>": 0.1369365284461941
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.DebugDrawJ2D$1: java.awt.Color newColor(float,float,float,float)>": 0.13211739444017584
        }, 
        {
            "<org.jbox2d.testbed.framework.TestbedCamera: void setCamera(org.jbox2d.common.Vec2,float)>": 0.13086652625636358
        }, 
        {
            "<org.jbox2d.callbacks.DebugDraw: void setCamera(float,float,float)>": 0.13086323030921207
        }, 
        {
            "<boofcv.factory.background.FactoryBackgroundModel: boofcv.alg.background.moving.BackgroundMovingGaussian movingGaussian(boofcv.factory.background.ConfigBackgroundGaussian,boofcv.struct.distort.PointTransformModel_F32,boofcv.struct.image.ImageType)>": 0.1307125434032474
        }
    ], 
    "<com.flowpowered.react.engine.Timer: void update()>": [
        {
            "<Catalano.Math.Distances.Distance: double Canberra(double,double,double,double)>": 0.4588363011111826
        }, 
        {
            "<Catalano.Math.Distances.Distance: double BrayCurtis(double,double,double,double)>": 0.4583019253865329
        }, 
        {
            "<Catalano.Math.Functions.Beta: double Log(double,double)>": 0.45627951566611263
        }, 
        {
            "<Catalano.Math.Distances.Distance: double Cosine(double,double,double,double)>": 0.4494966840216221
        }, 
        {
            "<boofcv.alg.feature.describe.SurfDescribeOps: double rotatedWidth(double,double,double)>": 0.4423976187851953
        }
    ], 
    "<com.flowpowered.react.math.Matrix4x4: float determinant3x3(float,float,float,float,float,float,float,float,float)>": [
        {
            "<org.jbox2d.common.MathUtils: float map(float,float,float,float,float)>": 0.7256967760792827
        }, 
        {
            "<org.jbox2d.common.MathUtils: float randomFloat(java.util.Random,float,float)>": 0.6443158831266848
        }, 
        {
            "<org.jbox2d.common.MathUtils: float randomFloat(float,float)>": 0.6399503431108143
        }, 
        {
            "<boofcv.alg.feature.detect.interest.FastHessianFeatureDetector: float polyPeak(float,float,float)>": 0.5214885093936725
        }, 
        {
            "<org.jbox2d.common.MathUtils: float clamp(float,float,float)>": 0.5201419993167411
        }
    ], 
    "<com.flowpowered.react.ReactDefaults$JointsPositionCorrectionTechnique: com.flowpowered.react.ReactDefaults$JointsPositionCorrectionTechnique valueOf(java.lang.String)>": [
        {
            "<net.smert.jreactphysics3d.collision.shapes.CollisionShapeType: net.smert.jreactphysics3d.collision.shapes.CollisionShapeType valueOf(java.lang.String)>": 0.260989010989011
        }, 
        {
            "<net.smert.jreactphysics3d.configuration.ContactsPositionCorrectionTechnique: net.smert.jreactphysics3d.configuration.ContactsPositionCorrectionTechnique valueOf(java.lang.String)>": 0.260989010989011
        }, 
        {
            "<net.smert.jreactphysics3d.configuration.JointsPositionCorrectionTechnique: net.smert.jreactphysics3d.configuration.JointsPositionCorrectionTechnique valueOf(java.lang.String)>": 0.260989010989011
        }, 
        {
            "<net.smert.jreactphysics3d.constraint.JointType: net.smert.jreactphysics3d.constraint.JointType valueOf(java.lang.String)>": 0.260989010989011
        }, 
        {
            "<Catalano.Statistics.Analysis.PrincipalComponentAnalysis$AnalysisMethod: Catalano.Statistics.Analysis.PrincipalComponentAnalysis$AnalysisMethod valueOf(java.lang.String)>": 0.260989010989011
        }
    ], 
    "<com.flowpowered.react.math.Matrix2x2: com.flowpowered.react.math.Matrix2x2 add(com.flowpowered.react.math.Matrix2x2,com.flowpowered.react.math.Matrix2x2)>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 abs()>": 0.40619013106654517
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 abs()>": 0.4031080057575564
        }, 
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector3 toVector3()>": 0.4020032593632948
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: net.smert.jreactphysics3d.mathematics.Vector3 abs()>": 0.40018672062992156
        }, 
        {
            "<org.jbox2d.common.Vec2: void absLocal()>": 0.39922909543755297
        }
    ], 
    "<com.flowpowered.react.constraint.BallAndSocketJoint: void solvePositionConstraint(com.flowpowered.react.constraint.ConstraintSolver$ConstraintSolverData)>": [
        {
            "<org.dyn4j.dynamics.World: void solveTOI(org.dyn4j.dynamics.ContinuousDetectionMode)>": 0.10505785031154412
        }, 
        {
            "<org.dyn4j.dynamics.World: boolean detect(org.dyn4j.geometry.Convex,org.dyn4j.dynamics.Body,org.dyn4j.collision.Filter,boolean,boolean,java.util.List)>": 0.1040747756376311
        }, 
        {
            "<net.imglib2.histogram.HistogramNd: boolean hasTails(int)>": 0.10405079661134976
        }, 
        {
            "<org.dyn4j.dynamics.World: boolean detect(org.dyn4j.geometry.Convex,org.dyn4j.geometry.Transform,org.dyn4j.dynamics.Body,org.dyn4j.collision.Filter,boolean,boolean,java.util.List)>": 0.10331662130376057
        }, 
        {
            "<org.dyn4j.dynamics.World: boolean raycast(org.dyn4j.geometry.Ray,org.dyn4j.dynamics.Body,double,org.dyn4j.collision.Filter,boolean,org.dyn4j.dynamics.RaycastResult)>": 0.10270107572410575
        }
    ], 
    "<com.flowpowered.react.math.Matrix3x3: com.flowpowered.react.math.Matrix3x3 subtract(com.flowpowered.react.math.Matrix3x3,com.flowpowered.react.math.Matrix3x3)>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 abs()>": 0.44000705763487014
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 abs()>": 0.43667075188014437
        }, 
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector3 toVector3()>": 0.43529788976448547
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: net.smert.jreactphysics3d.mathematics.Vector3 abs()>": 0.4335084999809011
        }, 
        {
            "<org.jbox2d.common.Vec2: void absLocal()>": 0.43239551268294096
        }
    ], 
    "<com.flowpowered.react.engine.Material: void <init>()>": [
        {
            "<net.smert.jreactphysics3d.engine.Material: void <init>()>": 0.2936507936507936
        }, 
        {
            "<Catalano.Imaging.Filters.Clahe: int roundPositive(float)>": 0.2000743219057197
        }, 
        {
            "<net.imglib2.position.transform.Round: long round(float)>": 0.19846608866973908
        }, 
        {
            "<net.imglib2.util.Util: int round(float)>": 0.1976783861608994
        }, 
        {
            "<net.imglib2.type.numeric.complex.AbstractComplexType: void setComplexNumber(float,float)>": 0.19543398999264291
        }
    ], 
    "<com.flowpowered.react.math.Vector2: com.flowpowered.react.math.Vector2 getAbsoluteVector()>": [
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector4 Abs()>": 0.4485610059407519
        }, 
        {
            "<Catalano.Math.Vector3: Catalano.Math.Vector3 Abs()>": 0.43869291498922225
        }, 
        {
            "<org.jbox2d.common.Mat22: org.jbox2d.common.Mat22 abs()>": 0.42141074520855437
        }, 
        {
            "<org.jbox2d.common.Vec2: org.jbox2d.common.Vec2 abs()>": 0.413340724316334
        }, 
        {
            "<org.jbox2d.common.Vec2: org.jbox2d.common.Vec2 abs(org.jbox2d.common.Vec2)>": 0.3959870566507819
        }
    ], 
    "<com.flowpowered.react.engine.ContactSolver: void initializeForIsland(float,com.flowpowered.react.engine.Island)>": [
        {
            "<org.jbox2d.collision.shapes.ChainShape: void computeAABB(org.jbox2d.collision.AABB,org.jbox2d.common.Transform,int)>": 0.14445103864883946
        }, 
        {
            "<org.jbox2d.particle.ParticleSystem: void raycast(org.jbox2d.callbacks.ParticleRaycastCallback,org.jbox2d.common.Vec2,org.jbox2d.common.Vec2)>": 0.14386653769765484
        }, 
        {
            "<org.jbox2d.dynamics.Island: void solve(org.jbox2d.dynamics.Profile,org.jbox2d.dynamics.TimeStep,org.jbox2d.common.Vec2,boolean)>": 0.14274439773760197
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 inverse()>": 0.141699681539922
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 inverse()>": 0.14166062330809323
        }
    ], 
    "<com.flowpowered.react.collision.narrowphase.EPA.TrianglesStore: void <init>()>": [
        {
            "<Catalano.Imaging.Filters.HistogramShrink: void <init>()>": 0.14476650603589652
        }, 
        {
            "<Catalano.Imaging.Filters.HistogramStretch: void <init>()>": 0.14476650603589652
        }, 
        {
            "<Catalano.Imaging.Concurrent.Filters.SobelEdgeDetector: void <init>()>": 0.13442290969427412
        }, 
        {
            "<boofcv.gui.tracker.TrackerObjectQuadPanel: void enterSelectMode()>": 0.13442290969427412
        }, 
        {
            "<org.jbox2d.dynamics.Filter: void <init>()>": 0.1329726164507926
        }
    ], 
    "<com.flowpowered.react.constraint.HingeJoint: float computeNormalizedAngle(float)>": [
        {
            "<net.smert.jreactphysics3d.constraint.HingeJoint: float computeNormalizedAngle(float)>": 0.35773218057892614
        }, 
        {
            "<net.smert.jreactphysics3d.constraint.HingeJoint: float computeCorrespondingAngleNearLimits(float,float,float)>": 0.33050464199202756
        }, 
        {
            "<org.jbox2d.common.MathUtils: float clamp(float,float,float)>": 0.3241378938782287
        }, 
        {
            "<org.jbox2d.dynamics.contacts.Contact: float mixFriction(float,float)>": 0.32266011459309224
        }, 
        {
            "<org.jbox2d.common.Settings: float mixFriction(float,float)>": 0.32266011459309224
        }
    ], 
    "<com.flowpowered.react.engine.Timer: boolean isPossibleToTakeStep()>": [
        {
            "<Catalano.Core.DoubleRange: boolean IsOverlapping(Catalano.Core.DoubleRange)>": 0.5759718143893291
        }, 
        {
            "<net.smert.jreactphysics3d.engine.Timer: boolean isPossibleToTakeStep()>": 0.5697916666666667
        }, 
        {
            "<org.dyn4j.geometry.Interval: boolean isDegenerate()>": 0.5697916666666667
        }, 
        {
            "<org.dyn4j.dynamics.joint.WeldJoint: boolean isSpring()>": 0.540254105467014
        }, 
        {
            "<org.dyn4j.dynamics.joint.WheelJoint: boolean isSpring()>": 0.540254105467014
        }
    ], 
    "<com.flowpowered.react.collision.shape.CylinderShape: com.flowpowered.react.math.Vector3 getLocalSupportPointWithoutMargin(com.flowpowered.react.math.Vector3)>": [
        {
            "<Catalano.Math.Vector3: float Norm()>": 0.3564223618986613
        }, 
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector4 Abs()>": 0.35530758764465
        }, 
        {
            "<Catalano.Math.Vector3: float Normalize()>": 0.353690202460186
        }, 
        {
            "<Catalano.Math.Vector4: float Norm()>": 0.35156978881374273
        }, 
        {
            "<boofcv.alg.feature.detect.intensity.impl.ImplShiTomasiCorner_F32: float computeIntensity()>": 0.34981771945413537
        }
    ], 
    "<com.flowpowered.react.engine.ContactSolver: float computeMixedRestitutionFactor(com.flowpowered.react.body.RigidBody,com.flowpowered.react.body.RigidBody)>": [
        {
            "<org.jbox2d.common.MathUtils: float min(float,float)>": 0.38808889686675646
        }, 
        {
            "<org.jbox2d.dynamics.contacts.Contact: float mixRestitution(float,float)>": 0.38808889686675646
        }, 
        {
            "<org.jbox2d.common.MathUtils: float max(float,float)>": 0.38808889686675646
        }, 
        {
            "<org.jbox2d.common.Settings: float mixRestitution(float,float)>": 0.38808889686675646
        }, 
        {
            "<Catalano.Math.Vector4: float getMax()>": 0.32435534645709235
        }
    ], 
    "<com.flowpowered.react.collision.shape.CylinderShape: void computeLocalInertiaTensor(com.flowpowered.react.math.Matrix3x3,float)>": [
        {
            "<net.smert.jreactphysics3d.collision.shapes.CylinderShape: void computeLocalInertiaTensor(net.smert.jreactphysics3d.mathematics.Matrix3x3,float)>": 0.5730864630816652
        }, 
        {
            "<boofcv.alg.interpolate.kernel.BicubicKernel_F32: float compute(float)>": 0.44878427821847394
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 inverse()>": 0.4483371029088744
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 multiply(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": 0.44663223831200194
        }, 
        {
            "<net.smert.jreactphysics3d.collision.shapes.CapsuleShape: void computeLocalInertiaTensor(net.smert.jreactphysics3d.mathematics.Matrix3x3,float)>": 0.4465533436853093
        }
    ], 
    "<com.flowpowered.react.Utilities: int indexOf(java.lang.Object[],java.lang.Object)>": [
        {
            "<net.smert.jreactphysics3d.collision.broadphase.PairManager: int computePairOffset(net.smert.jreactphysics3d.collision.broadphase.BodyPair)>": 0.37934153445839863
        }, 
        {
            "<net.coobird.thumbnailator.Thumbnails: void checkForEmpty(java.lang.Object[],java.lang.String)>": 0.3615421460706307
        }, 
        {
            "<boofcv.alg.fiducial.calib.DetectFiducialSquareGrid: int isExpected(long)>": 0.34449105795567025
        }, 
        {
            "<Catalano.Math.Matrix: java.lang.Object[] getColumns(java.lang.Object[],int,int)>": 0.319006576059155
        }, 
        {
            "<Catalano.Math.Matrix: java.lang.Object[] RemoveColumn(java.lang.Object[],int)>": 0.28125209187901656
        }
    ], 
    "<com.flowpowered.react.math.Vector4: int hashCode()>": [
        {
            "<org.jbox2d.testbed.pooling.ColorKey: int hashCode()>": 0.6791582391936007
        }, 
        {
            "<org.jbox2d.common.Vec3: int hashCode()>": 0.5906932274156884
        }, 
        {
            "<org.jbox2d.common.Vec2: int hashCode()>": 0.5671461395922573
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Quaternion: int hashCode()>": 0.5113415777572576
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: int hashCode()>": 0.5113415777572576
        }
    ], 
    "<com.flowpowered.react.collision.shape.CapsuleShape: void computeLocalInertiaTensor(com.flowpowered.react.math.Matrix3x3,float)>": [
        {
            "<net.smert.jreactphysics3d.collision.shapes.CapsuleShape: void computeLocalInertiaTensor(net.smert.jreactphysics3d.mathematics.Matrix3x3,float)>": 0.7349251072435813
        }, 
        {
            "<org.jbox2d.dynamics.contacts.ContactSolver: void solveVelocityConstraints()>": 0.4730476620406333
        }, 
        {
            "<boofcv.alg.interpolate.kernel.BicubicKernel_F32: float compute(float)>": 0.4720398100437936
        }, 
        {
            "<org.jbox2d.dynamics.contacts.ContactSolver: boolean solvePositionConstraints()>": 0.4652880082673715
        }, 
        {
            "<boofcv.alg.distort.radtan.AddRadialPtoN_F32: void compute(float,float,georegression.struct.point.Point2D_F32)>": 0.4639401378897253
        }
    ], 
    "<com.flowpowered.react.collision.shape.SphereShape: boolean isEqualTo(com.flowpowered.react.collision.shape.CollisionShape)>": [
        {
            "<Catalano.Core.FloatRange: boolean IsOverlapping(Catalano.Core.FloatRange)>": 0.5476118153724757
        }, 
        {
            "<Catalano.Math.Geometry.Line: boolean isHorizontal()>": 0.5193114100524292
        }, 
        {
            "<net.smert.jreactphysics3d.collision.shapes.SphereShape: boolean isEqualTo(net.smert.jreactphysics3d.collision.shapes.CollisionShape)>": 0.5114583333333333
        }, 
        {
            "<Catalano.Core.FloatRange: boolean isInside(float)>": 0.4870389259649477
        }, 
        {
            "<boofcv.struct.flow.ImageFlow$D: boolean isValid()>": 0.4831433950024512
        }
    ], 
    "<com.flowpowered.react.math.Vector3: void setAllValues(float,float,float)>": [
        {
            "<org.jbox2d.common.MathUtils: float clamp(float,float,float)>": 0.5089427971914924
        }, 
        {
            "<org.jbox2d.dynamics.contacts.Contact: float mixFriction(float,float)>": 0.5055347311442395
        }, 
        {
            "<org.jbox2d.common.Settings: float mixFriction(float,float)>": 0.5055347311442395
        }, 
        {
            "<net.smert.jreactphysics3d.engine.Profiler: float GetElapsedTimeSinceStart()>": 0.4933873287503696
        }, 
        {
            "<boofcv.alg.color.ColorRgb: float rgbToGray_Weighted(float,float,float)>": 0.4907835115021981
        }
    ], 
    "<com.flowpowered.react.math.Matrix3x3: com.flowpowered.react.math.Matrix3x3 getInverse()>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 inverse()>": 0.4050079612796655
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 multiply(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": 0.40305249795940795
        }, 
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.40270827211822857
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.4019678869266356
        }, 
        {
            "<org.jbox2d.dynamics.contacts.PositionSolverManifold: void initialize(org.jbox2d.dynamics.contacts.ContactPositionConstraint,org.jbox2d.common.Transform,org.jbox2d.common.Transform,int)>": 0.39788989164480815
        }
    ], 
    "<com.flowpowered.react.collision.CollisionDetection: void computeCollisionDetection()>": [
        {
            "<net.coobird.thumbnailator.makers.ThumbnailMaker$ReadinessTracker: boolean isReady()>": 0.4116690519876868
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void updateRigidBodiesAABB()>": 0.4041172404625335
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void setIsSleepingEnabled(boolean)>": 0.39326708886592154
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void resetContactManifoldListsOfBodies()>": 0.3916257426150505
        }, 
        {
            "<boofcv.alg.bow.LearnSceneFromFiles: void extractKeys(java.util.Map)>": 0.3730503497936391
        }
    ], 
    "<com.flowpowered.react.constraint.SliderJoint: void resetLimits()>": [
        {
            "<net.smert.jreactphysics3d.constraint.SliderJoint: void setMaxTranslationLimit(float)>": 0.13179205741732966
        }, 
        {
            "<net.smert.jreactphysics3d.constraint.SliderJoint: void setMinTranslationLimit(float)>": 0.13179205741732966
        }, 
        {
            "<org.jbox2d.common.Color3f: void <init>()>": 0.1310356045902398
        }, 
        {
            "<org.jbox2d.common.Vec3: void <init>()>": 0.1310356045902398
        }, 
        {
            "<net.imglib2.type.numeric.complex.AbstractComplexType: void setComplexNumber(float,float)>": 0.1309462316541243
        }
    ], 
    "<com.flowpowered.react.engine.CollisionWorld: int getNextFreeID()>": [
        {
            "<Catalano.Imaging.Tools.BlobDetection: void ShuffleColor()>": 0.3922266399402916
        }, 
        {
            "<org.jbox2d.common.MathUtils: int max(int,int)>": 0.38971314574202076
        }, 
        {
            "<org.jbox2d.common.MathUtils: int min(int,int)>": 0.38971314574202076
        }, 
        {
            "<org.jbox2d.particle.ParticleSystem: int limitCapacity(int,int)>": 0.38971314574202076
        }, 
        {
            "<Catalano.Math.Tools: int PreviousPowerOf2(int)>": 0.3708865303447785
        }
    ], 
    "<com.flowpowered.react.math.Vector3: com.flowpowered.react.math.Vector3 divide(com.flowpowered.react.math.Vector3,float)>": [
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector3 toVector3()>": 0.34683655235766
        }, 
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector4 Subtract(Catalano.Math.Vector4,float)>": 0.3340502001290991
        }, 
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector4 Add(Catalano.Math.Vector4,float)>": 0.3340502001290991
        }, 
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector4 Divide(Catalano.Math.Vector4,float)>": 0.3340502001290991
        }, 
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector4 Multiply(Catalano.Math.Vector4,float)>": 0.3340502001290991
        }
    ], 
    "<com.flowpowered.react.math.Quaternion: void inverse()>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 multiply(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": 0.5218682486636397
        }, 
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.5217352462968068
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 inverse()>": 0.5211797401703077
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.5208042162035533
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Quaternion: net.smert.jreactphysics3d.mathematics.Quaternion inverse()>": 0.5184804441697156
        }
    ], 
    "<com.flowpowered.react.collision.shape.BoxShape: void <init>(com.flowpowered.react.collision.shape.BoxShape)>": [
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.07008233508957948
        }, 
        {
            "<org.dyn4j.sandbox.Sandbox: void init(com.jogamp.opengl.GLAutoDrawable)>": 0.0661589725305816
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.TestbedMain: void main(java.lang.String[])>": 0.06487446070815474
        }, 
        {
            "<org.dyn4j.sandbox.panels.LineGraphPanel: void setStaticSize(java.awt.Dimension)>": 0.06390096504226937
        }, 
        {
            "<boofcv.gui.d3.Polygon3DSequenceViewer: void <init>()>": 0.06373774391990981
        }
    ], 
    "<com.flowpowered.react.collision.broadphase.BroadPhaseAlgorithm: com.flowpowered.react.collision.broadphase.PairManager$BodyPair getLastOverlappingPair()>": [
        {
            "<Catalano.Imaging.Filters.GaussianBlur: void <init>()>": 0.024397501823713325
        }, 
        {
            "<Catalano.Imaging.Concurrent.Filters.BradleyLocalThreshold: void <init>()>": 0.024397501823713325
        }, 
        {
            "<Catalano.Imaging.Filters.CosineTransform: void <init>()>": 0.024397501823713325
        }, 
        {
            "<Catalano.Imaging.Filters.BradleyLocalThreshold: void <init>()>": 0.024397501823713325
        }, 
        {
            "<Catalano.Imaging.Filters.UnsharpMasking: void <init>()>": 0.024397501823713325
        }
    ], 
    "<com.flowpowered.react.math.Matrix3x3: com.flowpowered.react.math.Matrix3x3 getTranspose()>": [
        {
            "<org.jbox2d.testbed.framework.j2d.DebugDrawJ2D$1: java.awt.Color newColor(float,float,float,float)>": 0.26980603226189187
        }, 
        {
            "<org.jbox2d.callbacks.DebugDraw: void setCamera(float,float,float)>": 0.2669670329645441
        }, 
        {
            "<org.jbox2d.testbed.framework.TestbedCamera: void setCamera(org.jbox2d.common.Vec2,float)>": 0.26292727587123693
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.DebugDrawJ2D$1: java.lang.Object newColor(float,float,float,float)>": 0.25973764547571504
        }, 
        {
            "<org.jbox2d.common.Mat33: void <init>(float,float,float,float,float,float,float,float,float)>": 0.2597291724788623
        }
    ], 
    "<com.flowpowered.react.collision.broadphase.SweepAndPruneAlgorithm$AABBInt: void <init>(long,long)>": [
        {
            "<net.smert.jreactphysics3d.collision.broadphase.AABBInt: void <init>(long,long)>": 0.5774413443246671
        }, 
        {
            "<net.imglib2.AbstractInterval: void <init>(int)>": 0.33700283554095833
        }, 
        {
            "<net.imglib2.AbstractInterval: void <init>(long[])>": 0.33040271382467545
        }, 
        {
            "<net.imglib2.view.SubsampleIntervalView: void <init>(net.imglib2.RandomAccessibleInterval,long)>": 0.3272262544577212
        }, 
        {
            "<net.imglib2.outofbounds.OutOfBoundsPeriodic: void <init>(net.imglib2.Interval)>": 0.3248985132873628
        }
    ], 
    "<com.flowpowered.react.collision.narrowphase.EPA.TriangleEPA: void halfLink(com.flowpowered.react.collision.narrowphase.EPA.EdgeEPA,com.flowpowered.react.collision.narrowphase.EPA.EdgeEPA)>": [
        {
            "<boofcv.alg.transform.wavelet.UtilWavelet: void checkShape(boofcv.struct.wavelet.WlCoef,boofcv.struct.image.ImageGray,boofcv.struct.image.ImageGray,int)>": 0.3334031186147786
        }, 
        {
            "<boofcv.alg.misc.ImageMiscOps: void rotateCCW(boofcv.struct.image.GrayS32,boofcv.struct.image.GrayS32)>": 0.33192414941145143
        }, 
        {
            "<boofcv.alg.misc.ImageMiscOps: void rotateCW(boofcv.struct.image.GrayS32,boofcv.struct.image.GrayS32)>": 0.33192414941145143
        }, 
        {
            "<boofcv.alg.misc.ImageMiscOps: void rotateCW(boofcv.struct.image.GrayI8,boofcv.struct.image.GrayI8)>": 0.33124385382863314
        }, 
        {
            "<boofcv.alg.misc.ImageMiscOps: void rotateCW(boofcv.struct.image.GrayF64,boofcv.struct.image.GrayF64)>": 0.33124385382863314
        }
    ], 
    "<com.flowpowered.react.ReactDefaults$JointsPositionCorrectionTechnique: void <init>(java.lang.String,int)>": [
        {
            "<net.smert.jreactphysics3d.configuration.ContactsPositionCorrectionTechnique: void <init>(java.lang.String,int)>": 0.4415584415584415
        }, 
        {
            "<net.smert.jreactphysics3d.constraint.JointType: void <init>(java.lang.String,int)>": 0.4415584415584415
        }, 
        {
            "<net.smert.jreactphysics3d.collision.shapes.CollisionShapeType: void <init>(java.lang.String,int)>": 0.4415584415584415
        }, 
        {
            "<net.smert.jreactphysics3d.configuration.JointsPositionCorrectionTechnique: void <init>(java.lang.String,int)>": 0.4415584415584415
        }, 
        {
            "<Catalano.Statistics.Analysis.PrincipalComponentAnalysis$AnalysisMethod: void <init>(java.lang.String,int)>": 0.4415584415584415
        }
    ], 
    "<com.flowpowered.react.collision.shape.CapsuleShape: void <init>(com.flowpowered.react.collision.shape.CapsuleShape)>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 abs()>": 0.3247295605498648
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 abs()>": 0.32391829193684735
        }, 
        {
            "<org.jbox2d.common.Vec2: void absLocal()>": 0.3238221377459168
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: net.smert.jreactphysics3d.mathematics.Vector3 abs()>": 0.322554433773684
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector2: net.smert.jreactphysics3d.mathematics.Vector2 abs()>": 0.318024693216996
        }
    ], 
    "<com.flowpowered.react.math.Matrix3x3: void setToZero()>": [
        {
            "<org.dyn4j.sandbox.utilities.ColorUtilities: java.awt.Color convertColor(float[])>": 0.1495228655508563
        }, 
        {
            "<org.dyn4j.sandbox.SandboxBody: void stencil(com.jogamp.opengl.GL2)>": 0.11967394858902486
        }, 
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.11939293061898819
        }, 
        {
            "<org.dyn4j.geometry.CapsuleTest: void getFoci()>": 0.11586990418097629
        }, 
        {
            "<org.dyn4j.sandbox.Sandbox: void init(com.jogamp.opengl.GLAutoDrawable)>": 0.11577044076206111
        }
    ], 
    "<com.flowpowered.react.math.Vector4: com.flowpowered.react.math.Vector4 subtract(com.flowpowered.react.math.Vector4,com.flowpowered.react.math.Vector4)>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 abs()>": 0.3849718906667029
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 abs()>": 0.3820468798027056
        }, 
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector3 toVector3()>": 0.3804639859925687
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: net.smert.jreactphysics3d.mathematics.Vector3 abs()>": 0.37927459159678634
        }, 
        {
            "<org.jbox2d.common.Vec2: void absLocal()>": 0.3784885522165437
        }
    ], 
    "<com.flowpowered.react.engine.DynamicsWorld: void resetContactManifoldListsOfBodies()>": [
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void resetContactManifoldListsOfBodies()>": 0.47500000000000003
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void updateRigidBodiesAABB()>": 0.44161544136874475
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void resetBodiesMovementVariable()>": 0.4312204973843289
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void setIsSleepingEnabled(boolean)>": 0.42056350051632624
        }, 
        {
            "<net.coobird.thumbnailator.makers.ThumbnailMaker$ReadinessTracker: boolean isReady()>": 0.3963288367394638
        }
    ], 
    "<com.flowpowered.react.constraint.HingeJoint: void setMaxMotorForce(float)>": [
        {
            "<boofcv.factory.background.ConfigBackgroundGaussian: void checkValidity()>": 0.3233313251818545
        }, 
        {
            "<boofcv.factory.background.ConfigBackgroundBasic: void checkValidity()>": 0.309235443963506
        }, 
        {
            "<net.smert.jreactphysics3d.constraint.HingeJoint: void setMaxMotorTorque(float)>": 0.28917771769483847
        }, 
        {
            "<net.smert.jreactphysics3d.constraint.SliderJoint: void setMaxMotorForce(float)>": 0.28917771769483847
        }, 
        {
            "<net.smert.jreactphysics3d.constraint.HingeJoint: void setMinAngleLimit(float)>": 0.28349964891238366
        }
    ], 
    "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 getAbsoluteMatrix()>": [
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector4 Abs()>": 0.47161752161999965
        }, 
        {
            "<Catalano.Math.Vector3: Catalano.Math.Vector3 Abs()>": 0.4601733097514531
        }, 
        {
            "<org.jbox2d.common.Mat22: org.jbox2d.common.Mat22 abs()>": 0.4425979182292253
        }, 
        {
            "<org.jbox2d.common.Vec2: org.jbox2d.common.Vec2 abs()>": 0.43155984270881564
        }, 
        {
            "<org.jbox2d.common.Vec2: org.jbox2d.common.Vec2 abs(org.jbox2d.common.Vec2)>": 0.4163561357754483
        }
    ], 
    "<com.flowpowered.react.collision.narrowphase.GJK.Simplex: int getSimplex(com.flowpowered.react.math.Vector3[],com.flowpowered.react.math.Vector3[],com.flowpowered.react.math.Vector3[])>": [
        {
            "<Catalano.Imaging.Filters.HorizontalRunLengthSmoothing: void applyInPlace(Catalano.Imaging.FastBitmap)>": 0.1325725453006236
        }, 
        {
            "<Catalano.Imaging.Filters.VerticalRunLengthSmoothing: void applyInPlace(Catalano.Imaging.FastBitmap)>": 0.12926469452546757
        }, 
        {
            "<Catalano.Imaging.Filters.Threshold: void applyInPlace(Catalano.Imaging.FastBitmap)>": 0.12407728390168425
        }, 
        {
            "<Catalano.Imaging.Filters.CosineTransform: void Forward(Catalano.Imaging.FastBitmap)>": 0.12364670617062058
        }, 
        {
            "<Catalano.Imaging.Filters.WaveletTransform: void Forward(Catalano.Imaging.FastBitmap)>": 0.12270065994264899
        }
    ], 
    "<com.flowpowered.react.math.Matrix3x3: com.flowpowered.react.math.Matrix3x3 multiply(com.flowpowered.react.math.Matrix3x3,float)>": [
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector3 toVector3()>": 0.4262379230516475
        }, 
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector4 Subtract(Catalano.Math.Vector4,Catalano.Math.Vector4)>": 0.4103937975698891
        }, 
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector4 Multiply(Catalano.Math.Vector4,Catalano.Math.Vector4)>": 0.4103937975698891
        }, 
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector4 Divide(Catalano.Math.Vector4,Catalano.Math.Vector4)>": 0.4103937975698891
        }, 
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector4 Add(Catalano.Math.Vector4,Catalano.Math.Vector4)>": 0.4103937975698891
        }
    ], 
    "<com.flowpowered.react.collision.CollisionDetection: void computeNarrowPhase()>": [
        {
            "<net.coobird.thumbnailator.makers.ThumbnailMaker$ReadinessTracker: boolean isReady()>": 0.30406977672625446
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void updateRigidBodiesAABB()>": 0.2623529215333785
        }, 
        {
            "<boofcv.alg.bow.LearnSceneFromFiles: void extractKeys(java.util.Map)>": 0.254652163654608
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void setIsSleepingEnabled(boolean)>": 0.2542754900568271
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void resetContactManifoldListsOfBodies()>": 0.23280887141989368
        }
    ], 
    "<com.flowpowered.react.math.Matrix3x3: com.flowpowered.react.math.Vector3 getColumn(int)>": [
        {
            "<boofcv.alg.interpolate.impl.ImplPolynomialPixel_F32: void <init>(int,float,float)>": 0.22802959174140114
        }, 
        {
            "<boofcv.alg.interpolate.impl.ImplPolynomialPixel_I: void <init>(int,float,float)>": 0.22802959174140114
        }, 
        {
            "<boofcv.struct.distort.SequencePointTransform_F32: void compute(float,float,georegression.struct.point.Point2D_F32)>": 0.2233675654242157
        }, 
        {
            "<boofcv.factory.background.FactoryBackgroundModel: boofcv.alg.background.stationary.BackgroundStationaryGaussian stationaryGaussian(boofcv.factory.background.ConfigBackgroundGaussian,boofcv.struct.image.ImageType)>": 0.2181455238116566
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.DebugDrawJ2D$1: java.awt.Color newColor(float,float,float,float)>": 0.215084490449665
        }
    ], 
    "<com.flowpowered.react.engine.DynamicsWorld: void destroyRigidBody(com.flowpowered.react.body.RigidBody)>": [
        {
            "<boofcv.alg.feature.detect.interest.GeneralFeatureDetector: void <init>(boofcv.abst.feature.detect.intensity.GeneralFeatureIntensity,boofcv.abst.feature.detect.extract.NonMaxSuppression)>": 0.16091581854041417
        }, 
        {
            "<org.dyn4j.sandbox.Sandbox: void renderBody(com.jogamp.opengl.GL2,org.dyn4j.sandbox.SandboxBody)>": 0.1573760673001981
        }, 
        {
            "<net.imglib2.view.TransformBuilder: void simplifyTransforms()>": 0.1536517771096874
        }, 
        {
            "<net.imglib2.view.TransformBuilder: void <init>(net.imglib2.Interval,net.imglib2.RandomAccessible)>": 0.15217347286691485
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: net.smert.jreactphysics3d.body.RigidBody createRigidBody(net.smert.jreactphysics3d.mathematics.Transform,float,net.smert.jreactphysics3d.mathematics.Matrix3x3,net.smert.jreactphysics3d.collision.shapes.CollisionShape)>": 0.15091280825578499
        }
    ], 
    "<com.flowpowered.react.engine.DynamicsWorld: void updateSleepingBodies()>": [
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void updateSleepingBodies()>": 0.3747960211602016
        }, 
        {
            "<boofcv.alg.tracker.klt.KltTracker: boofcv.alg.tracker.klt.KltTrackFault track(boofcv.alg.tracker.klt.KltFeature)>": 0.3260787086590795
        }, 
        {
            "<boofcv.alg.distort.DistortImageOps: void updateBoundBox(boofcv.struct.distort.PixelTransform_F32,boofcv.struct.ImageRectangle_F32)>": 0.31627238644724365
        }, 
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.EPA.TriangleEPA: boolean isClosestPointInternalToTriangle()>": 0.3162294025661191
        }, 
        {
            "<boofcv.alg.filter.kernel.KernelMath: boolean isEqualsFrac(float[],float[],int,float,float)>": 0.31619267422007
        }
    ], 
    "<com.flowpowered.react.collision.RayCaster: boolean intersects(com.flowpowered.react.math.Vector3,com.flowpowered.react.math.Vector3,com.flowpowered.react.collision.shape.SphereShape,com.flowpowered.react.math.Vector3)>": [
        {
            "<org.jbox2d.collision.shapes.CircleShape: boolean raycast(org.jbox2d.collision.RayCastOutput,org.jbox2d.collision.RayCastInput,org.jbox2d.common.Transform,int)>": 0.4247389963425699
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 inverse()>": 0.4034980697255514
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 multiply(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": 0.4018031179205151
        }, 
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.40018249605068185
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.39943676037613096
        }
    ], 
    "<com.flowpowered.react.collision.shape.SphereShape: void <init>(float)>": [
        {
            "<boofcv.factory.background.ConfigBackgroundGaussian: void checkValidity()>": 0.3256316268702332
        }, 
        {
            "<boofcv.alg.background.stationary.BackgroundStationaryBasic: void <init>(float,float,boofcv.struct.image.ImageType)>": 0.30907032391035044
        }, 
        {
            "<boofcv.factory.background.ConfigBackgroundBasic: void checkValidity()>": 0.3006934483854625
        }, 
        {
            "<boofcv.alg.background.moving.BackgroundMovingBasic: void <init>(float,float,boofcv.struct.distort.PointTransformModel_F32,boofcv.struct.image.ImageType)>": 0.2976647001066521
        }, 
        {
            "<boofcv.alg.background.stationary.BackgroundStationaryGaussian: void <init>(float,float,boofcv.struct.image.ImageType)>": 0.27263573411351943
        }
    ], 
    "<com.flowpowered.react.collision.narrowphase.EPA.EdgeEPA: void <init>(com.flowpowered.react.collision.narrowphase.EPA.EdgeEPA)>": [
        {
            "<org.box2d.proto.Box2D$PbJoint: void writeTo(com.google.protobuf.CodedOutputStream)>": 0.196376678827537
        }, 
        {
            "<org.box2d.proto.Box2D$PbBody: void writeTo(com.google.protobuf.CodedOutputStream)>": 0.19489697215467647
        }, 
        {
            "<net.imglib2.type.numeric.ARGBType: void div(net.imglib2.type.numeric.ARGBType)>": 0.19398446240916298
        }, 
        {
            "<net.imglib2.type.numeric.ARGBType: void mul(net.imglib2.type.numeric.ARGBType)>": 0.19398446240916298
        }, 
        {
            "<net.imglib2.type.numeric.ARGBType: void add(net.imglib2.type.numeric.ARGBType)>": 0.19398446240916298
        }
    ], 
    "<com.flowpowered.react.collision.broadphase.PairManager: int computeHashBodies(int,int)>": [
        {
            "<net.smert.jreactphysics3d.collision.broadphase.PairManager: int computeHashBodies(int,int)>": 0.9456518133569217
        }, 
        {
            "<net.smert.jreactphysics3d.collision.broadphase.PairManager: int computeHash32Bits(int)>": 0.765570953740891
        }, 
        {
            "<net.smert.jreactphysics3d.collision.broadphase.PairManager: net.smert.jreactphysics3d.collision.broadphase.BodyPair findPair(int,int)>": 0.6251298010963654
        }, 
        {
            "<net.smert.jreactphysics3d.collision.broadphase.PairManager: net.smert.jreactphysics3d.collision.broadphase.BodyPair addPair(net.smert.jreactphysics3d.body.CollisionBody,net.smert.jreactphysics3d.body.CollisionBody)>": 0.6102491501116979
        }, 
        {
            "<net.smert.jreactphysics3d.collision.broadphase.PairManager: void reallocatePairs()>": 0.5594083632063742
        }
    ], 
    "<com.flowpowered.react.math.Vector4: void <init>(com.flowpowered.react.math.Vector4)>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 abs()>": 0.5051936669215925
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 abs()>": 0.501219689125599
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: net.smert.jreactphysics3d.mathematics.Vector3 abs()>": 0.49733114603650264
        }, 
        {
            "<org.jbox2d.common.Vec2: void absLocal()>": 0.49561743676224046
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector2: net.smert.jreactphysics3d.mathematics.Vector2 abs()>": 0.48659789375978874
        }
    ], 
    "<com.flowpowered.react.engine.DynamicsWorld: void update()>": [
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void computeIslands()>": 0.37615559196757975
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void update()>": 0.37405910785997737
        }, 
        {
            "<Catalano.Imaging.Tools.ShapeDescriptors: java.util.List UltimateErodedPoints(Catalano.Imaging.FastBitmap)>": 0.3236752787155783
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void updateRigidBodiesAABB()>": 0.3198624607024168
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void setIsSleepingEnabled(boolean)>": 0.3116039896517507
        }
    ], 
    "<com.flowpowered.react.collision.shape.CollisionShape$CollisionShapeType: com.flowpowered.react.collision.shape.CollisionShape$CollisionShapeType valueOf(java.lang.String)>": [
        {
            "<net.smert.jreactphysics3d.collision.shapes.CollisionShapeType: net.smert.jreactphysics3d.collision.shapes.CollisionShapeType valueOf(java.lang.String)>": 0.260989010989011
        }, 
        {
            "<net.smert.jreactphysics3d.configuration.ContactsPositionCorrectionTechnique: net.smert.jreactphysics3d.configuration.ContactsPositionCorrectionTechnique valueOf(java.lang.String)>": 0.260989010989011
        }, 
        {
            "<net.smert.jreactphysics3d.configuration.JointsPositionCorrectionTechnique: net.smert.jreactphysics3d.configuration.JointsPositionCorrectionTechnique valueOf(java.lang.String)>": 0.260989010989011
        }, 
        {
            "<net.smert.jreactphysics3d.constraint.JointType: net.smert.jreactphysics3d.constraint.JointType valueOf(java.lang.String)>": 0.260989010989011
        }, 
        {
            "<Catalano.Statistics.Analysis.PrincipalComponentAnalysis$AnalysisMethod: Catalano.Statistics.Analysis.PrincipalComponentAnalysis$AnalysisMethod valueOf(java.lang.String)>": 0.260989010989011
        }
    ], 
    "<com.flowpowered.react.engine.CollisionWorld: void removeCollisionShape(com.flowpowered.react.collision.shape.CollisionShape)>": [
        {
            "<org.dyn4j.dynamics.BodyIterator: void remove()>": 0.2622428786191613
        }, 
        {
            "<org.dyn4j.dynamics.JointIterator: void remove()>": 0.2622428786191613
        }, 
        {
            "<boofcv.alg.fiducial.calib.grid.DetectSquareGridFiducial: boolean process(boofcv.struct.image.ImageGray)>": 0.26027916551583186
        }, 
        {
            "<Catalano.Imaging.Filters.VerticalRunLengthSmoothing: void applyInPlace(Catalano.Imaging.FastBitmap)>": 0.25996173845105164
        }, 
        {
            "<Catalano.Imaging.Filters.HorizontalRunLengthSmoothing: void applyInPlace(Catalano.Imaging.FastBitmap)>": 0.25996173845105164
        }
    ], 
    "<com.flowpowered.react.math.Quaternion: com.flowpowered.react.math.Quaternion add(com.flowpowered.react.math.Quaternion,com.flowpowered.react.math.Quaternion)>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 abs()>": 0.3849718906667029
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 abs()>": 0.3820468798027056
        }, 
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector3 toVector3()>": 0.3804639859925687
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: net.smert.jreactphysics3d.mathematics.Vector3 abs()>": 0.37927459159678634
        }, 
        {
            "<org.jbox2d.common.Vec2: void absLocal()>": 0.3784885522165437
        }
    ], 
    "<com.flowpowered.react.constraint.BallAndSocketJoint: void <init>(com.flowpowered.react.constraint.BallAndSocketJoint$BallAndSocketJointInfo)>": [
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.07407933005543157
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.TestbedMain: void main(java.lang.String[])>": 0.06857443578078071
        }, 
        {
            "<org.dyn4j.sandbox.Sandbox: void init(com.jogamp.opengl.GLAutoDrawable)>": 0.06834283862692551
        }, 
        {
            "<boofcv.demonstrations.transform.pyramid.EdgeIntensitiesApp: void main(java.lang.String[])>": 0.06550968277536225
        }, 
        {
            "<boofcv.demonstrations.tracker.CirculantVisualizationPanel: void <init>(boofcv.demonstrations.tracker.CirculantVisualizationPanel$Listener)>": 0.0644029138213241
        }
    ], 
    "<com.flowpowered.react.engine.DynamicsWorld: void addRigidBodyIgnoreTick(com.flowpowered.react.body.RigidBody)>": [
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: net.smert.jreactphysics3d.body.RigidBody createRigidBody(net.smert.jreactphysics3d.mathematics.Transform,float,net.smert.jreactphysics3d.mathematics.Matrix3x3,net.smert.jreactphysics3d.collision.shapes.CollisionShape)>": 0.1556394270664688
        }, 
        {
            "<net.smert.jreactphysics3d.collision.broadphase.NoBroadPhaseAlgorithm: void addObject(net.smert.jreactphysics3d.body.CollisionBody,net.smert.jreactphysics3d.collision.shapes.AABB)>": 0.15143590486856817
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void resetBodiesMovementVariable()>": 0.15008340284214078
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void updateRigidBodiesAABB()>": 0.1421875307711968
        }, 
        {
            "<net.smert.jreactphysics3d.engine.CollisionWorld: void destroyCollisionBody(net.smert.jreactphysics3d.body.CollisionBody)>": 0.14072397001018447
        }
    ], 
    "<com.flowpowered.react.collision.CollisionDetection: void removeNoCollisionPair(com.flowpowered.react.body.CollisionBody,com.flowpowered.react.body.CollisionBody)>": [
        {
            "<net.smert.jreactphysics3d.collision.broadphase.NoBroadPhaseAlgorithm: void addObject(net.smert.jreactphysics3d.body.CollisionBody,net.smert.jreactphysics3d.collision.shapes.AABB)>": 0.08537180095963634
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void resetBodiesMovementVariable()>": 0.08040844011283461
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: net.smert.jreactphysics3d.body.RigidBody createRigidBody(net.smert.jreactphysics3d.mathematics.Transform,float,net.smert.jreactphysics3d.mathematics.Matrix3x3,net.smert.jreactphysics3d.collision.shapes.CollisionShape)>": 0.07784768210238668
        }, 
        {
            "<net.smert.jreactphysics3d.engine.CollisionWorld: void destroyCollisionBody(net.smert.jreactphysics3d.body.CollisionBody)>": 0.07614445613640354
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void resetContactManifoldListsOfBodies()>": 0.07530800950958866
        }
    ], 
    "<com.flowpowered.react.collision.broadphase.SweepAndPruneAlgorithm$BoxAABB: void access$1600(com.flowpowered.react.collision.broadphase.SweepAndPruneAlgorithm$BoxAABB,int,int)>": [
        {
            "<boofcv.alg.feature.disparity.DisparityScoreWindowFive: void <init>(int,int,int,int)>": 0.5257296716521506
        }, 
        {
            "<boofcv.alg.feature.disparity.DisparityScoreSadRect: void <init>(int,int,int,int)>": 0.5257296716521506
        }, 
        {
            "<boofcv.struct.ImageRectangle: void <init>(int,int,int,int)>": 0.5232085702346165
        }, 
        {
            "<boofcv.factory.feature.disparity.FactoryStereoDisparityAlgs: boofcv.alg.feature.disparity.DisparitySparseScoreSadRect scoreDisparitySparseSadRect_F32(int,int,int,int)>": 0.5166880635976503
        }, 
        {
            "<boofcv.factory.feature.disparity.FactoryStereoDisparityAlgs: boofcv.alg.feature.disparity.DisparitySparseScoreSadRect scoreDisparitySparseSadRect_U8(int,int,int,int)>": 0.5166880635976503
        }
    ], 
    "<com.flowpowered.react.math.Vector2: com.flowpowered.react.math.Vector2 multiply(float,com.flowpowered.react.math.Vector2)>": [
        {
            "<boofcv.alg.feature.detect.line.gridline.Edgel: void <init>(float,float,float)>": 0.1490551505581848
        }, 
        {
            "<org.jbox2d.common.MathUtils: float map(float,float,float,float,float)>": 0.14096019152099476
        }, 
        {
            "<Catalano.Math.Matrix3x3: void <init>(float,float,float,float,float,float,float,float,float)>": 0.14047546561061652
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 set(float,float,float,float,float,float,float,float,float)>": 0.14034914351761746
        }, 
        {
            "<net.smert.jreactphysics3d.engine.Profiler: float GetElapsedTimeSinceStart()>": 0.1400270254342746
        }
    ], 
    "<com.flowpowered.react.engine.DynamicsWorld: void setSleepAngularVelocity(float)>": [
        {
            "<boofcv.factory.background.ConfigBackgroundGaussian: void checkValidity()>": 0.3576379882883496
        }, 
        {
            "<boofcv.alg.background.stationary.BackgroundStationaryBasic: void <init>(float,float,boofcv.struct.image.ImageType)>": 0.3415979091245608
        }, 
        {
            "<boofcv.alg.background.stationary.BackgroundStationaryGaussian: void <init>(float,float,boofcv.struct.image.ImageType)>": 0.3350401305321443
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void setSleepLinearVelocity(float)>": 0.3330403520701663
        }, 
        {
            "<net.smert.jreactphysics3d.body.RigidBody: void setMass(float)>": 0.3330403520701663
        }
    ], 
    "<com.flowpowered.react.constraint.HingeJoint: float computeCorrespondingAngleNearLimits(float,float,float)>": [
        {
            "<net.smert.jreactphysics3d.constraint.HingeJoint: float computeCorrespondingAngleNearLimits(float,float,float)>": 0.5061460482148685
        }, 
        {
            "<net.smert.jreactphysics3d.constraint.HingeJoint: float computeCurrentHingeAngle(net.smert.jreactphysics3d.mathematics.Quaternion,net.smert.jreactphysics3d.mathematics.Quaternion)>": 0.4402303232586471
        }, 
        {
            "<boofcv.alg.distort.radtan.RemoveRadialPtoN_F32: void compute(float,float,georegression.struct.point.Point2D_F32)>": 0.3577676026645589
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Quaternion: net.smert.jreactphysics3d.mathematics.Quaternion fromMatrix(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": 0.3517901426885096
        }, 
        {
            "<org.jbox2d.common.MathUtils: float clamp(float,float,float)>": 0.35151198206814227
        }
    ], 
    "<com.flowpowered.react.math.Vector4: com.flowpowered.react.math.Vector4 negate()>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 abs()>": 0.5273928443514424
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 abs()>": 0.5232893931499558
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: net.smert.jreactphysics3d.mathematics.Vector3 abs()>": 0.5192417975783093
        }, 
        {
            "<org.jbox2d.common.Vec2: void absLocal()>": 0.5174473661756517
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector2: net.smert.jreactphysics3d.mathematics.Vector2 abs()>": 0.5080358674937643
        }
    ], 
    "<com.flowpowered.react.collision.shape.SphereShape: void computeLocalInertiaTensor(com.flowpowered.react.math.Matrix3x3,float)>": [
        {
            "<net.smert.jreactphysics3d.collision.shapes.SphereShape: void computeLocalInertiaTensor(net.smert.jreactphysics3d.mathematics.Matrix3x3,float)>": 0.4948413545450417
        }, 
        {
            "<org.jbox2d.common.MathUtils: float clamp(float,float,float)>": 0.4475262673079884
        }, 
        {
            "<org.jbox2d.dynamics.contacts.Contact: float mixFriction(float,float)>": 0.4458158834669709
        }, 
        {
            "<org.jbox2d.common.Settings: float mixFriction(float,float)>": 0.4458158834669709
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: void <init>(float,float,float,float,float,float,float,float,float)>": 0.4218491174894454
        }
    ], 
    "<com.flowpowered.react.collision.narrowphase.EPA.EdgeEPA: int getSourceVertexIndex()>": [
        {
            "<org.jbox2d.common.MathUtils: int max(int,int)>": 0.42101300312185536
        }, 
        {
            "<org.jbox2d.common.MathUtils: int min(int,int)>": 0.42101300312185536
        }, 
        {
            "<org.jbox2d.particle.ParticleSystem: int limitCapacity(int,int)>": 0.42101300312185536
        }, 
        {
            "<boofcv.alg.fiducial.calib.squares.SquaresIntoRegularClusters: int add(int,int)>": 0.37821769671933936
        }, 
        {
            "<boofcv.alg.flow.DenseOpticalFlowBlockPyramid: float findFlow(int,int,boofcv.struct.image.ImageGray,boofcv.struct.flow.ImageFlow$D)>": 0.37680338803458757
        }
    ], 
    "<com.flowpowered.react.collision.BroadPhasePair: void <init>(com.flowpowered.react.body.CollisionBody,com.flowpowered.react.body.CollisionBody)>": [
        {
            "<org.dyn4j.examples.ExampleJOGL: void init(com.jogamp.opengl.GLAutoDrawable)>": 0.07568103438891795
        }, 
        {
            "<org.dyn4j.sandbox.Sandbox: void init(com.jogamp.opengl.GLAutoDrawable)>": 0.0743778787526217
        }, 
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.06872138349613734
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.TestbedMain: void main(java.lang.String[])>": 0.06361464251628643
        }, 
        {
            "<org.dyn4j.sandbox.panels.LineGraphPanel: void setStaticSize(java.awt.Dimension)>": 0.06266005147845038
        }
    ], 
    "<com.flowpowered.react.math.Vector2: com.flowpowered.react.math.Vector2 multiply(float)>": [
        {
            "<org.jbox2d.common.MathUtils: float map(float,float,float,float,float)>": 0.47362072319969056
        }, 
        {
            "<org.jbox2d.common.MathUtils: float randomFloat(java.util.Random,float,float)>": 0.4566600847243744
        }, 
        {
            "<org.jbox2d.common.MathUtils: float randomFloat(float,float)>": 0.44289774895313405
        }, 
        {
            "<Catalano.Core.FloatPoint: void Subtract(float)>": 0.43786040026564693
        }, 
        {
            "<Catalano.Core.FloatPoint: void Divide(float)>": 0.43786040026564693
        }
    ], 
    "<com.flowpowered.react.collision.BroadPhasePair: boolean isGreaterThan(com.flowpowered.react.collision.BroadPhasePair)>": [
        {
            "<boofcv.abst.sfm.d3.WrapVisOdomPixelDepthPnP: boolean isFault()>": 0.4338373554509977
        }, 
        {
            "<boofcv.abst.sfm.d3.VisOdomPixelDepthPnP_to_DepthVisualOdometry: boolean isFault()>": 0.4338373554509977
        }, 
        {
            "<boofcv.io.javacv.JavaCVVideoImageSequence: boolean hasNext()>": 0.4338373554509977
        }, 
        {
            "<net.imglib2.KDTree$KDTreeCursor: boolean hasNext()>": 0.4001190461197689
        }, 
        {
            "<boofcv.struct.flow.ImageFlow$D: boolean isValid()>": 0.4001190461197689
        }
    ], 
    "<com.flowpowered.react.engine.DynamicsWorld: int getNbJoints()>": [
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: int getNumJoints()>": 0.5547619047619047
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: int getNumRigidBodies()>": 0.5547619047619047
        }, 
        {
            "<org.jbox2d.common.MathUtils: int max(int,int)>": 0.3652167676687162
        }, 
        {
            "<org.jbox2d.common.MathUtils: int min(int,int)>": 0.3652167676687162
        }, 
        {
            "<org.jbox2d.particle.ParticleSystem: int limitCapacity(int,int)>": 0.3652167676687162
        }
    ], 
    "<com.flowpowered.react.collision.shape.BoxShape: void <init>(float,float,float)>": [
        {
            "<boofcv.factory.background.ConfigBackgroundGaussian: void checkValidity()>": 0.39676318719793896
        }, 
        {
            "<boofcv.factory.background.ConfigBackgroundBasic: void checkValidity()>": 0.3699885771252916
        }, 
        {
            "<boofcv.alg.background.stationary.BackgroundStationaryBasic: void <init>(float,float,boofcv.struct.image.ImageType)>": 0.28952532512407714
        }, 
        {
            "<Catalano.Math.Vector3: float getMin()>": 0.287040706256462
        }, 
        {
            "<Catalano.Math.Vector3: float getMax()>": 0.287040706256462
        }
    ], 
    "<com.flowpowered.react.math.Vector2: boolean isUnit()>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: boolean isUnit()>": 0.4837922700460329
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector2: boolean isUnit()>": 0.47839361992080887
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: boolean isZero()>": 0.47766648937904266
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 inverse()>": 0.4775773088158831
        }, 
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.47439787084242996
        }
    ], 
    "<com.flowpowered.react.engine.linked.LinkedDynamicsWorld: void <init>(com.flowpowered.react.math.Vector3,float,com.flowpowered.react.engine.linked.LinkedWorldInfo)>": [
        {
            "<net.imglib2.type.numeric.complex.AbstractComplexType: void setComplexNumber(float,float)>": 0.23808908879698143
        }, 
        {
            "<org.jbox2d.callbacks.DebugDraw: void setCamera(float,float,float)>": 0.23346080114899845
        }, 
        {
            "<net.smert.jreactphysics3d.collision.broadphase.NoBroadPhaseAlgorithm: void <init>(net.smert.jreactphysics3d.collision.CollisionDetection)>": 0.2333463599154101
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.DebugDrawJ2D$1: java.awt.Color newColor(float,float,float,float)>": 0.23303580430960724
        }, 
        {
            "<org.jbox2d.common.Mat33: void <init>(float,float,float,float,float,float,float,float,float)>": 0.23061738926224526
        }
    ], 
    "<com.flowpowered.react.constraint.ConstraintSolver: void <init>(java.util.List,java.util.List,gnu.trove.map.TObjectIntMap)>": [
        {
            "<net.smert.jreactphysics3d.engine.ConstraintSolver: void <init>(java.util.List,java.util.List,java.util.Map)>": 0.27624806999485335
        }, 
        {
            "<boofcv.gui.feature.AssociationScorePanel: void setLocation(java.util.List,java.util.List,java.util.List,java.util.List)>": 0.25629771501010334
        }, 
        {
            "<boofcv.gui.SelectAlgorithmAndInputPanel: void setInputList(java.util.List)>": 0.2540063273064989
        }, 
        {
            "<boofcv.gui.feature.CompareTwoImagePanel: void setLocation(java.util.List,java.util.List)>": 0.23533624237379105
        }, 
        {
            "<boofcv.gui.calibration.CalibratedImageGridPanel: void setResults(java.util.List,java.util.List)>": 0.23295029985922444
        }
    ], 
    "<com.flowpowered.react.math.Quaternion: void <init>(com.flowpowered.react.math.Matrix3x3)>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Quaternion: net.smert.jreactphysics3d.mathematics.Quaternion fromMatrix(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": 0.5352415294592453
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 inverse()>": 0.5264499821008781
        }, 
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.5258687278666134
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.524934811322976
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 multiply(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": 0.5240477347682503
        }
    ], 
    "<com.flowpowered.react.math.Vector3: com.flowpowered.react.math.Vector3 negate(com.flowpowered.react.math.Vector3)>": [
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector4 Abs()>": 0.36233867448061796
        }, 
        {
            "<Catalano.Math.Vector3: Catalano.Math.Vector3 Abs()>": 0.35427170381398454
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.DebugDrawJ2D$1: java.lang.Object newColor(float,float,float,float)>": 0.3437903873614626
        }, 
        {
            "<org.jbox2d.common.Mat22: org.jbox2d.common.Mat22 abs()>": 0.33917329788831685
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 abs()>": 0.33714278766388955
        }
    ], 
    "<com.flowpowered.react.math.Vector2: com.flowpowered.react.math.Vector2 divide(com.flowpowered.react.math.Vector2,float)>": [
        {
            "<org.jbox2d.common.Vec2: float normalize()>": 0.3083322558129971
        }, 
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector3 toVector3()>": 0.3058580804170602
        }, 
        {
            "<org.jbox2d.dynamics.contacts.Contact: float mixFriction(float,float)>": 0.3007278705031725
        }, 
        {
            "<org.jbox2d.common.Settings: float mixFriction(float,float)>": 0.3007278705031725
        }, 
        {
            "<org.jbox2d.common.MathUtils: float clamp(float,float,float)>": 0.2983494740586804
        }
    ], 
    "<com.flowpowered.react.collision.shape.CylinderShape: boolean isEqualTo(com.flowpowered.react.collision.shape.CollisionShape)>": [
        {
            "<net.smert.jreactphysics3d.collision.shapes.CylinderShape: boolean isEqualTo(net.smert.jreactphysics3d.collision.shapes.CollisionShape)>": 0.5034313725490196
        }, 
        {
            "<net.smert.jreactphysics3d.collision.shapes.CapsuleShape: boolean isEqualTo(net.smert.jreactphysics3d.collision.shapes.CollisionShape)>": 0.5034313725490196
        }, 
        {
            "<net.smert.jreactphysics3d.collision.shapes.ConeShape: boolean isEqualTo(net.smert.jreactphysics3d.collision.shapes.CollisionShape)>": 0.5034313725490196
        }, 
        {
            "<Catalano.Core.FloatRange: boolean IsOverlapping(Catalano.Core.FloatRange)>": 0.4935671393399216
        }, 
        {
            "<Catalano.Core.FloatRange: boolean isInside(float)>": 0.48314364433359824
        }
    ], 
    "<com.flowpowered.react.collision.narrowphase.GJK.Simplex: void <init>()>": [
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.10923328380418466
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.TestbedMain: void main(java.lang.String[])>": 0.101400970621866
        }, 
        {
            "<org.dyn4j.sandbox.Sandbox: void init(com.jogamp.opengl.GLAutoDrawable)>": 0.1010389230889251
        }, 
        {
            "<boofcv.demonstrations.transform.pyramid.EdgeIntensitiesApp: void main(java.lang.String[])>": 0.09656640647089698
        }, 
        {
            "<boofcv.demonstrations.tracker.CirculantVisualizationPanel: void <init>(boofcv.demonstrations.tracker.CirculantVisualizationPanel$Listener)>": 0.09481546715901483
        }
    ], 
    "<com.flowpowered.react.math.Quaternion: float length()>": [
        {
            "<Catalano.Math.Vector4: float Norm()>": 0.5359343578519999
        }, 
        {
            "<Catalano.Math.Vector3: float Norm()>": 0.5323335658011416
        }, 
        {
            "<Catalano.Math.Vector4: float Normalize()>": 0.5072747647874565
        }, 
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.5053160895783975
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 multiply(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": 0.5052056587680638
        }
    ], 
    "<com.flowpowered.react.math.Matrix3x3: com.flowpowered.react.math.Matrix3x3 multiply(float,com.flowpowered.react.math.Matrix3x3)>": [
        {
            "<boofcv.alg.feature.detect.line.gridline.Edgel: void <init>(float,float,float)>": 0.1490551505581848
        }, 
        {
            "<org.jbox2d.common.MathUtils: float map(float,float,float,float,float)>": 0.14096019152099476
        }, 
        {
            "<Catalano.Math.Matrix3x3: void <init>(float,float,float,float,float,float,float,float,float)>": 0.14047546561061652
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 set(float,float,float,float,float,float,float,float,float)>": 0.14034914351761746
        }, 
        {
            "<net.smert.jreactphysics3d.engine.Profiler: float GetElapsedTimeSinceStart()>": 0.1400270254342746
        }
    ], 
    "<com.flowpowered.react.math.Matrix2x2: com.flowpowered.react.math.Matrix2x2 getInverse()>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 inverse()>": 0.3464905901828317
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 multiply(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": 0.3435244822463875
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Quaternion: net.smert.jreactphysics3d.mathematics.Quaternion fromMatrix(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": 0.3432962711751895
        }, 
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.3416061290186003
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.3410205952928971
        }
    ], 
    "<com.flowpowered.react.engine.DynamicsWorld: void solvePositionCorrection()>": [
        {
            "<Catalano.Imaging.Filters.BlobsFiltering: void applyInPlace(Catalano.Imaging.FastBitmap)>": 0.26143844755935414
        }, 
        {
            "<net.imglib2.img.planar.PlanarImg: void <init>(net.imglib2.img.basictypeaccess.array.ArrayDataAccess,long[],net.imglib2.util.Fraction)>": 0.25843359604680105
        }, 
        {
            "<net.imglib2.img.planar.PlanarImg: void <init>(long[],net.imglib2.util.Fraction)>": 0.2570258734083608
        }, 
        {
            "<Catalano.Imaging.Filters.VerticalRunLengthSmoothing: void applyInPlace(Catalano.Imaging.FastBitmap)>": 0.25697756238049063
        }, 
        {
            "<org.jbox2d.collision.broadphase.DefaultBroadPhaseBuffer: void updatePairs(org.jbox2d.callbacks.PairCallback)>": 0.25654506784925424
        }
    ], 
    "<com.flowpowered.react.constraint.HingeJoint: void setMinAngleLimit(float)>": [
        {
            "<boofcv.factory.background.ConfigBackgroundGaussian: void checkValidity()>": 0.28714537318674566
        }, 
        {
            "<boofcv.factory.background.ConfigBackgroundBasic: void checkValidity()>": 0.2782560345840117
        }, 
        {
            "<boofcv.alg.background.stationary.BackgroundStationaryBasic: void <init>(float,float,boofcv.struct.image.ImageType)>": 0.26751378625806155
        }, 
        {
            "<boofcv.alg.background.moving.BackgroundMovingBasic: void <init>(float,float,boofcv.struct.distort.PointTransformModel_F32,boofcv.struct.image.ImageType)>": 0.2578982059819657
        }, 
        {
            "<net.smert.jreactphysics3d.constraint.HingeJoint: void setMinAngleLimit(float)>": 0.24710901029030485
        }
    ], 
    "<com.flowpowered.react.body.Body: boolean isNotEqualTo(com.flowpowered.react.body.Body)>": [
        {
            "<Catalano.Core.IntRange: boolean IsOverlapping(Catalano.Core.IntRange)>": 0.5725764884716898
        }, 
        {
            "<Catalano.Imaging.Texture.BinaryPattern.UniformLocalBinaryPattern: boolean isUniform(int)>": 0.5646786348748001
        }, 
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: boolean isFull()>": 0.5639875819199924
        }, 
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: boolean isEmpty()>": 0.5639875819199924
        }, 
        {
            "<Catalano.Core.Structs.DoubleArrayList: boolean isEmpty()>": 0.5639875819199924
        }
    ], 
    "<com.flowpowered.react.collision.shape.SphereShape: com.flowpowered.react.math.Vector3 getLocalSupportPointWithMargin(com.flowpowered.react.math.Vector3)>": [
        {
            "<Catalano.Math.Vector3: float getMin()>": 0.15562653593469142
        }, 
        {
            "<Catalano.Math.Vector3: float getMax()>": 0.15562653593469142
        }, 
        {
            "<boofcv.alg.distort.DistortImageOps: void updateBoundBox(boofcv.struct.distort.PixelTransform_F32,boofcv.struct.ImageRectangle_F32)>": 0.1535367849303554
        }, 
        {
            "<Catalano.Math.Vector4: boolean equals(java.lang.Object)>": 0.14909321488307276
        }, 
        {
            "<boofcv.alg.weights.WeightDistanceUniform_F32: float weight(float)>": 0.14770135809086501
        }
    ], 
    "<com.flowpowered.react.constraint.ContactPoint$ContactPointInfo: void setNormal(com.flowpowered.react.math.Vector3)>": [
        {
            "<Catalano.Imaging.Filters.GaussianBlur: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Concurrent.Filters.BradleyLocalThreshold: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.CosineTransform: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.BradleyLocalThreshold: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.UnsharpMasking: void <init>()>": 0.018184824186332698
        }
    ], 
    "<com.flowpowered.react.collision.broadphase.SweepAndPruneAlgorithm$BoxAABB: void setMin(int,int)>": [
        {
            "<net.imglib2.img.basictypeaccess.array.IntArray: void setValue(int,int)>": 0.6761363636363636
        }, 
        {
            "<boofcv.struct.image.GrayS32: void unsafe_set(int,int,int)>": 0.5132158016095391
        }, 
        {
            "<net.imglib2.img.list.ListRandomAccess: void bck(int)>": 0.4747446304758694
        }, 
        {
            "<net.imglib2.img.list.ListRandomAccess: void fwd(int)>": 0.4747446304758694
        }, 
        {
            "<net.imglib2.img.list.ListRandomAccess: void move(int,int)>": 0.4737634255217416
        }
    ], 
    "<com.flowpowered.react.collision.narrowphase.GJK.GJKAlgorithm: boolean testCollision(com.flowpowered.react.collision.shape.CollisionShape,com.flowpowered.react.math.Transform,com.flowpowered.react.collision.shape.CollisionShape,com.flowpowered.react.math.Transform,com.flowpowered.react.constraint.ContactPoint$ContactPointInfo)>": [
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.EPA.TriangleEPA: boolean isClosestPointInternalToTriangle()>": 0.1667739818463857
        }, 
        {
            "<Catalano.Math.Geometry.Line: void <init>(float,float,boolean)>": 0.16419620219018954
        }, 
        {
            "<org.jbox2d.common.MathUtils: float abs(float)>": 0.16374072777890256
        }, 
        {
            "<org.jbox2d.common.MathUtils: float sin(float)>": 0.15921476218211053
        }, 
        {
            "<Catalano.Math.Geometry.Line: float GetAngleBetweenLines(Catalano.Math.Geometry.Line)>": 0.15707793302965795
        }
    ], 
    "<com.flowpowered.react.math.Vector4: float get(int)>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 abs()>": 0.3814699137910514
        }, 
        {
            "<boofcv.alg.feature.detect.intensity.impl.ImplFastHelper_F32: void setThresholds(int)>": 0.38088862135303864
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 abs()>": 0.37946283443085005
        }, 
        {
            "<org.jbox2d.common.Vec2: void absLocal()>": 0.37753168038825685
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: net.smert.jreactphysics3d.mathematics.Vector3 abs()>": 0.37724000283449266
        }
    ], 
    "<com.flowpowered.react.engine.OverlappingPair: void addContact(com.flowpowered.react.constraint.ContactPoint)>": [
        {
            "<org.dyn4j.sandbox.panels.LineGraphPanel: void setStaticSize(java.awt.Dimension)>": 0.0778498944161523
        }, 
        {
            "<org.jbox2d.testbed.tests.DrawingParticles: void step(org.jbox2d.testbed.framework.TestbedSettings)>": 0.07537783614444092
        }, 
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.0747080202248614
        }, 
        {
            "<boofcv.gui.feature.SelectRegionDescriptionPanel: void <init>()>": 0.07391404949863532
        }, 
        {
            "<boofcv.gui.d3.Polygon3DSequenceViewer: void <init>()>": 0.07317117587562046
        }
    ], 
    "<com.flowpowered.react.engine.DynamicsWorld: void computeIslands()>": [
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void computeIslands()>": 0.4184288579122466
        }, 
        {
            "<net.imglib2.KDTree: boolean verifyDimensions(java.util.List,int)>": 0.36031677027009906
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void update()>": 0.35391847658450504
        }, 
        {
            "<boofcv.gui.binary.VisualizeBinaryData: java.awt.image.BufferedImage renderContours(java.util.List,int[],int,int,int,java.awt.image.BufferedImage)>": 0.35228148438287565
        }, 
        {
            "<Catalano.Imaging.Tools.ShapeDescriptors: java.util.List UltimateErodedPoints(Catalano.Imaging.FastBitmap)>": 0.3458622855864553
        }
    ], 
    "<com.flowpowered.react.math.Vector2: void set(int,float)>": [
        {
            "<boofcv.core.image.border.ImageBorderValue$Value_F32: void setOutside(int,int,float)>": 0.42198032354379267
        }, 
        {
            "<boofcv.alg.weights.WeightPixelUniform_F32: float weight(int,int)>": 0.4133154489548237
        }, 
        {
            "<boofcv.core.image.border.ImageBorderValue$Value_F32: float getOutside(int,int)>": 0.4133154489548237
        }, 
        {
            "<Catalano.Imaging.Tools.GradientImage: float getOrientation(int,int)>": 0.3788423123700931
        }, 
        {
            "<Catalano.Imaging.Tools.GradientImage: float getMagnitude(int,int)>": 0.3788423123700931
        }
    ], 
    "<com.flowpowered.react.math.Vector2: void setAllValues(float,float)>": [
        {
            "<org.jbox2d.common.MathUtils: float clamp(float,float,float)>": 0.4946947012742363
        }, 
        {
            "<org.jbox2d.dynamics.contacts.Contact: float mixFriction(float,float)>": 0.4914246713666467
        }, 
        {
            "<org.jbox2d.common.Settings: float mixFriction(float,float)>": 0.4914246713666467
        }, 
        {
            "<net.smert.jreactphysics3d.engine.Profiler: float GetElapsedTimeSinceStart()>": 0.47970529599903344
        }, 
        {
            "<boofcv.alg.color.ColorRgb: float rgbToGray_Weighted(float,float,float)>": 0.47720562817318873
        }
    ], 
    "<com.flowpowered.react.collision.shape.ConvexMeshShape: com.flowpowered.react.math.Vector3 getLocalSupportPointWithoutMargin(com.flowpowered.react.math.Vector3)>": [
        {
            "<net.smert.jreactphysics3d.collision.shapes.ConvexMeshShape: net.smert.jreactphysics3d.mathematics.Vector3 getLocalSupportPointWithoutMargin(net.smert.jreactphysics3d.mathematics.Vector3,net.smert.jreactphysics3d.mathematics.Vector3)>": 0.3391925748139396
        }, 
        {
            "<boofcv.io.SimpleStringNumberReader: boolean next()>": 0.33144395744502214
        }, 
        {
            "<Catalano.Core.Structs.BinaryHeap: void downHeap(int,java.lang.Comparable)>": 0.32021818205356445
        }, 
        {
            "<net.imglib2.histogram.HistogramNd: boolean isInLowerTail(java.util.List)>": 0.3150383135997486
        }, 
        {
            "<net.imglib2.histogram.HistogramNd: boolean isOutside(java.util.List)>": 0.31410709122029606
        }
    ], 
    "<com.flowpowered.react.math.Quaternion: boolean equals(java.lang.Object)>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: boolean equals(java.lang.Object)>": 0.6790855393731939
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: boolean equals(java.lang.Object)>": 0.6638889121434985
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Quaternion: boolean equals(java.lang.Object)>": 0.6638889121434985
        }, 
        {
            "<org.jbox2d.testbed.pooling.ColorKey: boolean equals(java.lang.Object)>": 0.659858512674291
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: boolean equals(java.lang.Object)>": 0.6492250985731455
        }
    ], 
    "<com.flowpowered.react.collision.narrowphase.EPA.TrianglesStore: com.flowpowered.react.collision.narrowphase.EPA.TriangleEPA newTriangle(com.flowpowered.react.math.Vector3[],int,int,int)>": [
        {
            "<boofcv.alg.feature.disparity.DisparityScoreWindowFive: void <init>(int,int,int,int)>": 0.4588774595366365
        }, 
        {
            "<boofcv.alg.feature.disparity.DisparityScoreSadRect: void <init>(int,int,int,int)>": 0.4588774595366365
        }, 
        {
            "<boofcv.struct.ImageRectangle: void <init>(int,int,int,int)>": 0.45280875182639635
        }, 
        {
            "<boofcv.struct.image.InterleavedS16: void <init>(int,int,int)>": 0.4490239392334839
        }, 
        {
            "<boofcv.struct.image.InterleavedS8: void <init>(int,int,int)>": 0.4490239392334839
        }
    ], 
    "<com.flowpowered.react.engine.Material$UnmodifiableMaterial: void setFrictionCoefficient(float)>": [
        {
            "<net.imglib2.type.numeric.integer.UnsignedVariableBitLengthType: void setComplexNumber(float,float)>": 0.28847085860235794
        }, 
        {
            "<net.imglib2.type.numeric.integer.AbstractIntegerBitType: void setComplexNumber(float,float)>": 0.28847085860235794
        }, 
        {
            "<net.imglib2.img.basictypeaccess.array.FloatArray: float getValue(int)>": 0.28393959372630745
        }, 
        {
            "<boofcv.struct.convolve.Kernel1D_F32: float get(int)>": 0.28393959372630745
        }, 
        {
            "<Catalano.Imaging.Concurrent.Filters.BradleyLocalThreshold: void <init>(int,float)>": 0.28028639035247704
        }
    ], 
    "<com.flowpowered.react.math.Vector4: float length()>": [
        {
            "<Catalano.Math.Vector4: float Norm()>": 0.5359343578519999
        }, 
        {
            "<Catalano.Math.Vector3: float Norm()>": 0.5323335658011416
        }, 
        {
            "<Catalano.Math.Vector4: float Normalize()>": 0.5072747647874565
        }, 
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.5053160895783975
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 multiply(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": 0.5052056587680638
        }
    ], 
    "<com.flowpowered.react.collision.narrowphase.EPA.EPAAlgorithm: int addFaceCandidate(com.flowpowered.react.collision.narrowphase.EPA.TriangleEPA,java.util.Queue,int,float)>": [
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.EPA.EPAAlgorithm: void addFaceCandidate(net.smert.jreactphysics3d.collision.narrowphase.EPA.TriangleEPA,java.util.Queue,int[],float)>": 0.4276515775737878
        }, 
        {
            "<boofcv.alg.filter.kernel.KernelMath: boolean isEquals(float[],float[],int,float)>": 0.34840271440076764
        }, 
        {
            "<boofcv.alg.feature.detect.interest.FeaturePyramid: boolean checkMax(boofcv.core.image.border.ImageBorder_F32,float,int,int)>": 0.3482623400576821
        }, 
        {
            "<boofcv.alg.filter.kernel.KernelMath: float minAbs(float[],int,float)>": 0.3426914443260383
        }, 
        {
            "<boofcv.alg.weights.WeightDistanceUniform_F32: float weight(float)>": 0.3356415482875469
        }
    ], 
    "<com.flowpowered.react.body.CollisionBody: void updateOldTransform()>": [
        {
            "<Catalano.Imaging.Filters.GaussianBlur: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Concurrent.Filters.BradleyLocalThreshold: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.CosineTransform: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.BradleyLocalThreshold: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.UnsharpMasking: void <init>()>": 0.018184824186332698
        }
    ], 
    "<com.flowpowered.react.collision.narrowphase.EPA.EPAAlgorithm: boolean computePenetrationDepthAndContactPoints(com.flowpowered.react.collision.narrowphase.GJK.Simplex,com.flowpowered.react.collision.shape.CollisionShape,com.flowpowered.react.math.Transform,com.flowpowered.react.collision.shape.CollisionShape,com.flowpowered.react.math.Transform,com.flowpowered.react.math.Vector3,com.flowpowered.react.constraint.ContactPoint$ContactPointInfo)>": [
        {
            "<boofcv.alg.background.moving.BackgroundMovingGaussian_SB: void _segment(georegression.struct.InvertibleTransform,boofcv.struct.image.ImageGray,boofcv.struct.image.GrayU8)>": 0.12468510992890801
        }, 
        {
            "<boofcv.alg.background.moving.BackgroundMovingGaussian_SB: void _segment(georegression.struct.InvertibleTransform,boofcv.struct.image.ImageBase,boofcv.struct.image.GrayU8)>": 0.1238195387612126
        }, 
        {
            "<boofcv.alg.tracker.klt.KltTracker: boofcv.alg.tracker.klt.KltTrackFault track(boofcv.alg.tracker.klt.KltFeature)>": 0.1222371168179067
        }, 
        {
            "<boofcv.alg.background.moving.BackgroundMovingGaussian_PL: void _segment(georegression.struct.InvertibleTransform,boofcv.struct.image.Planar,boofcv.struct.image.GrayU8)>": 0.12206614986246467
        }, 
        {
            "<boofcv.alg.background.moving.BackgroundMovingBasic_SB: void _segment(georegression.struct.InvertibleTransform,boofcv.struct.image.ImageGray,boofcv.struct.image.GrayU8)>": 0.12200352339084414
        }
    ], 
    "<com.flowpowered.react.collision.narrowphase.GJK.Simplex: boolean isValidSubset(int)>": [
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: boolean isValidSubset(int)>": 0.4979856272846525
        }, 
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: boolean isProperSubset(int)>": 0.4346082930755346
        }, 
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: boolean computeClosestPoint(net.smert.jreactphysics3d.mathematics.Vector3)>": 0.42863520979795516
        }, 
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: boolean isAffinelyDependent()>": 0.36198525783977215
        }, 
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: void addPoint(net.smert.jreactphysics3d.mathematics.Vector3,net.smert.jreactphysics3d.mathematics.Vector3,net.smert.jreactphysics3d.mathematics.Vector3)>": 0.35446985149851756
        }
    ], 
    "<com.flowpowered.react.math.Matrix4x4: boolean equals(java.lang.Object)>": [
        {
            "<org.dyn4j.sandbox.utilities.RenderUtilities: void drawJoint(com.jogamp.opengl.GL2,org.dyn4j.dynamics.joint.Joint,double)>": 0.3014091411625745
        }, 
        {
            "<net.imglib2.img.ImgView: boolean supportsOptimizedCursor(net.imglib2.Interval)>": 0.29353607108458485
        }, 
        {
            "<boofcv.abst.sfm.d3.WrapVisOdomDualTrackPnP: boolean isFault()>": 0.286818420922638
        }, 
        {
            "<org.dyn4j.sandbox.utilities.RenderUtilities: void drawShape(com.jogamp.opengl.GL2,org.dyn4j.geometry.Shape,boolean)>": 0.26491584913468075
        }, 
        {
            "<org.dyn4j.sandbox.utilities.RenderUtilities: void fillShape(com.jogamp.opengl.GL2,org.dyn4j.geometry.Shape)>": 0.2645981390263522
        }
    ], 
    "<com.flowpowered.react.engine.linked.LinkedDynamicsWorld: void <init>(com.flowpowered.react.math.Vector3,com.flowpowered.react.engine.linked.LinkedWorldInfo)>": [
        {
            "<net.smert.jreactphysics3d.collision.broadphase.NoBroadPhaseAlgorithm: void <init>(net.smert.jreactphysics3d.collision.CollisionDetection)>": 0.2520428752548545
        }, 
        {
            "<net.smert.jreactphysics3d.collision.CollisionDetection: void <init>(net.smert.jreactphysics3d.engine.CollisionWorld)>": 0.16636503888345006
        }, 
        {
            "<net.smert.jreactphysics3d.engine.CollisionWorld: void <init>()>": 0.16616078619299146
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void <init>(net.smert.jreactphysics3d.mathematics.Vector3,float)>": 0.1546104257496687
        }, 
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.10115513757351567
        }
    ], 
    "<com.flowpowered.react.engine.DynamicsWorld: void addContactManifoldToBody(com.flowpowered.react.engine.ContactManifold,com.flowpowered.react.body.CollisionBody,com.flowpowered.react.body.CollisionBody)>": [
        {
            "<boofcv.demonstrations.tracker.VideoTrackerObjectQuadApp: void process(boofcv.io.image.SimpleImageSequence)>": 0.11491978817455034
        }, 
        {
            "<boofcv.demonstrations.fiducial.FiducialTrackerApp: void process(boofcv.io.image.SimpleImageSequence)>": 0.11328764817527683
        }, 
        {
            "<Catalano.Statistics.Distributions.BinomialDistribution: void <init>(int,double)>": 0.1103008528210477
        }, 
        {
            "<boofcv.factory.background.ConfigBackgroundGaussian: void checkValidity()>": 0.10983994930801323
        }, 
        {
            "<boofcv.factory.feature.detect.intensity.FactoryIntensityPointAlg: boofcv.alg.feature.detect.intensity.FastCornerIntensity fast(int,int,java.lang.Class)>": 0.10910725595960294
        }
    ], 
    "<com.flowpowered.react.collision.narrowphase.GJK.Simplex: void computeDeterminants()>": [
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: void computeDeterminants()>": 0.6109305773324938
        }, 
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: void addPoint(net.smert.jreactphysics3d.mathematics.Vector3,net.smert.jreactphysics3d.mathematics.Vector3,net.smert.jreactphysics3d.mathematics.Vector3)>": 0.5799451202989994
        }, 
        {
            "<Catalano.Imaging.Filters.ImagePyramids: void Downscale(Catalano.Imaging.FastBitmap)>": 0.3984652451248165
        }, 
        {
            "<Catalano.Math.Matrix: float[] MinMax(float[][])>": 0.3820075497327675
        }, 
        {
            "<Catalano.Imaging.Filters.ImagePyramids: float[][][] ConvolutionRGB(Catalano.Imaging.FastBitmap,float[][])>": 0.38159500133214014
        }
    ], 
    "<com.flowpowered.react.math.Transform: com.flowpowered.react.math.Transform multiply(com.flowpowered.react.math.Transform,com.flowpowered.react.math.Transform)>": [
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.018366562299117647
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.TestbedMain: void main(java.lang.String[])>": 0.017001728362717624
        }, 
        {
            "<org.dyn4j.sandbox.Sandbox: void init(com.jogamp.opengl.GLAutoDrawable)>": 0.01681295702228136
        }, 
        {
            "<boofcv.demonstrations.transform.pyramid.EdgeIntensitiesApp: void main(java.lang.String[])>": 0.016241881088676316
        }, 
        {
            "<boofcv.demonstrations.tracker.CirculantVisualizationPanel: void <init>(boofcv.demonstrations.tracker.CirculantVisualizationPanel$Listener)>": 0.015850927816513382
        }
    ], 
    "<com.flowpowered.react.math.Matrix3x3: com.flowpowered.react.math.Matrix3x3 multiply(com.flowpowered.react.math.Matrix3x3,com.flowpowered.react.math.Matrix3x3)>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 inverse()>": 0.5302580640694432
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 multiply(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": 0.527763094234771
        }, 
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.5270193565563904
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.5260969506660593
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Quaternion: net.smert.jreactphysics3d.mathematics.Quaternion fromMatrix(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": 0.5209247265147371
        }
    ], 
    "<com.flowpowered.react.collision.shape.ConeShape: boolean isEqualTo(com.flowpowered.react.collision.shape.CollisionShape)>": [
        {
            "<net.smert.jreactphysics3d.collision.shapes.CylinderShape: boolean isEqualTo(net.smert.jreactphysics3d.collision.shapes.CollisionShape)>": 0.5034313725490196
        }, 
        {
            "<net.smert.jreactphysics3d.collision.shapes.CapsuleShape: boolean isEqualTo(net.smert.jreactphysics3d.collision.shapes.CollisionShape)>": 0.5034313725490196
        }, 
        {
            "<net.smert.jreactphysics3d.collision.shapes.ConeShape: boolean isEqualTo(net.smert.jreactphysics3d.collision.shapes.CollisionShape)>": 0.5034313725490196
        }, 
        {
            "<Catalano.Core.FloatRange: boolean IsOverlapping(Catalano.Core.FloatRange)>": 0.4935671393399216
        }, 
        {
            "<Catalano.Core.FloatRange: boolean isInside(float)>": 0.48314364433359824
        }
    ], 
    "<com.flowpowered.react.constraint.SliderJoint: void <init>(com.flowpowered.react.constraint.SliderJoint$SliderJointInfo)>": [
        {
            "<boofcv.factory.background.ConfigBackgroundGaussian: void checkValidity()>": 0.1455403645258292
        }, 
        {
            "<boofcv.factory.background.ConfigBackgroundBasic: void checkValidity()>": 0.1350581626116019
        }, 
        {
            "<boofcv.alg.background.stationary.BackgroundStationaryBasic: void <init>(float,float,boofcv.struct.image.ImageType)>": 0.1200609594179083
        }, 
        {
            "<boofcv.alg.background.stationary.BackgroundStationaryGaussian: void <init>(float,float,boofcv.struct.image.ImageType)>": 0.11944720347387038
        }, 
        {
            "<Catalano.Imaging.Filters.SaturationCorrection: void <init>(float)>": 0.11892884001846674
        }
    ], 
    "<com.flowpowered.react.engine.Material$UnmodifiableMaterial: void setBounciness(float)>": [
        {
            "<net.imglib2.type.numeric.integer.UnsignedVariableBitLengthType: void setComplexNumber(float,float)>": 0.28847085860235794
        }, 
        {
            "<net.imglib2.type.numeric.integer.AbstractIntegerBitType: void setComplexNumber(float,float)>": 0.28847085860235794
        }, 
        {
            "<net.imglib2.img.basictypeaccess.array.FloatArray: float getValue(int)>": 0.28393959372630745
        }, 
        {
            "<boofcv.struct.convolve.Kernel1D_F32: float get(int)>": 0.28393959372630745
        }, 
        {
            "<Catalano.Imaging.Concurrent.Filters.BradleyLocalThreshold: void <init>(int,float)>": 0.28028639035247704
        }
    ], 
    "<com.flowpowered.react.math.Matrix2x2: com.flowpowered.react.math.Matrix2x2 negate(com.flowpowered.react.math.Matrix2x2)>": [
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector4 Abs()>": 0.39375679538081043
        }, 
        {
            "<Catalano.Math.Vector3: Catalano.Math.Vector3 Abs()>": 0.38486832212496436
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.DebugDrawJ2D$1: java.lang.Object newColor(float,float,float,float)>": 0.37281962875805996
        }, 
        {
            "<org.jbox2d.common.Mat22: org.jbox2d.common.Mat22 abs()>": 0.36889215713595325
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 abs()>": 0.36498563708400955
        }
    ], 
    "<com.flowpowered.react.constraint.Joint$JointType: com.flowpowered.react.constraint.Joint$JointType valueOf(java.lang.String)>": [
        {
            "<net.smert.jreactphysics3d.collision.shapes.CollisionShapeType: net.smert.jreactphysics3d.collision.shapes.CollisionShapeType valueOf(java.lang.String)>": 0.260989010989011
        }, 
        {
            "<net.smert.jreactphysics3d.configuration.ContactsPositionCorrectionTechnique: net.smert.jreactphysics3d.configuration.ContactsPositionCorrectionTechnique valueOf(java.lang.String)>": 0.260989010989011
        }, 
        {
            "<net.smert.jreactphysics3d.configuration.JointsPositionCorrectionTechnique: net.smert.jreactphysics3d.configuration.JointsPositionCorrectionTechnique valueOf(java.lang.String)>": 0.260989010989011
        }, 
        {
            "<net.smert.jreactphysics3d.constraint.JointType: net.smert.jreactphysics3d.constraint.JointType valueOf(java.lang.String)>": 0.260989010989011
        }, 
        {
            "<Catalano.Statistics.Analysis.PrincipalComponentAnalysis$AnalysisMethod: Catalano.Statistics.Analysis.PrincipalComponentAnalysis$AnalysisMethod valueOf(java.lang.String)>": 0.260989010989011
        }
    ], 
    "<com.flowpowered.react.math.Matrix2x2: com.flowpowered.react.math.Matrix2x2 multiply(float)>": [
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector3 toVector3()>": 0.2756007167537067
        }, 
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector4 Subtract(Catalano.Math.Vector4,float)>": 0.2755677857266224
        }, 
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector4 Add(Catalano.Math.Vector4,float)>": 0.2755677857266224
        }, 
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector4 Divide(Catalano.Math.Vector4,float)>": 0.2755677857266224
        }, 
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector4 Multiply(Catalano.Math.Vector4,float)>": 0.2755677857266224
        }
    ], 
    "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 getInverse()>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 inverse()>": 0.37698757849856274
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 multiply(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": 0.374980851506295
        }, 
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.3711732477083304
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.37052058254510006
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 multiply(net.smert.jreactphysics3d.mathematics.Matrix2x2)>": 0.3702123214000323
        }
    ], 
    "<com.flowpowered.react.engine.ContactSolver: void computeFrictionVectors(com.flowpowered.react.math.Vector3,com.flowpowered.react.engine.ContactSolver$ContactPointSolver)>": [
        {
            "<boofcv.factory.background.ConfigBackgroundGaussian: void checkValidity()>": 0.07939724142980051
        }, 
        {
            "<boofcv.factory.background.ConfigBackgroundBasic: void checkValidity()>": 0.07496679850518696
        }, 
        {
            "<boofcv.alg.background.stationary.BackgroundStationaryBasic: void <init>(float,float,boofcv.struct.image.ImageType)>": 0.06674214607648715
        }, 
        {
            "<boofcv.alg.background.moving.BackgroundMovingBasic: void <init>(float,float,boofcv.struct.distort.PointTransformModel_F32,boofcv.struct.image.ImageType)>": 0.06426441952702037
        }, 
        {
            "<org.jbox2d.common.MathUtils: float fastAbs(float)>": 0.06248020308162325
        }
    ], 
    "<com.flowpowered.react.collision.narrowphase.EPA.EdgeEPA: int indexOfNextCounterClockwiseEdge(int)>": [
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.EPA.EdgeEPA: int indexOfNextCounterClockwiseEdge(int)>": 0.9026631481046514
        }, 
        {
            "<Catalano.Math.Tools: int Pow2(int)>": 0.5621693121693121
        }, 
        {
            "<Catalano.Imaging.Filters.GaussianBlur: void setSize(int)>": 0.5477244148949844
        }, 
        {
            "<Catalano.Math.Tools: int PreviousPowerOf2(int)>": 0.5393062954720688
        }, 
        {
            "<Catalano.Statistics.Kernels.Polynomial: void setDegree(int)>": 0.5194369115453366
        }
    ], 
    "<com.flowpowered.react.math.Vector2: com.flowpowered.react.math.Vector2 divide(float)>": [
        {
            "<org.jbox2d.common.Vec2: float normalize()>": 0.3995785659835583
        }, 
        {
            "<boofcv.alg.interpolate.kernel.BicubicKernel_F32: float compute(float)>": 0.37686553313537235
        }, 
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.37367669221720096
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.37295336417366703
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 inverse()>": 0.3723019171676189
        }
    ], 
    "<com.flowpowered.react.math.Matrix3x3: com.flowpowered.react.math.Matrix3x3 multiply(float)>": [
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector3 toVector3()>": 0.2761830149680976
        }, 
        {
            "<net.imglib2.type.numeric.complex.AbstractComplexType: void mul(float)>": 0.264198375171725
        }, 
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector4 Subtract(Catalano.Math.Vector4,Catalano.Math.Vector4)>": 0.2638906473555155
        }, 
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector4 Multiply(Catalano.Math.Vector4,Catalano.Math.Vector4)>": 0.2638906473555155
        }, 
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector4 Divide(Catalano.Math.Vector4,Catalano.Math.Vector4)>": 0.2638906473555155
        }
    ], 
    "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 getTranspose()>": [
        {
            "<org.jbox2d.testbed.framework.j2d.DebugDrawJ2D$1: java.awt.Color newColor(float,float,float,float)>": 0.2748840990279533
        }, 
        {
            "<org.jbox2d.callbacks.DebugDraw: void setCamera(float,float,float)>": 0.27160617955816635
        }, 
        {
            "<org.jbox2d.testbed.framework.TestbedCamera: void setCamera(org.jbox2d.common.Vec2,float)>": 0.26755071346376347
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.DebugDrawJ2D$1: java.lang.Object newColor(float,float,float,float)>": 0.2649032877764994
        }, 
        {
            "<org.jbox2d.common.Mat33: void <init>(float,float,float,float,float,float,float,float,float)>": 0.26451230571481954
        }
    ], 
    "<com.flowpowered.react.collision.broadphase.SweepAndPruneAlgorithm$EndPoint: java.lang.String toString()>": [
        {
            "<org.jbox2d.common.Vec2: java.lang.String toString()>": 0.5605243298509539
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Transform: java.lang.String toString()>": 0.521335664000526
        }, 
        {
            "<org.jbox2d.common.Vec3: java.lang.String toString()>": 0.5159302630360673
        }, 
        {
            "<net.imglib2.type.numeric.complex.AbstractComplexType: java.lang.String toString()>": 0.5012867777173854
        }, 
        {
            "<net.imglib2.util.Util: java.lang.String printCoordinates(long[])>": 0.5001223169384454
        }
    ], 
    "<com.flowpowered.react.math.Vector2: java.lang.String toString()>": [
        {
            "<org.jbox2d.common.Vec2: java.lang.String toString()>": 0.6997969689466702
        }, 
        {
            "<org.jbox2d.common.Vec3: java.lang.String toString()>": 0.6473409227624575
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector2: java.lang.String toString()>": 0.6027582880941911
        }, 
        {
            "<org.jbox2d.common.Rot: java.lang.String toString()>": 0.6027582880941911
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: java.lang.String toString()>": 0.5815679785196011
        }
    ], 
    "<com.flowpowered.react.body.Body: boolean isEqualTo(com.flowpowered.react.body.Body)>": [
        {
            "<Catalano.Core.IntRange: boolean IsOverlapping(Catalano.Core.IntRange)>": 0.5725764884716898
        }, 
        {
            "<Catalano.Imaging.Texture.BinaryPattern.UniformLocalBinaryPattern: boolean isUniform(int)>": 0.5646786348748001
        }, 
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: boolean isFull()>": 0.5639875819199924
        }, 
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: boolean isEmpty()>": 0.5639875819199924
        }, 
        {
            "<Catalano.Core.Structs.DoubleArrayList: boolean isEmpty()>": 0.5639875819199924
        }
    ], 
    "<com.flowpowered.react.engine.DynamicsWorld: com.flowpowered.react.body.RigidBody createRigidBody(com.flowpowered.react.math.Transform,float,com.flowpowered.react.math.Matrix3x3,com.flowpowered.react.collision.shape.CollisionShape)>": [
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: net.smert.jreactphysics3d.body.RigidBody createRigidBody(net.smert.jreactphysics3d.mathematics.Transform,float,net.smert.jreactphysics3d.mathematics.Matrix3x3,net.smert.jreactphysics3d.collision.shapes.CollisionShape)>": 0.18562533063539863
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void updateRigidBodiesAABB()>": 0.15088413977453108
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void setIsSleepingEnabled(boolean)>": 0.15077037948220107
        }, 
        {
            "<boofcv.abst.feature.detect.interest.ConfigGeneralDetector: void <init>(int,int,float,int,boolean,boolean,boolean)>": 0.14331342179994394
        }, 
        {
            "<net.smert.jreactphysics3d.collision.broadphase.NoBroadPhaseAlgorithm: void addObject(net.smert.jreactphysics3d.body.CollisionBody,net.smert.jreactphysics3d.collision.shapes.AABB)>": 0.1402122957740842
        }
    ], 
    "<com.flowpowered.react.engine.DynamicsWorld: void setInterpolationFactorToAllBodies()>": [
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void setInterpolationFactorToAllBodies()>": 0.41738524883797706
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void resetContactManifoldListsOfBodies()>": 0.34066726564044597
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void updateRigidBodiesAABB()>": 0.32147612492930716
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void resetBodiesMovementVariable()>": 0.30854429996199784
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void setIsSleepingEnabled(boolean)>": 0.29927989163391167
        }
    ], 
    "<com.flowpowered.react.engine.Material: void <init>(float,float)>": [
        {
            "<org.jbox2d.common.MathUtils: float clamp(float,float,float)>": 0.4830315437507236
        }, 
        {
            "<org.jbox2d.dynamics.contacts.Contact: float mixFriction(float,float)>": 0.4798723947265777
        }, 
        {
            "<org.jbox2d.common.Settings: float mixFriction(float,float)>": 0.4798723947265777
        }, 
        {
            "<net.smert.jreactphysics3d.engine.Profiler: float GetElapsedTimeSinceStart()>": 0.46849903376312363
        }, 
        {
            "<boofcv.alg.color.ColorRgb: float rgbToGray_Weighted(float,float,float)>": 0.4660830714435651
        }
    ], 
    "<com.flowpowered.react.engine.OverlappingPair: void setCachedSeparatingAxis(com.flowpowered.react.math.Vector3)>": [
        {
            "<Catalano.Imaging.Filters.GaussianBlur: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Concurrent.Filters.BradleyLocalThreshold: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.CosineTransform: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.BradleyLocalThreshold: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.UnsharpMasking: void <init>()>": 0.018184824186332698
        }
    ], 
    "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Vector4 get(int)>": [
        {
            "<boofcv.core.image.border.ImageBorderValue$Value_I: void setOutside(int,int,int)>": 0.4966616068166122
        }, 
        {
            "<org.dyn4j.examples.ExampleJOGL: void reshape(com.jogamp.opengl.GLAutoDrawable,int,int,int,int)>": 0.4893146606557609
        }, 
        {
            "<net.coobird.thumbnailator.geometry.Positions$1: java.awt.Point calculate(int,int,int,int,int,int,int,int)>": 0.47437111780712504
        }, 
        {
            "<Catalano.Imaging.Tools.IntegralImage: int getInternalData(int,int)>": 0.46420451256364215
        }, 
        {
            "<net.coobird.thumbnailator.geometry.Coordinate: java.awt.Point calculate(int,int,int,int,int,int,int,int)>": 0.4578204272586427
        }
    ], 
    "<com.flowpowered.react.engine.ContactManifold: int getIndexToRemove(int,com.flowpowered.react.math.Vector3)>": [
        {
            "<net.smert.jreactphysics3d.engine.ContactManifold: int getMaxArea(float,float,float,float)>": 0.16300697763388186
        }, 
        {
            "<boofcv.alg.filter.kernel.KernelMath: float minAbs(float[],int,float)>": 0.12627823364651553
        }, 
        {
            "<boofcv.alg.feature.disparity.impl.ImplSelectSparseStandardWta_F32: boolean select(float[],int)>": 0.12436003740521759
        }, 
        {
            "<boofcv.alg.filter.kernel.KernelMath: float maxAbs(float[],int)>": 0.12029493674018628
        }, 
        {
            "<boofcv.alg.color.ColorHsv: void rgbToHsv(float,float,float,float[])>": 0.11553463066630654
        }
    ], 
    "<com.flowpowered.react.math.Transform: void <init>(com.flowpowered.react.math.Vector3,com.flowpowered.react.math.Matrix3x3)>": [
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.08012680874230721
        }, 
        {
            "<org.dyn4j.sandbox.Sandbox: void init(com.jogamp.opengl.GLAutoDrawable)>": 0.07449505676020156
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.TestbedMain: void main(java.lang.String[])>": 0.0741725214888788
        }, 
        {
            "<boofcv.demonstrations.transform.pyramid.EdgeIntensitiesApp: void main(java.lang.String[])>": 0.07085757685150393
        }, 
        {
            "<boofcv.demonstrations.tracker.CirculantVisualizationPanel: void <init>(boofcv.demonstrations.tracker.CirculantVisualizationPanel$Listener)>": 0.07016892711230756
        }
    ], 
    "<com.flowpowered.react.engine.ContactSolver: void applySplitImpulse(com.flowpowered.react.engine.Impulse,com.flowpowered.react.engine.ContactSolver$ContactManifoldSolver)>": [
        {
            "<org.dyn4j.collision.manifold.IndexedManifoldPointId: boolean equals(java.lang.Object)>": 0.13846824222227905
        }, 
        {
            "<Catalano.Imaging.Filters.VerticalRunLengthSmoothing: void applyInPlace(Catalano.Imaging.FastBitmap)>": 0.13829737966301184
        }, 
        {
            "<Catalano.Imaging.Filters.HorizontalRunLengthSmoothing: void applyInPlace(Catalano.Imaging.FastBitmap)>": 0.13829737966301184
        }, 
        {
            "<boofcv.struct.image.ImageBase: boolean isInBounds(int,int)>": 0.1378388937138985
        }, 
        {
            "<boofcv.struct.flow.ImageFlow: boolean isInBounds(int,int)>": 0.1378388937138985
        }
    ], 
    "<com.flowpowered.react.math.Vector4: com.flowpowered.react.math.Vector4 add(com.flowpowered.react.math.Vector4)>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 inverse()>": 0.448620986834405
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 multiply(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": 0.44733755433211364
        }, 
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.4443798466205574
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.4434344929545489
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 multiply(net.smert.jreactphysics3d.mathematics.Matrix2x2)>": 0.4433010632369433
        }
    ], 
    "<com.flowpowered.react.collision.narrowphase.GJK.GJKAlgorithm: boolean computePenetrationDepthForEnlargedObjects(com.flowpowered.react.collision.shape.CollisionShape,com.flowpowered.react.math.Transform,com.flowpowered.react.collision.shape.CollisionShape,com.flowpowered.react.math.Transform,com.flowpowered.react.constraint.ContactPoint$ContactPointInfo,com.flowpowered.react.math.Vector3)>": [
        {
            "<Catalano.Math.Geometry.Line: boolean isHorizontal()>": 0.16752501524209285
        }, 
        {
            "<Catalano.Core.FloatRange: boolean IsOverlapping(Catalano.Core.FloatRange)>": 0.16545243288493397
        }, 
        {
            "<Catalano.Core.FloatRange: boolean isInside(float)>": 0.14968631495420548
        }, 
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.EPA.TriangleEPA: boolean isClosestPointInternalToTriangle()>": 0.148596038823007
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Mathematics: boolean ApproxEqual(float,float,float)>": 0.146810795889094
        }
    ], 
    "<com.flowpowered.react.constraint.SliderJoint: void enableLimit(boolean)>": [
        {
            "<Catalano.Imaging.Filters.Mirror: void <init>(boolean,boolean)>": 0.23512003652927826
        }, 
        {
            "<boofcv.alg.feature.detect.extract.NonMaxBlock: void <init>(boolean,boolean)>": 0.23512003652927826
        }, 
        {
            "<boofcv.gui.calibration.CalibratedImageGridPanel: void setDisplay(boolean,boolean,boolean,boolean,boolean,double)>": 0.22865133265544454
        }, 
        {
            "<boofcv.demonstrations.calibration.SubpixelGridTargetDisplay: void setShow(boolean,boolean)>": 0.22806853641132135
        }, 
        {
            "<boofcv.gui.VideoProcessAppBase: void setPause(boolean)>": 0.22700567010160635
        }
    ], 
    "<com.flowpowered.react.collision.broadphase.SweepAndPruneAlgorithm$AABBInt: void <init>(com.flowpowered.react.collision.shape.AABB)>": [
        {
            "<net.smert.jreactphysics3d.collision.broadphase.AABBInt: void <init>(net.smert.jreactphysics3d.collision.shapes.AABB)>": 0.3798738272833079
        }, 
        {
            "<net.smert.jreactphysics3d.collision.broadphase.AABBInt: void <init>(long,long)>": 0.23610691344708185
        }, 
        {
            "<org.jbox2d.particle.ParticleSystem: long computeTag(float,float)>": 0.21120215612421098
        }, 
        {
            "<net.imglib2.position.transform.Round: void round(float[],long[])>": 0.20733334377216805
        }, 
        {
            "<net.imglib2.position.transform.Floor: void floor(float[],long[])>": 0.20733334377216805
        }
    ], 
    "<com.flowpowered.react.collision.shape.ConeShape: com.flowpowered.react.math.Vector3 getLocalSupportPointWithoutMargin(com.flowpowered.react.math.Vector3)>": [
        {
            "<Catalano.Math.Vector3: float Norm()>": 0.39163281845083425
        }, 
        {
            "<Catalano.Math.Vector3: float Normalize()>": 0.39096180564475985
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 abs()>": 0.3898111323619142
        }, 
        {
            "<Catalano.Math.Vector4: float Norm()>": 0.3877485946921109
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 inverse()>": 0.3874661481664331
        }
    ], 
    "<com.flowpowered.react.constraint.ConstraintSolver: void initializeForIsland(float,com.flowpowered.react.engine.Island)>": [
        {
            "<boofcv.abst.feature.detect.extract.ConfigExtract: void checkValidity()>": 0.3007045464414409
        }, 
        {
            "<net.coobird.thumbnailator.makers.FixedSizeThumbnailMaker: net.coobird.thumbnailator.makers.FixedSizeThumbnailMaker size(int,int)>": 0.2869637156964053
        }, 
        {
            "<boofcv.abst.feature.detect.interest.ConfigFast: void checkValidity()>": 0.2714848638539089
        }, 
        {
            "<boofcv.core.image.GImageGrayDistorted: void set(int,float)>": 0.2702495156004917
        }, 
        {
            "<Catalano.Math.Matrix: float Trace(float[][])>": 0.2692509923007051
        }
    ], 
    "<com.flowpowered.react.collision.RayCaster: boolean intersects(com.flowpowered.react.math.Vector3,com.flowpowered.react.math.Vector3,com.flowpowered.react.collision.shape.BoxShape,com.flowpowered.react.math.Vector3)>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 inverse()>": 0.40671672188664343
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 multiply(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": 0.40467568788343256
        }, 
        {
            "<org.jbox2d.particle.ParticleSystem: void raycast(org.jbox2d.callbacks.ParticleRaycastCallback,org.jbox2d.common.Vec2,org.jbox2d.common.Vec2)>": 0.40276835643429526
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 multiply(net.smert.jreactphysics3d.mathematics.Matrix2x2)>": 0.4025357131537116
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Quaternion: net.smert.jreactphysics3d.mathematics.Quaternion fromMatrix(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": 0.40124080817573216
        }
    ], 
    "<com.flowpowered.react.collision.narrowphase.EPA.EdgeEPA: void <init>(com.flowpowered.react.collision.narrowphase.EPA.TriangleEPA,int)>": [
        {
            "<boofcv.alg.shapes.polygon.BinaryPolygonDetector: void setNumberOfSides(int,int)>": 0.3511915396769004
        }, 
        {
            "<net.coobird.thumbnailator.builders.ThumbnailParameterBuilder: net.coobird.thumbnailator.builders.ThumbnailParameterBuilder size(int,int)>": 0.3435365771313434
        }, 
        {
            "<boofcv.struct.image.ImageGray: boofcv.struct.image.ImageBase subimage(int,int,int,int,boofcv.struct.image.ImageBase)>": 0.30777769726401
        }, 
        {
            "<net.coobird.thumbnailator.makers.FixedSizeThumbnailMaker: net.coobird.thumbnailator.makers.FixedSizeThumbnailMaker size(int,int)>": 0.30379812297141695
        }, 
        {
            "<boofcv.struct.image.ImageGray: boofcv.struct.image.ImageGray subimage(int,int,int,int,boofcv.struct.image.ImageGray)>": 0.302253539941712
        }
    ], 
    "<com.flowpowered.react.math.Matrix2x2: void setAllValues(float,float,float,float)>": [
        {
            "<org.jbox2d.testbed.framework.j2d.DebugDrawJ2D$1: java.awt.Color newColor(float,float,float,float)>": 0.4864942667965957
        }, 
        {
            "<org.jbox2d.callbacks.DebugDraw: void setCamera(float,float,float)>": 0.478985063258783
        }, 
        {
            "<org.jbox2d.common.Mat33: void <init>(float,float,float,float,float,float,float,float,float)>": 0.47378319648422534
        }, 
        {
            "<boofcv.alg.feature.detect.line.gridline.Edgel: void <init>(float,float,float)>": 0.4665800711210836
        }, 
        {
            "<net.imglib2.type.numeric.complex.AbstractComplexType: void setComplexNumber(float,float)>": 0.4429860611504459
        }
    ], 
    "<com.flowpowered.react.collision.broadphase.PairManager$BodyPair: com.flowpowered.react.Utilities$IntPair getBodiesIndexPair()>": [
        {
            "<boofcv.gui.feature.VisualizeShapes: void drawRectangle(georegression.struct.shapes.Rectangle2D_I32,java.awt.Graphics2D)>": 0.2911106295054151
        }, 
        {
            "<boofcv.gui.tracker.TldVisualizationPanel: void drawRectangle(java.awt.Graphics2D,boofcv.struct.ImageRectangle,java.awt.Color,int)>": 0.28681827080262484
        }, 
        {
            "<boofcv.demonstrations.tracker.CirculantVisualizationPanel: void drawRectangle(java.awt.Graphics2D,boofcv.struct.ImageRectangle,java.awt.Color,int)>": 0.28681827080262484
        }, 
        {
            "<boofcv.demonstrations.tracker.VisualizeTldDetectionApp: void drawRectangle(java.awt.Graphics2D,boofcv.struct.ImageRectangle,java.awt.Color,int)>": 0.28681827080262484
        }, 
        {
            "<boofcv.alg.feature.disparity.impl.ImplDisparityScoreSadRect_U8: void _process(boofcv.struct.image.GrayU8,boofcv.struct.image.GrayU8,boofcv.struct.image.ImageGray)>": 0.28597326232619774
        }
    ], 
    "<com.flowpowered.react.math.Matrix2x2: com.flowpowered.react.math.Vector2 get(int)>": [
        {
            "<boofcv.core.image.border.ImageBorderValue$Value_I: void setOutside(int,int,int)>": 0.4966616068166122
        }, 
        {
            "<org.dyn4j.examples.ExampleJOGL: void reshape(com.jogamp.opengl.GLAutoDrawable,int,int,int,int)>": 0.4893146606557609
        }, 
        {
            "<net.coobird.thumbnailator.geometry.Positions$1: java.awt.Point calculate(int,int,int,int,int,int,int,int)>": 0.47437111780712504
        }, 
        {
            "<Catalano.Imaging.Tools.IntegralImage: int getInternalData(int,int)>": 0.46420451256364215
        }, 
        {
            "<net.coobird.thumbnailator.geometry.Coordinate: java.awt.Point calculate(int,int,int,int,int,int,int,int)>": 0.4578204272586427
        }
    ], 
    "<com.flowpowered.react.math.Matrix3x3: boolean equals(java.lang.Object)>": [
        {
            "<org.dyn4j.sandbox.utilities.RenderUtilities: void drawJoint(com.jogamp.opengl.GL2,org.dyn4j.dynamics.joint.Joint,double)>": 0.3014091411625745
        }, 
        {
            "<net.imglib2.img.ImgView: boolean supportsOptimizedCursor(net.imglib2.Interval)>": 0.29353607108458485
        }, 
        {
            "<boofcv.abst.sfm.d3.WrapVisOdomDualTrackPnP: boolean isFault()>": 0.286818420922638
        }, 
        {
            "<org.dyn4j.sandbox.utilities.RenderUtilities: void drawShape(com.jogamp.opengl.GL2,org.dyn4j.geometry.Shape,boolean)>": 0.26491584913468075
        }, 
        {
            "<org.dyn4j.sandbox.utilities.RenderUtilities: void fillShape(com.jogamp.opengl.GL2,org.dyn4j.geometry.Shape)>": 0.2645981390263522
        }
    ], 
    "<com.flowpowered.react.collision.narrowphase.GJK.Simplex: boolean isFull()>": [
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: boolean isFull()>": 0.6797385620915033
        }, 
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: boolean isEmpty()>": 0.6797385620915033
        }, 
        {
            "<Catalano.Core.Structs.DoubleArrayList: boolean isEmpty()>": 0.6797385620915033
        }, 
        {
            "<net.coobird.thumbnailator.ThumbnailParameter: boolean useOriginalImageType()>": 0.6797385620915033
        }, 
        {
            "<boofcv.struct.WrapArrayIntoList: boolean isEmpty()>": 0.6797385620915033
        }
    ], 
    "<com.flowpowered.react.math.Vector3: boolean isZero()>": [
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.5063961160619108
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 inverse()>": 0.5057679557772438
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 multiply(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": 0.5053465582032152
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.5053438142934962
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: boolean isZero()>": 0.5029787421346106
        }
    ], 
    "<com.flowpowered.react.collision.narrowphase.GJK.Simplex: void addPoint(com.flowpowered.react.math.Vector3,com.flowpowered.react.math.Vector3,com.flowpowered.react.math.Vector3)>": [
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: void computeDeterminants()>": 0.5875232086081493
        }, 
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: void addPoint(net.smert.jreactphysics3d.mathematics.Vector3,net.smert.jreactphysics3d.mathematics.Vector3,net.smert.jreactphysics3d.mathematics.Vector3)>": 0.567510649799772
        }, 
        {
            "<Catalano.Imaging.Filters.ImagePyramids: void Downscale(Catalano.Imaging.FastBitmap)>": 0.3977802819075588
        }, 
        {
            "<Catalano.Imaging.Corners.HarrisCornersDetector: java.util.List ProcessImage(Catalano.Imaging.FastBitmap)>": 0.3722131211257531
        }, 
        {
            "<Catalano.Imaging.Filters.ImagePyramids: float[][][] ConvolutionRGB(Catalano.Imaging.FastBitmap,float[][])>": 0.3702448116153213
        }
    ], 
    "<com.flowpowered.react.engine.DynamicsWorld: double getPhysicsTime()>": [
        {
            "<net.imglib2.neighborsearch.NearestNeighborSearchOnIterableRealInterval: double getDistance()>": 0.33930436738645886
        }, 
        {
            "<net.imglib2.neighborsearch.NearestNeighborSearchOnKDTree: double getDistance()>": 0.33930436738645886
        }, 
        {
            "<org.dyn4j.sandbox.panels.TransformPanel: double getRotation()>": 0.33930436738645886
        }, 
        {
            "<Catalano.Statistics.Distributions.LaplaceDistribution: double Entropy()>": 0.3254753764785356
        }, 
        {
            "<Catalano.Math.Approximation: double Lowprecision_Pow(double,double)>": 0.32298847620583565
        }
    ], 
    "<com.flowpowered.react.math.Vector2: int getMinAxis()>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Vector2: int getMinAxis()>": 0.5697916666666667
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: int getMinAxis()>": 0.48445336197710626
        }, 
        {
            "<Catalano.Math.Vector3: int getMinIndex()>": 0.48445336197710626
        }, 
        {
            "<Catalano.Math.Vector3: int getMaxIndex()>": 0.48445336197710626
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: int getMaxAxis()>": 0.4354989515435984
        }
    ], 
    "<com.flowpowered.react.collision.shape.CylinderShape: void <init>(com.flowpowered.react.collision.shape.CylinderShape)>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 abs()>": 0.3247295605498648
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 abs()>": 0.32391829193684735
        }, 
        {
            "<org.jbox2d.common.Vec2: void absLocal()>": 0.3238221377459168
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: net.smert.jreactphysics3d.mathematics.Vector3 abs()>": 0.322554433773684
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector2: net.smert.jreactphysics3d.mathematics.Vector2 abs()>": 0.318024693216996
        }
    ], 
    "<com.flowpowered.react.math.Matrix2x2: com.flowpowered.react.math.Matrix2x2 add(com.flowpowered.react.math.Matrix2x2)>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 abs()>": 0.33945382875652896
        }, 
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector3 toVector3()>": 0.33828269503929276
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 abs()>": 0.33723161390719814
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: net.smert.jreactphysics3d.mathematics.Vector3 abs()>": 0.33499706909238114
        }, 
        {
            "<org.jbox2d.common.Vec2: void absLocal()>": 0.3347314984388654
        }
    ], 
    "<com.flowpowered.react.collision.broadphase.PairManager: void reallocatePairs()>": [
        {
            "<net.smert.jreactphysics3d.collision.broadphase.PairManager: int computeHashBodies(int,int)>": 0.6107691652757393
        }, 
        {
            "<net.smert.jreactphysics3d.collision.broadphase.PairManager: net.smert.jreactphysics3d.collision.broadphase.BodyPair addPair(net.smert.jreactphysics3d.body.CollisionBody,net.smert.jreactphysics3d.body.CollisionBody)>": 0.5762056470540231
        }, 
        {
            "<net.smert.jreactphysics3d.collision.broadphase.PairManager: void reallocatePairs()>": 0.5651689901846177
        }, 
        {
            "<net.smert.jreactphysics3d.collision.broadphase.PairManager: int computeHash32Bits(int)>": 0.5539990417587377
        }, 
        {
            "<net.smert.jreactphysics3d.collision.broadphase.PairManager: net.smert.jreactphysics3d.collision.broadphase.BodyPair findPair(int,int)>": 0.5426236228161085
        }
    ], 
    "<com.flowpowered.react.collision.shape.AABB: void setMin(com.flowpowered.react.math.Vector3)>": [
        {
            "<Catalano.Imaging.Filters.GaussianBlur: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Concurrent.Filters.BradleyLocalThreshold: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.CosineTransform: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.BradleyLocalThreshold: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.UnsharpMasking: void <init>()>": 0.018184824186332698
        }
    ], 
    "<com.flowpowered.react.engine.DynamicsWorld: void addRigidBody(com.flowpowered.react.body.RigidBody)>": [
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void setIsSleepingEnabled(boolean)>": 0.19718705258804525
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void updateRigidBodiesAABB()>": 0.19150808657135662
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: net.smert.jreactphysics3d.body.RigidBody createRigidBody(net.smert.jreactphysics3d.mathematics.Transform,float,net.smert.jreactphysics3d.mathematics.Matrix3x3,net.smert.jreactphysics3d.collision.shapes.CollisionShape)>": 0.18785355895701938
        }, 
        {
            "<net.smert.jreactphysics3d.collision.broadphase.NoBroadPhaseAlgorithm: void addObject(net.smert.jreactphysics3d.body.CollisionBody,net.smert.jreactphysics3d.collision.shapes.AABB)>": 0.18496550958209113
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void resetBodiesMovementVariable()>": 0.1748913281474516
        }
    ], 
    "<com.flowpowered.react.Utilities$IntPair: boolean equals(java.lang.Object)>": [
        {
            "<org.dyn4j.dynamics.Capacity: boolean equals(java.lang.Object)>": 0.412083354503902
        }, 
        {
            "<org.dyn4j.collision.manifold.IndexedManifoldPointId: boolean equals(java.lang.Object)>": 0.39513004254954137
        }, 
        {
            "<org.dyn4j.collision.narrowphase.AbstractFallbackCondition: boolean equals(java.lang.Object)>": 0.37967171288316615
        }, 
        {
            "<boofcv.misc.BoofMiscOps: boolean checkInside(boofcv.struct.image.ImageBase,boofcv.struct.ImageRectangle)>": 0.3755342279598094
        }, 
        {
            "<org.jbox2d.particle.ParticleSystem$Proxy: boolean equals(java.lang.Object)>": 0.37499619802266865
        }
    ], 
    "<com.flowpowered.react.engine.ContactSolver: void warmStart()>": [
        {
            "<net.smert.jreactphysics3d.engine.ProfileNode: boolean exitBlockOfCode()>": 0.11330437224452927
        }, 
        {
            "<Catalano.Imaging.Filters.ImageNormalization: void applyInPlace(Catalano.Imaging.FastBitmap)>": 0.10156894370528032
        }, 
        {
            "<boofcv.alg.feature.detect.template.TemplateNCC$F32: void setupTemplate(boofcv.struct.image.GrayF32)>": 0.10083589329742863
        }, 
        {
            "<boofcv.alg.weights.WeightPixelUniform_F32: float weight(int,int)>": 0.10043065574373672
        }, 
        {
            "<boofcv.core.image.border.ImageBorderValue$Value_F32: float getOutside(int,int)>": 0.10043065574373672
        }
    ], 
    "<com.flowpowered.react.collision.shape.ConvexMeshShape: void <init>(float[],int,int,float)>": [
        {
            "<Catalano.Math.Vector4: boolean equals(java.lang.Object)>": 0.2546126091875613
        }, 
        {
            "<Catalano.Math.Vector3: float getMin()>": 0.2524051502409783
        }, 
        {
            "<Catalano.Math.Vector3: float getMax()>": 0.2524051502409783
        }, 
        {
            "<boofcv.alg.distort.DistortImageOps: void updateBoundBox(boofcv.struct.distort.PixelTransform_F32,boofcv.struct.ImageRectangle_F32)>": 0.2499170731255132
        }, 
        {
            "<boofcv.alg.feature.detect.line.ImageLinePruneMerge: void pruneSimilar(float,float,int,int)>": 0.24831454479559859
        }
    ], 
    "<com.flowpowered.react.collision.broadphase.SweepAndPruneAlgorithm$BoxAABB: void setMax(int,int)>": [
        {
            "<net.imglib2.img.basictypeaccess.array.IntArray: void setValue(int,int)>": 0.6761363636363636
        }, 
        {
            "<boofcv.struct.image.GrayS32: void unsafe_set(int,int,int)>": 0.5132158016095391
        }, 
        {
            "<net.imglib2.img.list.ListRandomAccess: void bck(int)>": 0.4747446304758694
        }, 
        {
            "<net.imglib2.img.list.ListRandomAccess: void fwd(int)>": 0.4747446304758694
        }, 
        {
            "<net.imglib2.img.list.ListRandomAccess: void move(int,int)>": 0.4737634255217416
        }
    ], 
    "<com.flowpowered.react.math.Matrix3x3: com.flowpowered.react.math.Vector3 getRow(int)>": [
        {
            "<boofcv.core.image.border.ImageBorderValue$Value_I: void setOutside(int,int,int)>": 0.4966616068166122
        }, 
        {
            "<org.dyn4j.examples.ExampleJOGL: void reshape(com.jogamp.opengl.GLAutoDrawable,int,int,int,int)>": 0.4893146606557609
        }, 
        {
            "<net.coobird.thumbnailator.geometry.Positions$1: java.awt.Point calculate(int,int,int,int,int,int,int,int)>": 0.47437111780712504
        }, 
        {
            "<Catalano.Imaging.Tools.IntegralImage: int getInternalData(int,int)>": 0.46420451256364215
        }, 
        {
            "<net.coobird.thumbnailator.geometry.Coordinate: java.awt.Point calculate(int,int,int,int,int,int,int,int)>": 0.4578204272586427
        }
    ], 
    "<com.flowpowered.react.engine.Material: com.flowpowered.react.engine.Material asUnmodifiableMaterial(com.flowpowered.react.engine.Material)>": [
        {
            "<boofcv.core.image.FactoryGImageGray: boofcv.core.image.GImageGray create(java.lang.Class)>": 0.14820465141482933
        }, 
        {
            "<boofcv.gui.StereoVideoAppBase: void startWorkerThread()>": 0.09410170652639993
        }, 
        {
            "<boofcv.gui.VideoProcessAppBase: void startWorkerThread()>": 0.09410170652639993
        }, 
        {
            "<boofcv.gui.DepthVideoAppBase: void startWorkerThread()>": 0.09410170652639993
        }, 
        {
            "<boofcv.gui.image.ShowImages: void showDialog(java.awt.image.BufferedImage)>": 0.08533522962325216
        }
    ], 
    "<com.flowpowered.react.collision.narrowphase.EPA.TriangleEPA: boolean link(com.flowpowered.react.collision.narrowphase.EPA.EdgeEPA,com.flowpowered.react.collision.narrowphase.EPA.EdgeEPA)>": [
        {
            "<boofcv.struct.image.ImageBase: boolean isInBounds(int,int)>": 0.35530016089603755
        }, 
        {
            "<boofcv.struct.flow.ImageFlow: boolean isInBounds(int,int)>": 0.35530016089603755
        }, 
        {
            "<boofcv.struct.feature.MatrixOfList: boolean isInBounds(int,int)>": 0.35530016089603755
        }, 
        {
            "<Catalano.Core.IntRange: boolean isInside(int)>": 0.3544083102522827
        }, 
        {
            "<boofcv.alg.shapes.polygon.BinaryPolygonDetector: boolean expectedNumberOfSides(org.ddogleg.struct.GrowQueue_I32)>": 0.3453147202882177
        }
    ], 
    "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 subtract(com.flowpowered.react.math.Matrix4x4,com.flowpowered.react.math.Matrix4x4)>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 abs()>": 0.4500733734028053
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 abs()>": 0.44666179874680656
        }, 
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector3 toVector3()>": 0.44523064642612237
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: net.smert.jreactphysics3d.mathematics.Vector3 abs()>": 0.4434281825112173
        }, 
        {
            "<org.jbox2d.common.Vec2: void absLocal()>": 0.442256651251845
        }
    ], 
    "<com.flowpowered.react.collision.broadphase.BroadPhaseAlgorithm: com.flowpowered.react.collision.broadphase.PairManager$BodyPair[] getOverlappingPairs()>": [
        {
            "<Catalano.Imaging.Filters.GaussianBlur: void <init>()>": 0.024397501823713325
        }, 
        {
            "<Catalano.Imaging.Concurrent.Filters.BradleyLocalThreshold: void <init>()>": 0.024397501823713325
        }, 
        {
            "<Catalano.Imaging.Filters.CosineTransform: void <init>()>": 0.024397501823713325
        }, 
        {
            "<Catalano.Imaging.Filters.BradleyLocalThreshold: void <init>()>": 0.024397501823713325
        }, 
        {
            "<Catalano.Imaging.Filters.UnsharpMasking: void <init>()>": 0.024397501823713325
        }
    ], 
    "<com.flowpowered.react.math.Quaternion: float getRotationAngleAxis(com.flowpowered.react.math.Vector3)>": [
        {
            "<Catalano.Math.Vector4: float Norm()>": 0.452389510827247
        }, 
        {
            "<Catalano.Math.Vector3: float Norm()>": 0.44986234209815384
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 inverse()>": 0.44536714149310985
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 multiply(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": 0.4436994977328374
        }, 
        {
            "<Catalano.Math.Vector4: float Normalize()>": 0.4411093339697515
        }
    ], 
    "<com.flowpowered.react.collision.broadphase.PairManager: int computeNextPowerOfTwo(int)>": [
        {
            "<net.smert.jreactphysics3d.collision.broadphase.PairManager: int ComputeNextPowerOfTwo(int)>": 1.0
        }, 
        {
            "<org.jbox2d.common.MathUtils: int nextPowerOfTwo(int)>": 1.0
        }, 
        {
            "<Catalano.Math.Tools: int NextPowerOf2(int)>": 0.8227634193258382
        }, 
        {
            "<boofcv.alg.transform.fft.DiscreteFourierTransformOps: int nextPow2(int)>": 0.5988270747197864
        }, 
        {
            "<net.smert.jreactphysics3d.collision.broadphase.PairManager: int computeHash32Bits(int)>": 0.4524467294313015
        }
    ], 
    "<com.flowpowered.react.collision.broadphase.SweepAndPruneAlgorithm$EndPoint: void access$400(com.flowpowered.react.collision.broadphase.SweepAndPruneAlgorithm$EndPoint,int,boolean,long)>": [
        {
            "<boofcv.abst.feature.detect.interest.ConfigGeneralDetector: void <init>(int,int,float,int,boolean,boolean,boolean)>": 0.38697462821977463
        }, 
        {
            "<boofcv.alg.geo.calibration.Zhang99ParamAll: void <init>(boolean,int,boolean)>": 0.3723721382473174
        }, 
        {
            "<net.imglib2.type.numeric.integer.UnsignedVariableBitLengthType: void <init>(long,int)>": 0.35351853193321797
        }, 
        {
            "<net.imglib2.img.list.AbstractLongListImg$LongListRandomAccess: void move(long,int)>": 0.35351853193321797
        }, 
        {
            "<boofcv.abst.feature.detect.interest.ConfigGeneralDetector: void <init>(int,int,float,int,boolean)>": 0.32649148900317826
        }
    ], 
    "<com.flowpowered.react.engine.ContactSolver: float computeMixedFrictionCoefficient(com.flowpowered.react.body.RigidBody,com.flowpowered.react.body.RigidBody)>": [
        {
            "<boofcv.alg.weights.WeightDistanceSqGaussian_F32: float weight(float)>": 0.4079864412448956
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Mathematics: float Sqrt(float)>": 0.3933217644371124
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Mathematics: float ArcSin(float)>": 0.3933217644371124
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Mathematics: float Cos(float)>": 0.3933217644371124
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Mathematics: float ArcCos(float)>": 0.3933217644371124
        }
    ], 
    "<com.flowpowered.react.math.Matrix2x2: com.flowpowered.react.math.Matrix2x2 multiply(float,com.flowpowered.react.math.Matrix2x2)>": [
        {
            "<boofcv.alg.feature.detect.line.gridline.Edgel: void <init>(float,float,float)>": 0.1490551505581848
        }, 
        {
            "<org.jbox2d.common.MathUtils: float map(float,float,float,float,float)>": 0.14096019152099476
        }, 
        {
            "<Catalano.Math.Matrix3x3: void <init>(float,float,float,float,float,float,float,float,float)>": 0.14047546561061652
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 set(float,float,float,float,float,float,float,float,float)>": 0.14034914351761746
        }, 
        {
            "<net.smert.jreactphysics3d.engine.Profiler: float GetElapsedTimeSinceStart()>": 0.1400270254342746
        }
    ], 
    "<com.flowpowered.react.engine.Timer: void start()>": [
        {
            "<boofcv.abst.feature.describe.WrapDescribeBrief: boolean process(double,double,double,double,boofcv.struct.feature.TupleDesc)>": 0.36897412073708563
        }, 
        {
            "<boofcv.abst.feature.describe.WrapDescribeSurf: boolean process(double,double,double,double,boofcv.struct.feature.TupleDesc)>": 0.3651956921297906
        }, 
        {
            "<boofcv.abst.feature.describe.SurfPlanar_to_DescribeRegionPoint: boolean process(double,double,double,double,boofcv.struct.feature.TupleDesc)>": 0.3651956921297906
        }, 
        {
            "<org.dyn4j.sandbox.utilities.RenderUtilities: void drawCircleFromTopLeft(com.jogamp.opengl.GL2,double,double,double,double,boolean,boolean)>": 0.3624038880214825
        }, 
        {
            "<boofcv.alg.feature.orientation.OrientationHistogramSift: double computeWeight(double,double,double)>": 0.3613385784484397
        }
    ], 
    "<com.flowpowered.react.collision.CollisionDetection: void computeBroadPhase()>": [
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void updateRigidBodiesAABB()>": 0.3916453800793758
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void resetContactManifoldListsOfBodies()>": 0.3899346004394931
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void setIsSleepingEnabled(boolean)>": 0.38812491855062603
        }, 
        {
            "<net.coobird.thumbnailator.makers.ThumbnailMaker$ReadinessTracker: boolean isReady()>": 0.3547643363729883
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void resetBodiesMovementVariable()>": 0.35090462311375675
        }
    ], 
    "<com.flowpowered.react.math.Quaternion: float dot(com.flowpowered.react.math.Quaternion)>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Quaternion: float lengthSquare()>": 0.4917288159246118
        }, 
        {
            "<Catalano.Math.Vector4: float Square()>": 0.4917288159246118
        }, 
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.48882076647020867
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.4878388190339522
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 multiply(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": 0.4874495173932683
        }
    ], 
    "<com.flowpowered.react.engine.DynamicsWorld: void setTimeBeforeSleep(float)>": [
        {
            "<boofcv.factory.background.ConfigBackgroundGaussian: void checkValidity()>": 0.3576379882883496
        }, 
        {
            "<boofcv.alg.background.stationary.BackgroundStationaryBasic: void <init>(float,float,boofcv.struct.image.ImageType)>": 0.3415979091245608
        }, 
        {
            "<boofcv.alg.background.stationary.BackgroundStationaryGaussian: void <init>(float,float,boofcv.struct.image.ImageType)>": 0.3350401305321443
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void setSleepLinearVelocity(float)>": 0.3330403520701663
        }, 
        {
            "<net.smert.jreactphysics3d.body.RigidBody: void setMass(float)>": 0.3330403520701663
        }
    ], 
    "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 add(com.flowpowered.react.math.Matrix4x4,com.flowpowered.react.math.Matrix4x4)>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 abs()>": 0.4500733734028053
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 abs()>": 0.44666179874680656
        }, 
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector3 toVector3()>": 0.44523064642612237
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: net.smert.jreactphysics3d.mathematics.Vector3 abs()>": 0.4434281825112173
        }, 
        {
            "<org.jbox2d.common.Vec2: void absLocal()>": 0.442256651251845
        }
    ], 
    "<com.flowpowered.react.math.Vector3: com.flowpowered.react.math.Vector3 normalize()>": [
        {
            "<Catalano.Math.Vector3: float Norm()>": 0.5032706502259094
        }, 
        {
            "<Catalano.Math.Vector4: float Norm()>": 0.4980325711829829
        }, 
        {
            "<Catalano.Math.Vector3: float Normalize()>": 0.49623396163922284
        }, 
        {
            "<Catalano.Math.Vector4: float Normalize()>": 0.4913897674511207
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 inverse()>": 0.4907912087555013
        }
    ], 
    "<com.flowpowered.react.collision.CollisionDetection: void broadPhaseNotifyRemovedOverlappingPair(com.flowpowered.react.collision.broadphase.PairManager$BodyPair)>": [
        {
            "<net.coobird.thumbnailator.Thumbnails$Builder: net.coobird.thumbnailator.Thumbnails$Builder keepAspectRatio(boolean)>": 0.215679379134886
        }, 
        {
            "<net.smert.jreactphysics3d.collision.CollisionDetection: void broadPhaseNotifyRemovedOverlappingPair(net.smert.jreactphysics3d.collision.broadphase.BodyPair)>": 0.1767179879880566
        }, 
        {
            "<net.coobird.thumbnailator.resizers.NullResizer: void <init>(java.lang.Object,java.util.Map)>": 0.17446578944971328
        }, 
        {
            "<net.coobird.thumbnailator.resizers.ProgressiveBilinearResizer: void <init>(java.util.Map)>": 0.17446578944971328
        }, 
        {
            "<net.coobird.thumbnailator.resizers.BicubicResizer: void <init>(java.util.Map)>": 0.17446578944971328
        }
    ], 
    "<com.flowpowered.react.math.Quaternion: com.flowpowered.react.math.Quaternion multiply(com.flowpowered.react.math.Quaternion,com.flowpowered.react.math.Quaternion)>": [
        {
            "<Catalano.Math.Vector3: Catalano.Math.Vector3 Cross(Catalano.Math.Vector3,Catalano.Math.Vector3)>": 0.18202047222196066
        }, 
        {
            "<org.jbox2d.common.Vec3: org.jbox2d.common.Vec3 cross(org.jbox2d.common.Vec3,org.jbox2d.common.Vec3)>": 0.18202047222196066
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 inverse()>": 0.173937046163406
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 multiply(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": 0.17327977416762402
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 multiply(net.smert.jreactphysics3d.mathematics.Matrix2x2)>": 0.17217231593169996
        }
    ], 
    "<com.flowpowered.react.math.Vector4: float lengthSquare()>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Quaternion: float lengthSquare()>": 0.5285884824131092
        }, 
        {
            "<Catalano.Math.Vector4: float Square()>": 0.5285884824131092
        }, 
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.5281755726526416
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.5271219466004621
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 multiply(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": 0.5266477643014582
        }
    ], 
    "<com.flowpowered.react.collision.broadphase.PairManager: com.flowpowered.react.collision.broadphase.PairManager$BodyPair addPair(com.flowpowered.react.body.CollisionBody,com.flowpowered.react.body.CollisionBody)>": [
        {
            "<net.smert.jreactphysics3d.collision.broadphase.PairManager: int computeHashBodies(int,int)>": 0.633769185167292
        }, 
        {
            "<net.smert.jreactphysics3d.collision.broadphase.PairManager: net.smert.jreactphysics3d.collision.broadphase.BodyPair addPair(net.smert.jreactphysics3d.body.CollisionBody,net.smert.jreactphysics3d.body.CollisionBody)>": 0.6254284876026287
        }, 
        {
            "<net.smert.jreactphysics3d.collision.broadphase.PairManager: net.smert.jreactphysics3d.collision.broadphase.BodyPair findPair(int,int)>": 0.5692718464550935
        }, 
        {
            "<net.smert.jreactphysics3d.collision.broadphase.PairManager: int computeHash32Bits(int)>": 0.5571663739082198
        }, 
        {
            "<net.smert.jreactphysics3d.collision.broadphase.PairManager: void reallocatePairs()>": 0.5472652823646761
        }
    ], 
    "<com.flowpowered.react.math.Matrix3x3: void setAllValues(float,float,float,float,float,float,float,float,float)>": [
        {
            "<org.jbox2d.testbed.framework.j2d.DebugDrawJ2D$1: java.awt.Color newColor(float,float,float,float)>": 0.5364190259626436
        }, 
        {
            "<org.jbox2d.callbacks.DebugDraw: void setCamera(float,float,float)>": 0.5264883297053371
        }, 
        {
            "<org.jbox2d.common.Mat33: void <init>(float,float,float,float,float,float,float,float,float)>": 0.5218573431881198
        }, 
        {
            "<boofcv.alg.feature.detect.line.gridline.Edgel: void <init>(float,float,float)>": 0.5125669735774576
        }, 
        {
            "<net.imglib2.type.numeric.complex.AbstractComplexType: void setComplexNumber(float,float)>": 0.47938134027906676
        }
    ], 
    "<com.flowpowered.react.math.Vector3: int getMinAxis()>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: int getMinAxis()>": 0.5851579605880514
        }, 
        {
            "<Catalano.Math.Vector3: int getMinIndex()>": 0.5851579605880514
        }, 
        {
            "<Catalano.Math.Vector3: int getMaxIndex()>": 0.5851579605880514
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: int getMaxAxis()>": 0.5288223330847253
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector2: int getMinAxis()>": 0.48445336197710626
        }
    ], 
    "<com.flowpowered.react.collision.shape.ConeShape: float getHeight()>": [
        {
            "<net.smert.jreactphysics3d.collision.shapes.CylinderShape: float getHeight()>": 0.4907407407407407
        }, 
        {
            "<net.smert.jreactphysics3d.collision.shapes.CapsuleShape: float getHeight()>": 0.4907407407407407
        }, 
        {
            "<net.smert.jreactphysics3d.collision.shapes.ConeShape: float getHeight()>": 0.4907407407407407
        }, 
        {
            "<net.smert.jreactphysics3d.constraint.HingeJoint: float getMotorTorque(float)>": 0.48845356531534173
        }, 
        {
            "<net.smert.jreactphysics3d.constraint.SliderJoint: float getMotorForce(float)>": 0.48845356531534173
        }
    ], 
    "<com.flowpowered.react.collision.BroadPhasePair: com.flowpowered.react.Utilities$IntPair computeBodiesIndexPair(com.flowpowered.react.body.CollisionBody,com.flowpowered.react.body.CollisionBody)>": [
        {
            "<boofcv.gui.feature.VisualizeShapes: void drawRectangle(georegression.struct.shapes.Rectangle2D_I32,java.awt.Graphics2D)>": 0.3201934229622784
        }, 
        {
            "<boofcv.alg.feature.disparity.impl.ImplDisparityScoreSadRect_U8: void _process(boofcv.struct.image.GrayU8,boofcv.struct.image.GrayU8,boofcv.struct.image.ImageGray)>": 0.31513029764002304
        }, 
        {
            "<boofcv.alg.feature.disparity.impl.ImplDisparityScoreSadRect_S16: void _process(boofcv.struct.image.GrayS16,boofcv.struct.image.GrayS16,boofcv.struct.image.ImageGray)>": 0.31513029764002304
        }, 
        {
            "<boofcv.gui.tracker.TldVisualizationPanel: void drawRectangle(java.awt.Graphics2D,boofcv.struct.ImageRectangle,java.awt.Color,int)>": 0.31484138838106385
        }, 
        {
            "<boofcv.demonstrations.tracker.CirculantVisualizationPanel: void drawRectangle(java.awt.Graphics2D,boofcv.struct.ImageRectangle,java.awt.Color,int)>": 0.31484138838106385
        }
    ], 
    "<com.flowpowered.react.math.Quaternion: com.flowpowered.react.math.Quaternion getInverse()>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 inverse()>": 0.5119136795962023
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 multiply(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": 0.5116414948691023
        }, 
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.5082885946017939
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.507452037335246
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Quaternion: float length()>": 0.5016103791540312
        }
    ], 
    "<com.flowpowered.react.math.Vector4: float dot(com.flowpowered.react.math.Vector4)>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Quaternion: float lengthSquare()>": 0.4917288159246118
        }, 
        {
            "<Catalano.Math.Vector4: float Square()>": 0.4917288159246118
        }, 
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.48882076647020867
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.4878388190339522
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 multiply(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": 0.4874495173932683
        }
    ], 
    "<com.flowpowered.react.body.CollisionBody: void setTransform(com.flowpowered.react.math.Transform)>": [
        {
            "<boofcv.abst.sfm.d3.WrapVisOdomPixelDepthPnP: boolean isFault()>": 0.1791910778099024
        }, 
        {
            "<boofcv.abst.sfm.d3.VisOdomPixelDepthPnP_to_DepthVisualOdometry: boolean isFault()>": 0.1791910778099024
        }, 
        {
            "<boofcv.io.javacv.JavaCVVideoImageSequence: boolean hasNext()>": 0.1791910778099024
        }, 
        {
            "<boofcv.abst.feature.associate.EnforceUniqueByScore: boolean uniqueDestination()>": 0.16925713653459107
        }, 
        {
            "<boofcv.abst.feature.associate.EnforceUniqueByScore: boolean uniqueSource()>": 0.16925713653459107
        }
    ], 
    "<com.flowpowered.react.constraint.SliderJoint: void setMotorSpeed(float)>": [
        {
            "<org.jbox2d.common.MathUtils: float min(float,float)>": 0.27217205551146173
        }, 
        {
            "<org.jbox2d.dynamics.contacts.Contact: float mixRestitution(float,float)>": 0.27217205551146173
        }, 
        {
            "<org.jbox2d.common.MathUtils: float max(float,float)>": 0.27217205551146173
        }, 
        {
            "<org.jbox2d.common.Settings: float mixRestitution(float,float)>": 0.27217205551146173
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Mathematics: boolean ApproxEqual(float,float,float)>": 0.24674262326211144
        }
    ], 
    "<com.flowpowered.react.math.Matrix2x2: com.flowpowered.react.math.Matrix2x2 subtract(com.flowpowered.react.math.Matrix2x2,com.flowpowered.react.math.Matrix2x2)>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 abs()>": 0.40619013106654517
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 abs()>": 0.4031080057575564
        }, 
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector3 toVector3()>": 0.4020032593632948
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: net.smert.jreactphysics3d.mathematics.Vector3 abs()>": 0.40018672062992156
        }, 
        {
            "<org.jbox2d.common.Vec2: void absLocal()>": 0.39922909543755297
        }
    ], 
    "<com.flowpowered.react.body.RigidBody: void setLinearVelocity(com.flowpowered.react.math.Vector3)>": [
        {
            "<boofcv.abst.sfm.d3.WrapVisOdomPixelDepthPnP: boolean isFault()>": 0.13717218052474262
        }, 
        {
            "<boofcv.abst.sfm.d3.VisOdomPixelDepthPnP_to_DepthVisualOdometry: boolean isFault()>": 0.13717218052474262
        }, 
        {
            "<boofcv.io.javacv.JavaCVVideoImageSequence: boolean hasNext()>": 0.13717218052474262
        }, 
        {
            "<net.imglib2.type.volatiles.AbstractVolatileRealType: boolean valueEquals(net.imglib2.type.volatiles.AbstractVolatileRealType)>": 0.13654731034339573
        }, 
        {
            "<net.imglib2.type.volatiles.AbstractVolatileNumericType: boolean valueEquals(net.imglib2.type.volatiles.AbstractVolatileNumericType)>": 0.13654731034339573
        }
    ], 
    "<com.flowpowered.react.engine.Material: void set(com.flowpowered.react.engine.Material)>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 abs()>": 0.33377598018666504
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 abs()>": 0.3329280546913401
        }, 
        {
            "<org.jbox2d.common.Vec2: void absLocal()>": 0.33278749766013505
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: net.smert.jreactphysics3d.mathematics.Vector3 abs()>": 0.33151810911176327
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector2: net.smert.jreactphysics3d.mathematics.Vector2 abs()>": 0.3268469038669214
        }
    ], 
    "<com.flowpowered.react.body.CollisionBody: void <init>(com.flowpowered.react.math.Transform,com.flowpowered.react.collision.shape.CollisionShape,int)>": [
        {
            "<net.coobird.thumbnailator.geometry.AbsoluteSize: void <init>(int,int)>": 0.18891939985245956
        }, 
        {
            "<boofcv.alg.feature.disparity.impl.ImplSelectRectStandard_S32_U8: void configure(boofcv.struct.image.GrayU8,int,int,int)>": 0.1788288105134417
        }, 
        {
            "<boofcv.alg.feature.disparity.impl.ImplSelectRectStandard_F32_U8: void configure(boofcv.struct.image.GrayU8,int,int,int)>": 0.1788288105134417
        }, 
        {
            "<net.coobird.thumbnailator.makers.FixedSizeThumbnailMaker: net.coobird.thumbnailator.makers.FixedSizeThumbnailMaker size(int,int)>": 0.1713196905936546
        }, 
        {
            "<boofcv.core.image.GeneralizedImageOps: void setB(boofcv.struct.image.ImageBase,int,int,int,double)>": 0.17110199348808747
        }
    ], 
    "<com.flowpowered.react.collision.shape.CollisionShape: void <init>(com.flowpowered.react.collision.shape.CollisionShape)>": [
        {
            "<boofcv.alg.feature.dense.DescribeDenseHogAlg: void computeCellHistograms()>": 0.22821179956052307
        }, 
        {
            "<boofcv.alg.flow.DenseOpticalFlowBlockPyramid: void checkNeighbors(int,int,boofcv.struct.flow.ImageFlow$D,boofcv.struct.flow.ImageFlow,float)>": 0.22725315123206385
        }, 
        {
            "<Catalano.Imaging.Filters.UnsharpMasking: void <init>(int,float)>": 0.22351026233061788
        }, 
        {
            "<boofcv.alg.flow.DenseOpticalFlowKlt: void process(boofcv.struct.pyramid.ImagePyramid,boofcv.struct.image.ImageGray[],boofcv.struct.image.ImageGray[],boofcv.struct.pyramid.ImagePyramid,boofcv.struct.flow.ImageFlow)>": 0.22243054159006495
        }, 
        {
            "<boofcv.alg.feature.detect.template.TemplateNCC$F32: void setupTemplate(boofcv.struct.image.GrayF32)>": 0.22123281192640962
        }
    ], 
    "<com.flowpowered.react.constraint.FixedJoint$FixedJointInfo: void <init>(com.flowpowered.react.body.RigidBody,com.flowpowered.react.body.RigidBody,com.flowpowered.react.math.Vector3)>": [
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.05722198698407284
        }, 
        {
            "<org.dyn4j.sandbox.Sandbox: void init(com.jogamp.opengl.GLAutoDrawable)>": 0.05401857486891122
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.TestbedMain: void main(java.lang.String[])>": 0.05296977535773844
        }, 
        {
            "<org.dyn4j.sandbox.panels.LineGraphPanel: void setStaticSize(java.awt.Dimension)>": 0.052174919474995085
        }, 
        {
            "<boofcv.gui.d3.Polygon3DSequenceViewer: void <init>()>": 0.05204164998665332
        }
    ], 
    "<com.flowpowered.react.collision.narrowphase.GJK.Simplex: com.flowpowered.react.math.Vector3 computeClosestPointForSubset(int)>": [
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: void computeDeterminants()>": 0.32950495253784196
        }, 
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: void addPoint(net.smert.jreactphysics3d.mathematics.Vector3,net.smert.jreactphysics3d.mathematics.Vector3,net.smert.jreactphysics3d.mathematics.Vector3)>": 0.315356508187201
        }, 
        {
            "<Catalano.Math.Matrix: float[] MinMax(float[][])>": 0.28766222013083853
        }, 
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: net.smert.jreactphysics3d.mathematics.Vector3 computeClosestPointForSubset(int)>": 0.2727966192426384
        }, 
        {
            "<Catalano.Imaging.Filters.ImagePyramids: void Downscale(Catalano.Imaging.FastBitmap)>": 0.2711756604124712
        }
    ], 
    "<com.flowpowered.react.body.RigidBody: com.flowpowered.react.math.Matrix3x3 getInertiaTensorInverseWorld()>": [
        {
            "<Catalano.Imaging.Filters.GaussianBlur: void <init>()>": 0.006749365589450485
        }, 
        {
            "<Catalano.Imaging.Concurrent.Filters.BradleyLocalThreshold: void <init>()>": 0.006749365589450485
        }, 
        {
            "<Catalano.Imaging.Filters.CosineTransform: void <init>()>": 0.006749365589450485
        }, 
        {
            "<Catalano.Imaging.Filters.BradleyLocalThreshold: void <init>()>": 0.006749365589450485
        }, 
        {
            "<Catalano.Imaging.Filters.UnsharpMasking: void <init>()>": 0.006749365589450485
        }
    ], 
    "<com.flowpowered.react.math.Quaternion: com.flowpowered.react.math.Quaternion add(com.flowpowered.react.math.Quaternion)>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 inverse()>": 0.448620986834405
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 multiply(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": 0.44733755433211364
        }, 
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.4443798466205574
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.4434344929545489
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 multiply(net.smert.jreactphysics3d.mathematics.Matrix2x2)>": 0.4433010632369433
        }
    ], 
    "<com.flowpowered.react.math.Matrix2x2: com.flowpowered.react.math.Matrix2x2 getAbsoluteMatrix()>": [
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector4 Abs()>": 0.4463306898217282
        }, 
        {
            "<Catalano.Math.Vector3: Catalano.Math.Vector3 Abs()>": 0.4359531533732744
        }, 
        {
            "<org.jbox2d.common.Mat22: org.jbox2d.common.Mat22 abs()>": 0.4189194893239534
        }, 
        {
            "<org.jbox2d.common.Vec2: org.jbox2d.common.Vec2 abs()>": 0.4097052486041899
        }, 
        {
            "<org.jbox2d.common.Vec2: org.jbox2d.common.Vec2 abs(org.jbox2d.common.Vec2)>": 0.393953187515284
        }
    ], 
    "<com.flowpowered.react.math.Mathematics: boolean approxEquals(float,float)>": [
        {
            "<boofcv.alg.interpolate.InterpolatePixel_S_to_MB: boolean isInFastBounds(float,float)>": 0.4996553577113322
        }, 
        {
            "<boofcv.abst.filter.interpolate.InterpolatePixel_PL_using_SB: boolean isInFastBounds(float,float)>": 0.4996553577113322
        }, 
        {
            "<Catalano.Math.Geometry.Line: boolean isVertical()>": 0.35159329690277447
        }, 
        {
            "<org.jbox2d.common.Vec2: boolean isValid()>": 0.3348683254576823
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Mathematics: boolean ApproxEqual(float,float,float)>": 0.32720038519903705
        }
    ], 
    "<com.flowpowered.react.engine.DynamicsWorld: void solveContactsAndConstraints()>": [
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void solveContactsAndConstraints()>": 0.21104962541762384
        }, 
        {
            "<Catalano.Imaging.Filters.Threshold: void applyInPlace(Catalano.Imaging.FastBitmap)>": 0.20240532420846785
        }, 
        {
            "<org.dyn4j.dynamics.ContactManagerTest: void clear()>": 0.20129026621720067
        }, 
        {
            "<net.imglib2.transform.integer.SlicingTransform: void set(net.imglib2.transform.integer.Slicing)>": 0.1864776882592958
        }, 
        {
            "<boofcv.alg.fiducial.calib.squares.CrossClustersIntoGrids: boolean checkEdgeCount(boofcv.alg.fiducial.calib.squares.SquareGrid)>": 0.18611947639899867
        }
    ], 
    "<com.flowpowered.react.constraint.BallAndSocketJoint$BallAndSocketJointInfo: void <init>(com.flowpowered.react.body.RigidBody,com.flowpowered.react.body.RigidBody,com.flowpowered.react.math.Vector3)>": [
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.05722198698407284
        }, 
        {
            "<org.dyn4j.sandbox.Sandbox: void init(com.jogamp.opengl.GLAutoDrawable)>": 0.05401857486891122
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.TestbedMain: void main(java.lang.String[])>": 0.05296977535773844
        }, 
        {
            "<org.dyn4j.sandbox.panels.LineGraphPanel: void setStaticSize(java.awt.Dimension)>": 0.052174919474995085
        }, 
        {
            "<boofcv.gui.d3.Polygon3DSequenceViewer: void <init>()>": 0.05204164998665332
        }
    ], 
    "<com.flowpowered.react.math.Vector2: com.flowpowered.react.math.Vector2 getUnit()>": [
        {
            "<Catalano.Math.Vector3: float Norm()>": 0.44863421423673955
        }, 
        {
            "<boofcv.alg.weights.WeightDistanceSqGaussian_F32: float weight(float)>": 0.4382026636683282
        }, 
        {
            "<Catalano.Math.Vector4: float Norm()>": 0.4381123585780266
        }, 
        {
            "<boofcv.alg.feature.detect.intensity.impl.ImplShiTomasiCorner_F32: float computeIntensity()>": 0.43772254288040413
        }, 
        {
            "<boofcv.alg.feature.detect.intensity.impl.ImplShiTomasiCornerWeighted_F32: float computeResponse()>": 0.43772254288040413
        }
    ], 
    "<com.flowpowered.react.engine.DynamicsWorld: void notifyRemovedOverlappingPair(com.flowpowered.react.collision.BroadPhasePair)>": [
        {
            "<org.dyn4j.sandbox.dialogs.AddJointDialog: void incrementCounter(java.lang.Class)>": 0.14174296041715465
        }, 
        {
            "<net.coobird.thumbnailator.resizers.NullResizer: void <init>(java.lang.Object,java.util.Map)>": 0.13623731522826651
        }, 
        {
            "<net.coobird.thumbnailator.resizers.ProgressiveBilinearResizer: void <init>(java.util.Map)>": 0.13623731522826651
        }, 
        {
            "<net.coobird.thumbnailator.resizers.BicubicResizer: void <init>(java.util.Map)>": 0.13623731522826651
        }, 
        {
            "<net.coobird.thumbnailator.resizers.BilinearResizer: void <init>(java.util.Map)>": 0.13623731522826651
        }
    ], 
    "<com.flowpowered.react.math.Vector4: com.flowpowered.react.math.Vector4 add(com.flowpowered.react.math.Vector4,com.flowpowered.react.math.Vector4)>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 abs()>": 0.3849718906667029
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 abs()>": 0.3820468798027056
        }, 
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector3 toVector3()>": 0.3804639859925687
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: net.smert.jreactphysics3d.mathematics.Vector3 abs()>": 0.37927459159678634
        }, 
        {
            "<org.jbox2d.common.Vec2: void absLocal()>": 0.3784885522165437
        }
    ], 
    "<com.flowpowered.react.engine.DynamicsWorld: int getNbContactManifolds()>": [
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: int getNumContactManifolds()>": 0.5547619047619047
        }, 
        {
            "<Catalano.Core.Structs.BinaryHeap: int size()>": 0.5547619047619047
        }, 
        {
            "<Catalano.Math.SparseArray: int size()>": 0.5547619047619047
        }, 
        {
            "<boofcv.alg.feature.detdesc.DetectDescribeSurfPlanar: int getNumberOfFeatures()>": 0.5547619047619047
        }, 
        {
            "<boofcv.abst.feature.detect.interest.WrapFPtoInterestPoint: int getNumberOfFeatures()>": 0.5547619047619047
        }
    ], 
    "<com.flowpowered.react.collision.broadphase.PairManager: boolean removePair(int,int)>": [
        {
            "<net.smert.jreactphysics3d.collision.broadphase.PairManager: net.smert.jreactphysics3d.collision.broadphase.BodyPair addPair(net.smert.jreactphysics3d.body.CollisionBody,net.smert.jreactphysics3d.body.CollisionBody)>": 0.49093115080652217
        }, 
        {
            "<net.smert.jreactphysics3d.collision.broadphase.PairManager: void removePairWithHashValue(int,int,int,int)>": 0.4897773041326438
        }, 
        {
            "<net.smert.jreactphysics3d.collision.broadphase.PairManager: boolean removePair(int,int)>": 0.46812307492904764
        }, 
        {
            "<net.smert.jreactphysics3d.collision.broadphase.PairManager: net.smert.jreactphysics3d.collision.broadphase.BodyPair findPair(int,int)>": 0.4642211328034289
        }, 
        {
            "<net.smert.jreactphysics3d.collision.broadphase.PairManager: int computeHashBodies(int,int)>": 0.44959121490252
        }
    ], 
    "<com.flowpowered.react.constraint.SliderJoint: void setMinTranslationLimit(float)>": [
        {
            "<org.jbox2d.dynamics.joints.PrismaticJoint: void setLimits(float,float)>": 0.3097100881639847
        }, 
        {
            "<org.jbox2d.dynamics.joints.RevoluteJoint: void setLimits(float,float)>": 0.3097100881639847
        }, 
        {
            "<net.smert.jreactphysics3d.constraint.SliderJoint: void setMaxTranslationLimit(float)>": 0.30303392927942496
        }, 
        {
            "<net.smert.jreactphysics3d.constraint.SliderJoint: void setMinTranslationLimit(float)>": 0.30303392927942496
        }, 
        {
            "<boofcv.alg.tracker.klt.KltTracker: boolean isFullyInside(float,float)>": 0.29388140038189237
        }
    ], 
    "<com.flowpowered.react.engine.DynamicsWorld: void destroyJoint(com.flowpowered.react.constraint.Joint)>": [
        {
            "<boofcv.demonstrations.tracker.VideoTrackerObjectQuadApp: void process(boofcv.io.image.SimpleImageSequence)>": 0.1379157746946468
        }, 
        {
            "<boofcv.demonstrations.fiducial.FiducialTrackerApp: void process(boofcv.io.image.SimpleImageSequence)>": 0.1301247697001079
        }, 
        {
            "<boofcv.alg.feature.detect.interest.GeneralFeatureDetector: void <init>(boofcv.abst.feature.detect.intensity.GeneralFeatureIntensity,boofcv.abst.feature.detect.extract.NonMaxSuppression)>": 0.12691449249384246
        }, 
        {
            "<Catalano.Imaging.Filters.GrayscaleToRGB: void applyInPlace(Catalano.Imaging.FastBitmap)>": 0.12302954175521849
        }, 
        {
            "<boofcv.io.jcodec.JCodecSimplified: void setLoop(boolean)>": 0.12213283008772491
        }
    ], 
    "<com.flowpowered.react.collision.broadphase.PairManager: com.flowpowered.react.Utilities$IntPair sortIDs(int,int)>": [
        {
            "<net.coobird.thumbnailator.geometry.Positions$9: java.awt.Point calculate(int,int,int,int,int,int,int,int)>": 0.3372638371018941
        }, 
        {
            "<boofcv.alg.misc.PixelMath: void plus_A(int[],int,int,int,int,int,int[],int,int,int,int)>": 0.33678908251612105
        }, 
        {
            "<boofcv.alg.misc.PixelMath: void minus_B(int[],int,int,int,int,int,int[],int,int,int,int)>": 0.33678908251612105
        }, 
        {
            "<boofcv.alg.misc.PixelMath: void minus_A(int[],int,int,int,int,int,int[],int,int,int,int)>": 0.33678908251612105
        }, 
        {
            "<boofcv.misc.CircularIndex: int distanceP(int,int,int)>": 0.33540254469936237
        }
    ], 
    "<com.flowpowered.react.collision.narrowphase.EPA.EPAAlgorithm: int isOriginInTetrahedron(com.flowpowered.react.math.Vector3,com.flowpowered.react.math.Vector3,com.flowpowered.react.math.Vector3,com.flowpowered.react.math.Vector3)>": [
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.EPA.EPAAlgorithm: int isOriginInTetrahedron(net.smert.jreactphysics3d.mathematics.Vector3,net.smert.jreactphysics3d.mathematics.Vector3,net.smert.jreactphysics3d.mathematics.Vector3,net.smert.jreactphysics3d.mathematics.Vector3)>": 0.315959604745829
        }, 
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.EPA.EPAAlgorithm: boolean computePenetrationDepthAndContactPoints(net.smert.jreactphysics3d.collision.shapes.CollisionShape,net.smert.jreactphysics3d.mathematics.Transform,net.smert.jreactphysics3d.collision.shapes.CollisionShape,net.smert.jreactphysics3d.mathematics.Transform,net.smert.jreactphysics3d.constraint.ContactPointInfo,net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex)>": 0.2434189687591803
        }, 
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.EPA.TriangleEPA: boolean isClosestPointInternalToTriangle()>": 0.2217804521150138
        }, 
        {
            "<Catalano.Math.Geometry.Line: boolean isHorizontal()>": 0.20511965032708535
        }, 
        {
            "<net.smert.jreactphysics3d.collision.shapes.CylinderShape: boolean isEqualTo(net.smert.jreactphysics3d.collision.shapes.CollisionShape)>": 0.20145564436150948
        }
    ], 
    "<com.flowpowered.react.collision.shape.ConvexMeshShape: void <init>(com.flowpowered.react.collision.shape.ConvexMeshShape)>": [
        {
            "<org.box2d.proto.Box2D$PbWorld: void writeTo(com.google.protobuf.CodedOutputStream)>": 0.2405003159393564
        }, 
        {
            "<boofcv.alg.feature.detect.interest.UnrollSiftScaleSpaceGradient: void <init>(boofcv.alg.feature.detect.interest.SiftScaleSpace)>": 0.23445078203346342
        }, 
        {
            "<boofcv.alg.fiducial.calib.squares.SquareGridTools: void transpose(boofcv.alg.fiducial.calib.squares.SquareGrid)>": 0.23082747336055065
        }, 
        {
            "<org.dyn4j.dynamics.World: boolean isEmpty()>": 0.2308122074172531
        }, 
        {
            "<boofcv.alg.geo.calibration.Zhang99OptimizationFunction: void <init>(boofcv.alg.geo.calibration.Zhang99ParamAll,java.util.List,java.util.List)>": 0.23020731264528543
        }
    ], 
    "<com.flowpowered.react.engine.ContactSolver: void computeFrictionVectors(com.flowpowered.react.math.Vector3,com.flowpowered.react.engine.ContactSolver$ContactManifoldSolver)>": [
        {
            "<boofcv.factory.background.ConfigBackgroundGaussian: void checkValidity()>": 0.07939724142980051
        }, 
        {
            "<boofcv.factory.background.ConfigBackgroundBasic: void checkValidity()>": 0.07496679850518696
        }, 
        {
            "<boofcv.alg.background.stationary.BackgroundStationaryBasic: void <init>(float,float,boofcv.struct.image.ImageType)>": 0.06674214607648715
        }, 
        {
            "<boofcv.alg.background.moving.BackgroundMovingBasic: void <init>(float,float,boofcv.struct.distort.PointTransformModel_F32,boofcv.struct.image.ImageType)>": 0.06426441952702037
        }, 
        {
            "<org.jbox2d.common.MathUtils: float fastAbs(float)>": 0.06248020308162325
        }
    ], 
    "<com.flowpowered.react.collision.broadphase.SweepAndPruneAlgorithm$BoxAABB: boolean equals(java.lang.Object)>": [
        {
            "<boofcv.alg.fiducial.calib.chess.ChessboardPolygonHelper: boolean filterContour(java.util.List,boolean,boolean)>": 0.2604411208028992
        }, 
        {
            "<org.dyn4j.dynamics.contact.ContactPointId: boolean equals(java.lang.Object)>": 0.2589936803182926
        }, 
        {
            "<org.dyn4j.collision.TypeFilter: boolean isAllowed(org.dyn4j.collision.Filter)>": 0.25517994847732095
        }, 
        {
            "<org.dyn4j.collision.narrowphase.SingleTypedFallbackCondition: boolean equals(java.lang.Object)>": 0.25370161776104405
        }, 
        {
            "<boofcv.demonstrations.sfm.d2.ImageMotionInfoPanel: boolean resetRequested()>": 0.25253852760572115
        }
    ], 
    "<com.flowpowered.react.constraint.SliderJoint: void initBeforeSolve(com.flowpowered.react.constraint.ConstraintSolver$ConstraintSolverData)>": [
        {
            "<org.jbox2d.common.Vec3: void crossToOutUnsafe(org.jbox2d.common.Vec3,org.jbox2d.common.Vec3,org.jbox2d.common.Vec3)>": 0.20340203386959607
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector2: net.smert.jreactphysics3d.mathematics.Vector2 normalize()>": 0.20302564917525526
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: boolean isUnit()>": 0.2029624395681535
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: boolean isZero()>": 0.2029624395681535
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector2: net.smert.jreactphysics3d.mathematics.Vector2 setUnitOrthogonal()>": 0.20242798877984583
        }
    ], 
    "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 multiply(com.flowpowered.react.math.Matrix4x4,float)>": [
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector3 toVector3()>": 0.4363350945562784
        }, 
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector4 Subtract(Catalano.Math.Vector4,Catalano.Math.Vector4)>": 0.4202872090529024
        }, 
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector4 Multiply(Catalano.Math.Vector4,Catalano.Math.Vector4)>": 0.4202872090529024
        }, 
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector4 Divide(Catalano.Math.Vector4,Catalano.Math.Vector4)>": 0.4202872090529024
        }, 
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector4 Add(Catalano.Math.Vector4,Catalano.Math.Vector4)>": 0.4202872090529024
        }
    ], 
    "<com.flowpowered.react.constraint.SliderJoint: float getTranslation()>": [
        {
            "<org.jbox2d.dynamics.contacts.Contact: float mixFriction(float,float)>": 0.05732952372748246
        }, 
        {
            "<org.jbox2d.common.Settings: float mixFriction(float,float)>": 0.05732952372748246
        }, 
        {
            "<org.jbox2d.common.MathUtils: float fastAbs(float)>": 0.05731153921566146
        }, 
        {
            "<Catalano.Math.Geometry.PointsCloud: void setQuadrilateralRelativeDistortionLimit(float)>": 0.057289725326282945
        }, 
        {
            "<Catalano.Statistics.DescriptiveStatistics: float Variance(float[])>": 0.05632255644007334
        }
    ], 
    "<com.flowpowered.react.math.Matrix4x4: void <init>(com.flowpowered.react.math.Matrix4x4)>": [
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector4 Abs()>": 0.5173550493131821
        }, 
        {
            "<Catalano.Math.Vector3: Catalano.Math.Vector3 Abs()>": 0.5053616934839154
        }, 
        {
            "<org.jbox2d.common.Mat22: org.jbox2d.common.Mat22 abs()>": 0.4863389547778614
        }, 
        {
            "<org.jbox2d.common.Vec2: org.jbox2d.common.Vec2 abs()>": 0.47498580456956097
        }, 
        {
            "<org.jbox2d.common.Vec2: org.jbox2d.common.Vec2 abs(org.jbox2d.common.Vec2)>": 0.45860406114756264
        }
    ], 
    "<com.flowpowered.react.math.Matrix2x2: void <init>(com.flowpowered.react.math.Matrix2x2)>": [
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector4 Abs()>": 0.42998874346016247
        }, 
        {
            "<Catalano.Math.Vector3: Catalano.Math.Vector3 Abs()>": 0.4209733485190901
        }, 
        {
            "<org.jbox2d.common.Mat22: org.jbox2d.common.Mat22 abs()>": 0.4043980675007648
        }, 
        {
            "<org.jbox2d.common.Vec2: org.jbox2d.common.Vec2 abs()>": 0.3974715815603463
        }, 
        {
            "<org.jbox2d.common.Vec2: org.jbox2d.common.Vec2 abs(org.jbox2d.common.Vec2)>": 0.3824019695597964
        }
    ], 
    "<com.flowpowered.react.math.Matrix2x2: com.flowpowered.react.math.Matrix2x2 multiply(com.flowpowered.react.math.Matrix2x2,com.flowpowered.react.math.Matrix2x2)>": [
        {
            "<Catalano.Math.Vector3: Catalano.Math.Vector3 Cross(Catalano.Math.Vector3,Catalano.Math.Vector3)>": 0.4888552057460004
        }, 
        {
            "<org.jbox2d.common.Vec3: org.jbox2d.common.Vec3 cross(org.jbox2d.common.Vec3,org.jbox2d.common.Vec3)>": 0.4888552057460004
        }, 
        {
            "<org.jbox2d.common.Mat33: org.jbox2d.common.Vec2 mul22(org.jbox2d.common.Mat33,org.jbox2d.common.Vec2)>": 0.4548293118871248
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 inverse()>": 0.45446889745030516
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 multiply(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": 0.45310271003639546
        }
    ], 
    "<com.flowpowered.react.body.RigidBody: com.flowpowered.react.math.Matrix3x3 getInertiaTensorWorld()>": [
        {
            "<Catalano.Imaging.Filters.GaussianBlur: void <init>()>": 0.006749365589450485
        }, 
        {
            "<Catalano.Imaging.Concurrent.Filters.BradleyLocalThreshold: void <init>()>": 0.006749365589450485
        }, 
        {
            "<Catalano.Imaging.Filters.CosineTransform: void <init>()>": 0.006749365589450485
        }, 
        {
            "<Catalano.Imaging.Filters.BradleyLocalThreshold: void <init>()>": 0.006749365589450485
        }, 
        {
            "<Catalano.Imaging.Filters.UnsharpMasking: void <init>()>": 0.006749365589450485
        }
    ], 
    "<com.flowpowered.react.math.Vector3: com.flowpowered.react.math.Vector3 cross(com.flowpowered.react.math.Vector3)>": [
        {
            "<Catalano.Math.Vector3: Catalano.Math.Vector3 Cross(Catalano.Math.Vector3,Catalano.Math.Vector3)>": 0.48963573438132474
        }, 
        {
            "<org.jbox2d.common.Vec3: org.jbox2d.common.Vec3 cross(org.jbox2d.common.Vec3,org.jbox2d.common.Vec3)>": 0.48963573438132474
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 inverse()>": 0.45658095289775324
        }, 
        {
            "<org.jbox2d.common.Mat33: org.jbox2d.common.Vec2 mul22(org.jbox2d.common.Mat33,org.jbox2d.common.Vec2)>": 0.4552442463304007
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 multiply(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": 0.45517986402572974
        }
    ], 
    "<com.flowpowered.react.constraint.SliderJoint$SliderJointInfo: void <init>(com.flowpowered.react.body.RigidBody,com.flowpowered.react.body.RigidBody,com.flowpowered.react.math.Vector3,com.flowpowered.react.math.Vector3,float,float)>": [
        {
            "<org.jbox2d.common.MathUtils: float clamp(float,float,float)>": 0.2235171221354723
        }, 
        {
            "<org.jbox2d.dynamics.contacts.Contact: float mixFriction(float,float)>": 0.2220225834008352
        }, 
        {
            "<org.jbox2d.common.Settings: float mixFriction(float,float)>": 0.2220225834008352
        }, 
        {
            "<net.smert.jreactphysics3d.engine.Profiler: float GetElapsedTimeSinceStart()>": 0.21737508738707562
        }, 
        {
            "<boofcv.alg.color.ColorRgb: float rgbToGray_Weighted(float,float,float)>": 0.21647958901358172
        }
    ], 
    "<com.flowpowered.react.constraint.FixedJoint: void solvePositionConstraint(com.flowpowered.react.constraint.ConstraintSolver$ConstraintSolverData)>": [
        {
            "<org.dyn4j.dynamics.World: void solveTOI(org.dyn4j.dynamics.ContinuousDetectionMode)>": 0.11722426822972767
        }, 
        {
            "<org.dyn4j.dynamics.World: boolean detect(org.dyn4j.geometry.Convex,org.dyn4j.dynamics.Body,org.dyn4j.collision.Filter,boolean,boolean,java.util.List)>": 0.1167791266366125
        }, 
        {
            "<org.dyn4j.dynamics.World: boolean detect(org.dyn4j.geometry.Convex,org.dyn4j.geometry.Transform,org.dyn4j.dynamics.Body,org.dyn4j.collision.Filter,boolean,boolean,java.util.List)>": 0.11549342692761608
        }, 
        {
            "<org.dyn4j.dynamics.World: boolean detect(org.dyn4j.geometry.Convex,org.dyn4j.geometry.Transform,org.dyn4j.dynamics.Body,boolean,java.util.List)>": 0.1146256314584041
        }, 
        {
            "<org.dyn4j.dynamics.World: boolean detect(org.dyn4j.geometry.Convex,org.dyn4j.dynamics.Body,boolean,java.util.List)>": 0.1146256314584041
        }
    ], 
    "<com.flowpowered.react.collision.shape.ConvexMeshShape: void addVertex(com.flowpowered.react.math.Vector3)>": [
        {
            "<Catalano.Math.Vector3: float getMin()>": 0.36277460987782384
        }, 
        {
            "<Catalano.Math.Vector3: float getMax()>": 0.36277460987782384
        }, 
        {
            "<boofcv.alg.distort.DistortImageOps: void updateBoundBox(boofcv.struct.distort.PixelTransform_F32,boofcv.struct.ImageRectangle_F32)>": 0.3589243120505765
        }, 
        {
            "<Catalano.Math.Vector4: boolean equals(java.lang.Object)>": 0.3479495148197861
        }, 
        {
            "<Catalano.Math.Vector3: boolean equals(java.lang.Object)>": 0.33245248309372416
        }
    ], 
    "<com.flowpowered.react.math.Vector3: int getMaxAxis()>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: int getMaxAxis()>": 0.5610028165756717
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: int getMinAxis()>": 0.5288223330847253
        }, 
        {
            "<Catalano.Math.Vector3: int getMinIndex()>": 0.5288223330847253
        }, 
        {
            "<Catalano.Math.Vector3: int getMaxIndex()>": 0.5288223330847253
        }, 
        {
            "<Catalano.Math.Vector4: int getMinIndex()>": 0.45314458791176815
        }
    ], 
    "<com.flowpowered.react.collision.shape.SphereShape: void <init>(com.flowpowered.react.collision.shape.SphereShape)>": [
        {
            "<org.jbox2d.common.Vec2: void absLocal()>": 0.2225556433377629
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 abs()>": 0.2206657948710812
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: net.smert.jreactphysics3d.mathematics.Vector3 abs()>": 0.22038743538998906
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 abs()>": 0.22011732916760235
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector2: net.smert.jreactphysics3d.mathematics.Vector2 abs()>": 0.2185634104896797
        }
    ], 
    "<com.flowpowered.react.collision.narrowphase.GJK.Simplex: void backupClosestPointInSimplex(com.flowpowered.react.math.Vector3)>": [
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: void computeDeterminants()>": 0.34644675479794707
        }, 
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: void addPoint(net.smert.jreactphysics3d.mathematics.Vector3,net.smert.jreactphysics3d.mathematics.Vector3,net.smert.jreactphysics3d.mathematics.Vector3)>": 0.34018043110602514
        }, 
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: void backupClosestPointInSimplex(net.smert.jreactphysics3d.mathematics.Vector3)>": 0.3274655365209149
        }, 
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: boolean isProperSubset(int)>": 0.3164136112430709
        }, 
        {
            "<Catalano.Imaging.Filters.ImagePyramids: void Downscale(Catalano.Imaging.FastBitmap)>": 0.3000910603166952
        }
    ], 
    "<com.flowpowered.react.constraint.HingeJoint: void warmstart(com.flowpowered.react.constraint.ConstraintSolver$ConstraintSolverData)>": [
        {
            "<net.smert.jreactphysics3d.engine.ProfileNode: boolean exitBlockOfCode()>": 0.08942297956715019
        }, 
        {
            "<net.imglib2.util.Util: int round(float)>": 0.08512908098781549
        }, 
        {
            "<org.jbox2d.particle.ParticleSystem: void solvePressure(org.jbox2d.dynamics.TimeStep)>": 0.08449921308399708
        }, 
        {
            "<org.jbox2d.dynamics.Island: void solve(org.jbox2d.dynamics.Profile,org.jbox2d.dynamics.TimeStep,org.jbox2d.common.Vec2,boolean)>": 0.08429321538097911
        }, 
        {
            "<boofcv.struct.feature.CachedSineCosine_F32: int computeIndex(float)>": 0.08426884857892328
        }
    ], 
    "<com.flowpowered.react.constraint.Joint$JointInfo: void <init>(com.flowpowered.react.body.RigidBody,com.flowpowered.react.body.RigidBody,com.flowpowered.react.constraint.Joint$JointType)>": [
        {
            "<boofcv.factory.geo.ConfigHomography: void <init>(boolean)>": 0.07386462100653643
        }, 
        {
            "<boofcv.gui.VideoProcessAppBase: void stopWorker()>": 0.07062191956730372
        }, 
        {
            "<boofcv.gui.DepthVideoAppBase: void stopWorker()>": 0.07062191956730372
        }, 
        {
            "<boofcv.gui.StereoVideoAppBase: void stopWorker()>": 0.07062191956730372
        }, 
        {
            "<Catalano.Imaging.Concurrent.Filters.SobelEdgeDetector: void <init>()>": 0.06890954328648981
        }
    ], 
    "<com.flowpowered.react.math.Vector2: com.flowpowered.react.math.Vector2 getOneUnitOrthogonalVector()>": [
        {
            "<Catalano.Math.Vector3: float Norm()>": 0.45811523168204044
        }, 
        {
            "<boofcv.alg.weights.WeightDistanceSqGaussian_F32: float weight(float)>": 0.4483458156121026
        }, 
        {
            "<boofcv.alg.feature.detect.intensity.impl.ImplShiTomasiCorner_F32: float computeIntensity()>": 0.44744869895422773
        }, 
        {
            "<boofcv.alg.feature.detect.intensity.impl.ImplShiTomasiCornerWeighted_F32: float computeResponse()>": 0.44744869895422773
        }, 
        {
            "<Catalano.Math.Vector4: float Norm()>": 0.4472583566319539
        }
    ], 
    "<com.flowpowered.react.collision.RayCaster: boolean intersects(com.flowpowered.react.math.Vector3,com.flowpowered.react.math.Vector3,com.flowpowered.react.collision.shape.CollisionShape,com.flowpowered.react.math.Transform,com.flowpowered.react.math.Vector3)>": [
        {
            "<boofcv.abst.sfm.d3.WrapVisOdomPixelDepthPnP: boolean isFault()>": 0.24531315053718647
        }, 
        {
            "<boofcv.abst.sfm.d3.VisOdomPixelDepthPnP_to_DepthVisualOdometry: boolean isFault()>": 0.24531315053718647
        }, 
        {
            "<boofcv.io.javacv.JavaCVVideoImageSequence: boolean hasNext()>": 0.24531315053718647
        }, 
        {
            "<net.imglib2.type.volatiles.AbstractVolatileRealType: boolean valueEquals(net.imglib2.type.volatiles.AbstractVolatileRealType)>": 0.24216537535312338
        }, 
        {
            "<net.imglib2.type.volatiles.AbstractVolatileNumericType: boolean valueEquals(net.imglib2.type.volatiles.AbstractVolatileNumericType)>": 0.24216537535312338
        }
    ], 
    "<com.flowpowered.react.constraint.SliderJoint: void solvePositionConstraint(com.flowpowered.react.constraint.ConstraintSolver$ConstraintSolverData)>": [
        {
            "<boofcv.abst.feature.detect.extract.NonMaxLimiter$LocalExtreme: float getValue()>": 0.1335520916555426
        }, 
        {
            "<org.jbox2d.common.MathUtils: float abs(float)>": 0.13227048961593307
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector2: boolean isUnit()>": 0.13116573887161465
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector2: boolean isZero()>": 0.13116573887161465
        }, 
        {
            "<org.jbox2d.common.Vec3: void crossToOutUnsafe(org.jbox2d.common.Vec3,org.jbox2d.common.Vec3,org.jbox2d.common.Vec3)>": 0.13075736209157826
        }
    ], 
    "<com.flowpowered.react.engine.Island: void addContactManifold(com.flowpowered.react.engine.ContactManifold)>": [
        {
            "<Catalano.Imaging.Tools.BlobDetection: void ShuffleColor()>": 0.3389044739320369
        }, 
        {
            "<Catalano.Statistics.Kernels.Polynomial: void setDegree(int)>": 0.32202941451867023
        }, 
        {
            "<Catalano.Statistics.Kernels.NormalizedPolynomial: void setDegree(int)>": 0.32202941451867023
        }, 
        {
            "<Catalano.Imaging.Concurrent.Filters.FastVariance: void setRadius(int)>": 0.32202941451867023
        }, 
        {
            "<Catalano.Imaging.Concurrent.Filters.Minimum: void setRadius(int)>": 0.32202941451867023
        }
    ], 
    "<com.flowpowered.react.math.Matrix2x2: int hashCode()>": [
        {
            "<net.smert.jreactphysics3d.collision.BodyIndexPair: int hashCode()>": 0.3689007215729643
        }, 
        {
            "<net.smert.jreactphysics3d.collision.shapes.CollisionShape: int hashCode()>": 0.3538254133993859
        }, 
        {
            "<boofcv.alg.feature.describe.DescribeSiftCommon: int getDescriptorLength()>": 0.33927307554618297
        }, 
        {
            "<boofcv.alg.fiducial.square.DetectFiducialSquareBinary: int getTotalGridElements()>": 0.33481327372611813
        }, 
        {
            "<boofcv.app.CreateFiducialSquareBinary: int numberOfElements()>": 0.33481327372611813
        }
    ], 
    "<com.flowpowered.react.engine.Island: void <init>(int,int,int)>": [
        {
            "<boofcv.core.image.border.ImageBorderValue$Value_I: void setOutside(int,int,int)>": 0.6880637252488764
        }, 
        {
            "<org.dyn4j.examples.ExampleJOGL: void reshape(com.jogamp.opengl.GLAutoDrawable,int,int,int,int)>": 0.6804543893755174
        }, 
        {
            "<net.coobird.thumbnailator.geometry.Positions$1: java.awt.Point calculate(int,int,int,int,int,int,int,int)>": 0.6668430182401069
        }, 
        {
            "<net.coobird.thumbnailator.geometry.Coordinate: java.awt.Point calculate(int,int,int,int,int,int,int,int)>": 0.6452420786660114
        }, 
        {
            "<Catalano.Imaging.Tools.IntegralImage: int getInternalData(int,int)>": 0.6432160256279871
        }
    ], 
    "<com.flowpowered.react.collision.narrowphase.GJK.Simplex: boolean isSubset(int,int)>": [
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: boolean overlap(int,int)>": 0.9448928917162578
        }, 
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: boolean isSubset(int,int)>": 0.9448928917162578
        }, 
        {
            "<Catalano.Imaging.Texture.BinaryPattern.UniformLocalBinaryPattern: boolean isUniform(int)>": 0.7374439229204929
        }, 
        {
            "<Catalano.Imaging.Shapes.IntRectangle: boolean isOverlaped(int,int,int,int)>": 0.710826686715408
        }, 
        {
            "<net.coobird.thumbnailator.util.exif.IfdStructure: boolean isOffset()>": 0.6550822017253819
        }
    ], 
    "<com.flowpowered.react.math.Transform: java.lang.String toString()>": [
        {
            "<net.smert.jreactphysics3d.collision.shapes.CollisionShape: java.lang.String toString()>": 0.5324518530506555
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Transform: java.lang.String toString()>": 0.5024518530506554
        }, 
        {
            "<boofcv.struct.feature.Match: java.lang.String toString()>": 0.5019811111776067
        }, 
        {
            "<boofcv.struct.geo.TrifocalTensor: java.lang.String toString()>": 0.4707680976004914
        }, 
        {
            "<org.jbox2d.common.Transform: java.lang.String toString()>": 0.4663125007418614
        }
    ], 
    "<com.flowpowered.react.math.Vector2: boolean isZero()>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: boolean isZero()>": 0.4837922700460329
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector2: boolean isZero()>": 0.47839361992080887
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: boolean isUnit()>": 0.47766648937904266
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 inverse()>": 0.4774074240653391
        }, 
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.47439787084242996
        }
    ], 
    "<com.flowpowered.react.constraint.SliderJoint: void setMaxTranslationLimit(float)>": [
        {
            "<org.jbox2d.dynamics.joints.PrismaticJoint: void setLimits(float,float)>": 0.3097100881639847
        }, 
        {
            "<org.jbox2d.dynamics.joints.RevoluteJoint: void setLimits(float,float)>": 0.3097100881639847
        }, 
        {
            "<net.smert.jreactphysics3d.constraint.SliderJoint: void setMaxTranslationLimit(float)>": 0.30303392927942496
        }, 
        {
            "<net.smert.jreactphysics3d.constraint.SliderJoint: void setMinTranslationLimit(float)>": 0.30303392927942496
        }, 
        {
            "<boofcv.alg.tracker.klt.KltTracker: boolean isFullyInside(float,float)>": 0.29388140038189237
        }
    ], 
    "<com.flowpowered.react.math.Transform: com.flowpowered.react.math.Transform set(com.flowpowered.react.math.Transform)>": [
        {
            "<Catalano.Imaging.Filters.GaussianBlur: void <init>()>": 0.011543927413490251
        }, 
        {
            "<Catalano.Imaging.Concurrent.Filters.BradleyLocalThreshold: void <init>()>": 0.011543927413490251
        }, 
        {
            "<Catalano.Imaging.Filters.CosineTransform: void <init>()>": 0.011543927413490251
        }, 
        {
            "<Catalano.Imaging.Filters.BradleyLocalThreshold: void <init>()>": 0.011543927413490251
        }, 
        {
            "<Catalano.Imaging.Filters.UnsharpMasking: void <init>()>": 0.011543927413490251
        }
    ], 
    "<com.flowpowered.react.collision.shape.SphereShape: com.flowpowered.react.math.Vector3 getLocalSupportPointWithoutMargin(com.flowpowered.react.math.Vector3)>": [
        {
            "<org.jbox2d.testbed.tests.DominoTower: org.jbox2d.common.Vec2 getDefaultCameraPos()>": 0.061736391916182895
        }, 
        {
            "<org.jbox2d.testbed.tests.BulletTest: org.jbox2d.common.Vec2 getDefaultCameraPos()>": 0.061736391916182895
        }, 
        {
            "<org.jbox2d.testbed.framework.TestbedTest: org.jbox2d.common.Vec2 getDefaultCameraPos()>": 0.061736391916182895
        }, 
        {
            "<org.jbox2d.testbed.tests.BlobTest4: org.jbox2d.common.Vec2 getDefaultCameraPos()>": 0.061736391916182895
        }, 
        {
            "<org.jbox2d.testbed.tests.CircleStress: org.jbox2d.common.Vec2 getDefaultCameraPos()>": 0.061736391916182895
        }
    ], 
    "<com.flowpowered.react.collision.shape.ConvexMeshShape: void computeLocalInertiaTensor(com.flowpowered.react.math.Matrix3x3,float)>": [
        {
            "<org.jbox2d.common.MathUtils: float clamp(float,float,float)>": 0.373394322203426
        }, 
        {
            "<org.jbox2d.collision.shapes.PolygonShape: boolean raycast(org.jbox2d.collision.RayCastOutput,org.jbox2d.collision.RayCastInput,org.jbox2d.common.Transform,int)>": 0.3728637236214649
        }, 
        {
            "<org.jbox2d.dynamics.contacts.Contact: float mixFriction(float,float)>": 0.3727616699369982
        }, 
        {
            "<org.jbox2d.common.Settings: float mixFriction(float,float)>": 0.3727616699369982
        }, 
        {
            "<org.jbox2d.collision.shapes.EdgeShape: boolean raycast(org.jbox2d.collision.RayCastOutput,org.jbox2d.collision.RayCastInput,org.jbox2d.common.Transform,int)>": 0.37052766079503824
        }
    ], 
    "<com.flowpowered.react.constraint.FixedJoint: void warmstart(com.flowpowered.react.constraint.ConstraintSolver$ConstraintSolverData)>": [
        {
            "<org.dyn4j.collision.manifold.IndexedManifoldPointId: boolean equals(java.lang.Object)>": 0.07918292535133878
        }, 
        {
            "<boofcv.struct.image.ImageBase: boolean isInBounds(int,int)>": 0.07758876103720351
        }, 
        {
            "<boofcv.struct.flow.ImageFlow: boolean isInBounds(int,int)>": 0.07758876103720351
        }, 
        {
            "<boofcv.struct.feature.MatrixOfList: boolean isInBounds(int,int)>": 0.07758876103720351
        }, 
        {
            "<Catalano.Imaging.Filters.VerticalRunLengthSmoothing: void applyInPlace(Catalano.Imaging.FastBitmap)>": 0.07755789692106416
        }
    ], 
    "<com.flowpowered.react.collision.broadphase.SweepAndPruneAlgorithm: void updateObject(com.flowpowered.react.body.CollisionBody,com.flowpowered.react.collision.shape.AABB)>": [
        {
            "<net.smert.jreactphysics3d.collision.broadphase.SweepAndPruneAlgorithm: void updateObjectIntegerAABB(net.smert.jreactphysics3d.body.CollisionBody,net.smert.jreactphysics3d.collision.broadphase.AABBInt)>": 0.35281308843425
        }, 
        {
            "<net.smert.jreactphysics3d.collision.broadphase.SweepAndPruneAlgorithm: void updateObject(net.smert.jreactphysics3d.body.CollisionBody,net.smert.jreactphysics3d.collision.shapes.AABB)>": 0.3524536200785618
        }, 
        {
            "<net.smert.jreactphysics3d.collision.broadphase.SweepAndPruneAlgorithm: void removeObject(net.smert.jreactphysics3d.body.CollisionBody)>": 0.3449787320101853
        }, 
        {
            "<net.smert.jreactphysics3d.collision.broadphase.SweepAndPruneAlgorithm: void addObject(net.smert.jreactphysics3d.body.CollisionBody,net.smert.jreactphysics3d.collision.shapes.AABB)>": 0.3206324214562553
        }, 
        {
            "<Catalano.Core.IntRange: boolean IsOverlapping(Catalano.Core.IntRange)>": 0.2941009057855244
        }
    ], 
    "<com.flowpowered.react.collision.narrowphase.EPA.TriangleEPA: com.flowpowered.react.collision.narrowphase.EPA.EdgeEPA getAdjacentEdge(int)>": [
        {
            "<boofcv.core.image.GImageGrayDistorted: void set(int,int,java.lang.Number)>": 0.4185349332601275
        }, 
        {
            "<boofcv.core.image.border.ImageBorderValue$Value_I: void setOutside(int,int,int)>": 0.4083636416084332
        }, 
        {
            "<org.dyn4j.examples.ExampleJOGL: void reshape(com.jogamp.opengl.GLAutoDrawable,int,int,int,int)>": 0.40226116240759324
        }, 
        {
            "<net.coobird.thumbnailator.geometry.Positions$1: java.awt.Point calculate(int,int,int,int,int,int,int,int)>": 0.39309148182397186
        }, 
        {
            "<Catalano.Imaging.Tools.IntegralImage: int getInternalData(int,int)>": 0.3816922496069327
        }
    ], 
    "<com.flowpowered.react.math.Vector3: com.flowpowered.react.math.Vector3 getOneUnitOrthogonalVector()>": [
        {
            "<Catalano.Math.Vector3: float Norm()>": 0.4872151745437106
        }, 
        {
            "<Catalano.Math.Vector3: float Normalize()>": 0.47619289996771824
        }, 
        {
            "<Catalano.Math.Vector4: float Norm()>": 0.4757486834590872
        }, 
        {
            "<Catalano.Math.Vector4: float Normalize()>": 0.4664975778671813
        }, 
        {
            "<boofcv.alg.feature.detect.intensity.impl.ImplShiTomasiCorner_F32: float computeIntensity()>": 0.4608417152226641
        }
    ], 
    "<com.flowpowered.react.collision.BroadPhasePair: boolean isSmallerThan(com.flowpowered.react.collision.BroadPhasePair)>": [
        {
            "<boofcv.abst.sfm.d3.WrapVisOdomPixelDepthPnP: boolean isFault()>": 0.4338373554509977
        }, 
        {
            "<boofcv.abst.sfm.d3.VisOdomPixelDepthPnP_to_DepthVisualOdometry: boolean isFault()>": 0.4338373554509977
        }, 
        {
            "<boofcv.io.javacv.JavaCVVideoImageSequence: boolean hasNext()>": 0.4338373554509977
        }, 
        {
            "<net.imglib2.KDTree$KDTreeCursor: boolean hasNext()>": 0.4001190461197689
        }, 
        {
            "<boofcv.struct.flow.ImageFlow$D: boolean isValid()>": 0.4001190461197689
        }
    ], 
    "<com.flowpowered.react.engine.Timer: float computeInterpolationFactor()>": [
        {
            "<net.smert.jreactphysics3d.engine.Timer: float computeInterpolationFactor()>": 0.4727047146401986
        }, 
        {
            "<net.imglib2.type.numeric.complex.AbstractComplexType: float getPowerFloat()>": 0.3972456578887348
        }, 
        {
            "<net.imglib2.type.numeric.complex.AbstractComplexType: float getPhaseFloat()>": 0.3722135034354335
        }, 
        {
            "<Catalano.Math.ComplexNumber: void Pow(double)>": 0.3562052976756162
        }, 
        {
            "<Catalano.Statistics.Distributions.GammaDistribution: double Entropy()>": 0.35305181261971597
        }
    ], 
    "<com.flowpowered.react.engine.Material: void <init>(com.flowpowered.react.engine.Material)>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 abs()>": 0.3247295605498648
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 abs()>": 0.32391829193684735
        }, 
        {
            "<org.jbox2d.common.Vec2: void absLocal()>": 0.3238221377459168
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: net.smert.jreactphysics3d.mathematics.Vector3 abs()>": 0.322554433773684
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector2: net.smert.jreactphysics3d.mathematics.Vector2 abs()>": 0.318024693216996
        }
    ], 
    "<com.flowpowered.react.collision.broadphase.SweepAndPruneAlgorithm: void updateObjectIntegerAABB(com.flowpowered.react.body.CollisionBody,com.flowpowered.react.collision.broadphase.SweepAndPruneAlgorithm$AABBInt)>": [
        {
            "<net.smert.jreactphysics3d.collision.broadphase.SweepAndPruneAlgorithm: void updateObjectIntegerAABB(net.smert.jreactphysics3d.body.CollisionBody,net.smert.jreactphysics3d.collision.broadphase.AABBInt)>": 0.3535529118015526
        }, 
        {
            "<net.smert.jreactphysics3d.collision.broadphase.SweepAndPruneAlgorithm: void updateObject(net.smert.jreactphysics3d.body.CollisionBody,net.smert.jreactphysics3d.collision.shapes.AABB)>": 0.35317707703581636
        }, 
        {
            "<net.smert.jreactphysics3d.collision.broadphase.SweepAndPruneAlgorithm: void removeObject(net.smert.jreactphysics3d.body.CollisionBody)>": 0.34545289279947744
        }, 
        {
            "<net.smert.jreactphysics3d.collision.broadphase.SweepAndPruneAlgorithm: void addObject(net.smert.jreactphysics3d.body.CollisionBody,net.smert.jreactphysics3d.collision.shapes.AABB)>": 0.320812286739842
        }, 
        {
            "<Catalano.Core.IntRange: boolean IsOverlapping(Catalano.Core.IntRange)>": 0.2948284725029738
        }
    ], 
    "<com.flowpowered.react.math.Matrix4x4: float get(int,int)>": [
        {
            "<boofcv.alg.weights.WeightPixelUniform_F32: float weight(int,int)>": 0.5495285270308691
        }, 
        {
            "<boofcv.core.image.border.ImageBorderValue$Value_F32: float getOutside(int,int)>": 0.5495285270308691
        }, 
        {
            "<boofcv.core.image.border.ImageBorderValue$Value_F32: void setOutside(int,int,float)>": 0.5183933767987647
        }, 
        {
            "<boofcv.core.image.border.ImageBorderValue$Value_I: void setOutside(int,int,int)>": 0.5073434279468665
        }, 
        {
            "<org.dyn4j.examples.ExampleJOGL: void reshape(com.jogamp.opengl.GLAutoDrawable,int,int,int,int)>": 0.500393775723844
        }
    ], 
    "<com.flowpowered.react.math.Vector3: float get(int)>": [
        {
            "<boofcv.alg.weights.WeightPixelUniform_F32: float weight(int,int)>": 0.3849655099950021
        }, 
        {
            "<boofcv.core.image.border.ImageBorderValue$Value_F32: float getOutside(int,int)>": 0.3849655099950021
        }, 
        {
            "<boofcv.alg.weights.WeightPixelUniform_F32: float weightIndex(int)>": 0.37854678927186225
        }, 
        {
            "<boofcv.alg.feature.detect.intensity.impl.ImplFastHelper_F32: void setThresholds(int)>": 0.37679507722435535
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 abs()>": 0.36119876435935583
        }
    ], 
    "<com.flowpowered.react.collision.narrowphase.EPA.TriangleEPA: boolean computeSilhouette(com.flowpowered.react.math.Vector3[],int,com.flowpowered.react.collision.narrowphase.EPA.TrianglesStore)>": [
        {
            "<Catalano.Imaging.Texture.BinaryPattern.UniformLocalBinaryPattern: boolean isUniform(int)>": 0.2928650132225856
        }, 
        {
            "<Catalano.Core.IntRange: boolean IsOverlapping(Catalano.Core.IntRange)>": 0.2746633288820785
        }, 
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: boolean overlap(int,int)>": 0.2667754244517183
        }, 
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: boolean isSubset(int,int)>": 0.2667754244517183
        }, 
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: boolean isAffinelyDependent()>": 0.2642394574217407
        }
    ], 
    "<com.flowpowered.react.body.Body: boolean isSmallerThan(com.flowpowered.react.body.Body)>": [
        {
            "<Catalano.Core.IntRange: boolean IsOverlapping(Catalano.Core.IntRange)>": 0.5725764884716898
        }, 
        {
            "<Catalano.Imaging.Texture.BinaryPattern.UniformLocalBinaryPattern: boolean isUniform(int)>": 0.5646786348748001
        }, 
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: boolean isFull()>": 0.5639875819199924
        }, 
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: boolean isEmpty()>": 0.5639875819199924
        }, 
        {
            "<Catalano.Core.Structs.DoubleArrayList: boolean isEmpty()>": 0.5639875819199924
        }
    ], 
    "<com.flowpowered.react.collision.narrowphase.GJK.Simplex: boolean isAffinelyDependent()>": [
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: boolean isAffinelyDependent()>": 0.5798827705734395
        }, 
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: boolean isValidSubset(int)>": 0.37128408804537183
        }, 
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: boolean isProperSubset(int)>": 0.37043582599638974
        }, 
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: boolean computeClosestPoint(net.smert.jreactphysics3d.mathematics.Vector3)>": 0.3519864843092549
        }, 
        {
            "<Catalano.Core.IntRange: boolean IsOverlapping(Catalano.Core.IntRange)>": 0.3473385122541693
        }
    ], 
    "<com.flowpowered.react.collision.shape.AABB: com.flowpowered.react.math.Vector3 getCenter()>": [
        {
            "<net.smert.jreactphysics3d.engine.Material: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.Clahe: int roundPositive(float)>": 0.013638618139749524
        }, 
        {
            "<Catalano.Imaging.Filters.GaussianBlur: void <init>()>": 0.010309826235529031
        }, 
        {
            "<Catalano.Imaging.Concurrent.Filters.BradleyLocalThreshold: void <init>()>": 0.010309826235529031
        }, 
        {
            "<Catalano.Imaging.Filters.CosineTransform: void <init>()>": 0.010309826235529031
        }
    ], 
    "<com.flowpowered.react.engine.ContactSolver: void storeImpulses()>": [
        {
            "<boofcv.factory.background.FactoryBackgroundModel: boofcv.alg.background.stationary.BackgroundStationaryGaussian stationaryGaussian(boofcv.factory.background.ConfigBackgroundGaussian,boofcv.struct.image.ImageType)>": 0.2345000896962339
        }, 
        {
            "<boofcv.factory.background.FactoryBackgroundModel: boofcv.alg.background.stationary.BackgroundStationaryBasic stationaryBasic(boofcv.factory.background.ConfigBackgroundBasic,boofcv.struct.image.ImageType)>": 0.2258065298104055
        }, 
        {
            "<boofcv.factory.background.FactoryBackgroundModel: boofcv.alg.background.moving.BackgroundMovingGaussian movingGaussian(boofcv.factory.background.ConfigBackgroundGaussian,boofcv.struct.distort.PointTransformModel_F32,boofcv.struct.image.ImageType)>": 0.2246241873735716
        }, 
        {
            "<net.smert.jreactphysics3d.engine.ContactSolver: void storeImpulses()>": 0.22369809448717556
        }, 
        {
            "<boofcv.alg.interpolate.impl.ImplPolynomialPixel_F32: void <init>(int,float,float)>": 0.21227506139374386
        }
    ], 
    "<com.flowpowered.react.engine.OverlappingPair: void <init>(com.flowpowered.react.body.CollisionBody,com.flowpowered.react.body.CollisionBody)>": [
        {
            "<org.dyn4j.sandbox.Sandbox: void init(com.jogamp.opengl.GLAutoDrawable)>": 0.09412949973325982
        }, 
        {
            "<org.dyn4j.examples.ExampleJOGL: void init(com.jogamp.opengl.GLAutoDrawable)>": 0.09265985107372357
        }, 
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.09149826462221809
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.TestbedMain: void main(java.lang.String[])>": 0.08469895538599198
        }, 
        {
            "<boofcv.gui.d3.Polygon3DSequenceViewer: void <init>()>": 0.08108116311237161
        }
    ], 
    "<com.flowpowered.react.engine.Timer: void nextStep()>": [
        {
            "<boofcv.alg.geo.pose.P3PFinsterwalder: boolean process(georegression.struct.point.Point2D_F64,georegression.struct.point.Point2D_F64,georegression.struct.point.Point2D_F64,double,double,double)>": 0.3482187168301772
        }, 
        {
            "<Catalano.Imaging.ActiveContour.Ovuscule.Ovuscule: void setNodes(Catalano.Imaging.ActiveContour.Ovuscule.OvusculeSnake2DNode[])>": 0.34745214016254655
        }, 
        {
            "<Catalano.Imaging.ActiveContour.Ovuscule.Ovuscule: void <init>(Catalano.Imaging.FastBitmap,Catalano.Core.DoublePoint,Catalano.Core.DoublePoint,Catalano.Core.DoublePoint)>": 0.3473653005241575
        }, 
        {
            "<Catalano.Imaging.ActiveContour.Ovuscule.Ovuscule: void <init>(Catalano.Imaging.FastBitmap,double,double,double,double,double,double)>": 0.3470956796426372
        }, 
        {
            "<Catalano.Statistics.Distributions.GammaDistribution: double Entropy()>": 0.34666209062395315
        }
    ], 
    "<com.flowpowered.react.collision.narrowphase.GJK.Simplex: boolean isEmpty()>": [
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: boolean isFull()>": 0.6797385620915033
        }, 
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: boolean isEmpty()>": 0.6797385620915033
        }, 
        {
            "<Catalano.Core.Structs.DoubleArrayList: boolean isEmpty()>": 0.6797385620915033
        }, 
        {
            "<net.coobird.thumbnailator.ThumbnailParameter: boolean useOriginalImageType()>": 0.6797385620915033
        }, 
        {
            "<boofcv.struct.WrapArrayIntoList: boolean isEmpty()>": 0.6797385620915033
        }
    ], 
    "<com.flowpowered.react.engine.DynamicsWorld: void updateRigidBodiesAABB()>": [
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void updateRigidBodiesAABB()>": 0.46114205194779273
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void resetContactManifoldListsOfBodies()>": 0.45942947299337566
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void setIsSleepingEnabled(boolean)>": 0.4569573011448658
        }, 
        {
            "<net.coobird.thumbnailator.makers.ThumbnailMaker$ReadinessTracker: boolean isReady()>": 0.4176540148240625
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void resetBodiesMovementVariable()>": 0.41343149745531993
        }
    ], 
    "<com.flowpowered.react.math.Vector3: float dot(com.flowpowered.react.math.Vector3)>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: float lengthSquare()>": 0.48695478386980884
        }, 
        {
            "<Catalano.Math.Vector3: float Square()>": 0.48695478386980884
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Quaternion: float lengthSquare()>": 0.4815251472929799
        }, 
        {
            "<Catalano.Math.Vector4: float Square()>": 0.4815251472929799
        }, 
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.4810477893385923
        }
    ], 
    "<com.flowpowered.react.math.Quaternion: com.flowpowered.react.math.Quaternion subtract(com.flowpowered.react.math.Quaternion,com.flowpowered.react.math.Quaternion)>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 abs()>": 0.3849718906667029
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 abs()>": 0.3820468798027056
        }, 
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector3 toVector3()>": 0.3804639859925687
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: net.smert.jreactphysics3d.mathematics.Vector3 abs()>": 0.37927459159678634
        }, 
        {
            "<org.jbox2d.common.Vec2: void absLocal()>": 0.3784885522165437
        }
    ], 
    "<com.flowpowered.react.collision.broadphase.SweepAndPruneAlgorithm: void resizeArrays()>": [
        {
            "<boofcv.alg.enhance.EnhanceImageOps: void equalizeLocal(boofcv.struct.image.GrayU16,int,boofcv.struct.image.GrayU16,int[],int[])>": 0.18956273171131668
        }, 
        {
            "<boofcv.alg.enhance.EnhanceImageOps: void equalizeLocal(boofcv.struct.image.GrayU8,int,boofcv.struct.image.GrayU8,int[],int[])>": 0.18956273171131668
        }, 
        {
            "<boofcv.alg.filter.convolve.noborder.ConvolveImageUnrolled_S16_I16: boolean vertical(boofcv.struct.convolve.Kernel1D_I32,boofcv.struct.image.GrayS16,boofcv.struct.image.GrayI16)>": 0.17657502120526547
        }, 
        {
            "<boofcv.alg.filter.convolve.noborder.ConvolveImageUnrolled_S16_I16: boolean horizontal(boofcv.struct.convolve.Kernel1D_I32,boofcv.struct.image.GrayS16,boofcv.struct.image.GrayI16)>": 0.17657502120526547
        }, 
        {
            "<boofcv.alg.filter.convolve.noborder.ConvolveImageUnrolled_U8_I16: boolean vertical(boofcv.struct.convolve.Kernel1D_I32,boofcv.struct.image.GrayU8,boofcv.struct.image.GrayI16)>": 0.17657502120526547
        }
    ], 
    "<com.flowpowered.react.collision.shape.BoxShape: com.flowpowered.react.math.Vector3 getLocalSupportPointWithMargin(com.flowpowered.react.math.Vector3)>": [
        {
            "<org.jbox2d.testbed.perf.MathPerf: void runSinLUTTest(float)>": 0.4116358240067568
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 abs()>": 0.41094394440407994
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 abs()>": 0.4080453921797197
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 inverse()>": 0.4074061886110439
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: net.smert.jreactphysics3d.mathematics.Vector3 abs()>": 0.4052193334089166
        }
    ], 
    "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 set(com.flowpowered.react.math.Matrix4x4)>": [
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector4 Abs()>": 0.43170442542974746
        }, 
        {
            "<Catalano.Math.Vector3: Catalano.Math.Vector3 Abs()>": 0.4220634313249896
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.DebugDrawJ2D$1: java.lang.Object newColor(float,float,float,float)>": 0.40838932543783973
        }, 
        {
            "<org.jbox2d.common.Mat22: org.jbox2d.common.Mat22 abs()>": 0.40473876692485977
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 abs()>": 0.39871466507917475
        }
    ], 
    "<com.flowpowered.react.math.Transform: com.flowpowered.react.math.Transform identity()>": [
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.10565309542004245
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.TestbedMain: void main(java.lang.String[])>": 0.09780192938436515
        }, 
        {
            "<org.jbox2d.profile.BroadphasePerformanceTest: void setupTest(int)>": 0.09701066686537568
        }, 
        {
            "<org.dyn4j.sandbox.Sandbox: void init(com.jogamp.opengl.GLAutoDrawable)>": 0.0967160279446254
        }, 
        {
            "<boofcv.demonstrations.transform.pyramid.EdgeIntensitiesApp: void main(java.lang.String[])>": 0.0934309308686112
        }
    ], 
    "<com.flowpowered.react.math.Quaternion: void <init>(com.flowpowered.react.math.Quaternion)>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 abs()>": 0.5051936669215925
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 abs()>": 0.501219689125599
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: net.smert.jreactphysics3d.mathematics.Vector3 abs()>": 0.49733114603650264
        }, 
        {
            "<org.jbox2d.common.Vec2: void absLocal()>": 0.49561743676224046
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector2: net.smert.jreactphysics3d.mathematics.Vector2 abs()>": 0.48659789375978874
        }
    ], 
    "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Vector4 getColumn(int)>": [
        {
            "<boofcv.alg.interpolate.impl.ImplPolynomialPixel_F32: void <init>(int,float,float)>": 0.23339627907929986
        }, 
        {
            "<boofcv.alg.interpolate.impl.ImplPolynomialPixel_I: void <init>(int,float,float)>": 0.23339627907929986
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.DebugDrawJ2D$1: java.awt.Color newColor(float,float,float,float)>": 0.2290017577759075
        }, 
        {
            "<boofcv.struct.distort.SequencePointTransform_F32: void compute(float,float,georegression.struct.point.Point2D_F32)>": 0.22866081038310904
        }, 
        {
            "<boofcv.factory.background.FactoryBackgroundModel: boofcv.alg.background.stationary.BackgroundStationaryGaussian stationaryGaussian(boofcv.factory.background.ConfigBackgroundGaussian,boofcv.struct.image.ImageType)>": 0.2279346261211893
        }
    ], 
    "<com.flowpowered.react.math.Transform: void <init>()>": [
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.08092411005881255
        }, 
        {
            "<org.dyn4j.sandbox.Sandbox: void init(com.jogamp.opengl.GLAutoDrawable)>": 0.0752363193633219
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.TestbedMain: void main(java.lang.String[])>": 0.07491057470676989
        }, 
        {
            "<boofcv.demonstrations.transform.pyramid.EdgeIntensitiesApp: void main(java.lang.String[])>": 0.07156264473321344
        }, 
        {
            "<boofcv.demonstrations.tracker.CirculantVisualizationPanel: void <init>(boofcv.demonstrations.tracker.CirculantVisualizationPanel$Listener)>": 0.07086714258903189
        }
    ], 
    "<com.flowpowered.react.math.Vector3: com.flowpowered.react.math.Vector3 add(com.flowpowered.react.math.Vector3,com.flowpowered.react.math.Vector3)>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 abs()>": 0.3699180182917314
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 abs()>": 0.3671074933376407
        }, 
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector3 toVector3()>": 0.3658813595177107
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: net.smert.jreactphysics3d.mathematics.Vector3 abs()>": 0.364443711189949
        }, 
        {
            "<org.jbox2d.common.Vec2: void absLocal()>": 0.3636850688937143
        }
    ], 
    "<com.flowpowered.react.body.RigidBody: void setAngularVelocity(com.flowpowered.react.math.Vector3)>": [
        {
            "<Catalano.Imaging.Filters.GaussianBlur: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Concurrent.Filters.BradleyLocalThreshold: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.CosineTransform: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.BradleyLocalThreshold: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.UnsharpMasking: void <init>()>": 0.018184824186332698
        }
    ], 
    "<com.flowpowered.react.math.Vector3: com.flowpowered.react.math.Vector3 multiply(float)>": [
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.43023490060916214
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.42921495511747626
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 multiply(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": 0.428455130598146
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 inverse()>": 0.42804073354809613
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Quaternion: net.smert.jreactphysics3d.mathematics.Quaternion fromMatrix(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": 0.4246231625766828
        }
    ], 
    "<com.flowpowered.react.math.Matrix4x4: float getTrace()>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 inverse()>": 0.38649908463442495
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: float getDeterminant()>": 0.385219874527161
        }, 
        {
            "<org.jbox2d.dynamics.contacts.PositionSolverManifold: void initialize(org.jbox2d.dynamics.contacts.ContactPositionConstraint,org.jbox2d.common.Transform,org.jbox2d.common.Transform,int)>": 0.3841295740735389
        }, 
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.383480883729132
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 multiply(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": 0.3834248024976792
        }
    ], 
    "<com.flowpowered.react.math.Vector3: float lengthSquare()>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: float lengthSquare()>": 0.5257112668008669
        }, 
        {
            "<Catalano.Math.Vector3: float Square()>": 0.5257112668008669
        }, 
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.5224863675885517
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.521402122249235
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 multiply(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": 0.5213989875633759
        }
    ], 
    "<com.flowpowered.react.engine.DynamicsWorld: void integrateRigidBodiesVelocities()>": [
        {
            "<net.smert.jreactphysics3d.engine.ProfileNode: boolean exitBlockOfCode()>": 0.2476565981625079
        }, 
        {
            "<boofcv.alg.feature.detect.template.TemplateNCC$F32: void setupTemplate(boofcv.struct.image.GrayF32)>": 0.24048695302211817
        }, 
        {
            "<boofcv.alg.feature.detect.template.TemplateNCC$U8: void setupTemplate(boofcv.struct.image.GrayU8)>": 0.23780145563515304
        }, 
        {
            "<org.jbox2d.particle.ParticleSystem: void solve(org.jbox2d.dynamics.TimeStep)>": 0.23591119038752473
        }, 
        {
            "<org.jbox2d.particle.ParticleSystem: void updateContacts(boolean)>": 0.23207375168490427
        }
    ], 
    "<com.flowpowered.react.collision.CollisionDetection: void computeLinkedPhase()>": [
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void resetContactManifoldListsOfBodies()>": 0.3841480392784807
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void updateRigidBodiesAABB()>": 0.3732935299683464
        }, 
        {
            "<Catalano.Core.Concurrent.MulticoreExecutor: java.util.List run(java.util.Collection)>": 0.3655497275336248
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void setIsSleepingEnabled(boolean)>": 0.36038656087922283
        }, 
        {
            "<boofcv.abst.sfm.d3.WrapVisOdomDualTrackPnP: java.util.List getAllTracks()>": 0.3584262313581408
        }
    ], 
    "<com.flowpowered.react.collision.narrowphase.GJK.Simplex: boolean isPointInSimplex(com.flowpowered.react.math.Vector3)>": [
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: boolean isPointInSimplex(net.smert.jreactphysics3d.mathematics.Vector3)>": 0.3212834637572628
        }, 
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: boolean isProperSubset(int)>": 0.2969583285320217
        }, 
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: boolean isAffinelyDependent()>": 0.2701405320056884
        }, 
        {
            "<Catalano.Core.IntRange: boolean IsOverlapping(Catalano.Core.IntRange)>": 0.26946787325827304
        }, 
        {
            "<net.imglib2.img.cell.CellCursor: boolean hasNext()>": 0.2666129980929823
        }
    ], 
    "<com.flowpowered.react.engine.CollisionWorld: java.util.Map findIntersectingBodies(com.flowpowered.react.math.Vector3,com.flowpowered.react.math.Vector3)>": [
        {
            "<org.dyn4j.sandbox.input.Keyboard: void add(org.dyn4j.sandbox.input.Input)>": 0.14070608989274075
        }, 
        {
            "<org.dyn4j.sandbox.input.Keyboard: org.dyn4j.sandbox.input.Input remove(int)>": 0.1359828651269124
        }, 
        {
            "<boofcv.alg.bow.LearnSceneFromFiles: void loadSets(java.io.File,java.io.File,java.io.File)>": 0.1343509231196279
        }, 
        {
            "<org.dyn4j.sandbox.input.Keyboard: void reset(int)>": 0.12854589855589238
        }, 
        {
            "<net.coobird.thumbnailator.resizers.AbstractResizer: void <init>(java.lang.Object,java.util.Map)>": 0.1274069977564899
        }
    ], 
    "<com.flowpowered.react.math.Vector4: com.flowpowered.react.math.Vector4 subtract(com.flowpowered.react.math.Vector4)>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 inverse()>": 0.448620986834405
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 multiply(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": 0.44733755433211364
        }, 
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.4443798466205574
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.4434344929545489
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 multiply(net.smert.jreactphysics3d.mathematics.Matrix2x2)>": 0.4433010632369433
        }
    ], 
    "<com.flowpowered.react.collision.broadphase.SweepAndPruneAlgorithm: void addObject(com.flowpowered.react.body.CollisionBody,com.flowpowered.react.collision.shape.AABB)>": [
        {
            "<net.smert.jreactphysics3d.collision.broadphase.SweepAndPruneAlgorithm: void updateObjectIntegerAABB(net.smert.jreactphysics3d.body.CollisionBody,net.smert.jreactphysics3d.collision.broadphase.AABBInt)>": 0.36398687488628884
        }, 
        {
            "<net.smert.jreactphysics3d.collision.broadphase.SweepAndPruneAlgorithm: void updateObject(net.smert.jreactphysics3d.body.CollisionBody,net.smert.jreactphysics3d.collision.shapes.AABB)>": 0.3638873020876175
        }, 
        {
            "<net.smert.jreactphysics3d.collision.broadphase.SweepAndPruneAlgorithm: void removeObject(net.smert.jreactphysics3d.body.CollisionBody)>": 0.3612708500951763
        }, 
        {
            "<net.smert.jreactphysics3d.collision.broadphase.SweepAndPruneAlgorithm: void addObject(net.smert.jreactphysics3d.body.CollisionBody,net.smert.jreactphysics3d.collision.shapes.AABB)>": 0.3237133697126095
        }, 
        {
            "<net.imglib2.view.iteration.SlicingCursor: void <init>(net.imglib2.Cursor,net.imglib2.transform.integer.Slicing)>": 0.30164516499544763
        }
    ], 
    "<com.flowpowered.react.math.Matrix2x2: com.flowpowered.react.math.Matrix2x2 set(com.flowpowered.react.math.Matrix2x2)>": [
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector4 Abs()>": 0.3630331306663171
        }, 
        {
            "<Catalano.Math.Vector3: Catalano.Math.Vector3 Abs()>": 0.3555330318837213
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.DebugDrawJ2D$1: java.lang.Object newColor(float,float,float,float)>": 0.34493308718990046
        }, 
        {
            "<org.jbox2d.common.Mat22: org.jbox2d.common.Mat22 abs()>": 0.3401134229104211
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 abs()>": 0.3361597191903509
        }
    ], 
    "<com.flowpowered.react.math.Transform: com.flowpowered.react.math.Transform interpolateTransforms(com.flowpowered.react.math.Transform,com.flowpowered.react.math.Transform,float)>": [
        {
            "<boofcv.alg.feature.detect.line.gridline.Edgel: void <init>(float,float,float)>": 0.0781022631209117
        }, 
        {
            "<boofcv.alg.weights.WeightDistanceUniform_F32: void <init>(float)>": 0.07651737319009669
        }, 
        {
            "<boofcv.alg.segmentation.ms.SegmentMeanShiftSearch: float weight(float)>": 0.07501367331642596
        }, 
        {
            "<org.jbox2d.particle.ParticleSystem: void setParticleDensity(float)>": 0.07447476914164622
        }, 
        {
            "<boofcv.struct.RectangleRotate_F32: void <init>(float,float,float,float,float)>": 0.07331379648964295
        }
    ], 
    "<com.flowpowered.react.engine.DynamicsWorld: void resetBodiesMovementVariable()>": [
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void resetContactManifoldListsOfBodies()>": 0.4597697471210507
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void resetBodiesMovementVariable()>": 0.44547806991200656
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void setIsSleepingEnabled(boolean)>": 0.43048596584353843
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void updateRigidBodiesAABB()>": 0.42753284376566386
        }, 
        {
            "<net.coobird.thumbnailator.makers.ThumbnailMaker$ReadinessTracker: boolean isReady()>": 0.3908560893989101
        }
    ], 
    "<com.flowpowered.react.math.Vector3: com.flowpowered.react.math.Vector3 subtract(com.flowpowered.react.math.Vector3,com.flowpowered.react.math.Vector3)>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 abs()>": 0.3699180182917314
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 abs()>": 0.3671074933376407
        }, 
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector3 toVector3()>": 0.3658813595177107
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: net.smert.jreactphysics3d.mathematics.Vector3 abs()>": 0.364443711189949
        }, 
        {
            "<org.jbox2d.common.Vec2: void absLocal()>": 0.3636850688937143
        }
    ], 
    "<com.flowpowered.react.engine.DynamicsWorld: int getNbRigidBodies()>": [
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: int getNumJoints()>": 0.5547619047619047
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: int getNumRigidBodies()>": 0.5547619047619047
        }, 
        {
            "<org.jbox2d.common.MathUtils: int max(int,int)>": 0.3652167676687162
        }, 
        {
            "<org.jbox2d.common.MathUtils: int min(int,int)>": 0.3652167676687162
        }, 
        {
            "<org.jbox2d.particle.ParticleSystem: int limitCapacity(int,int)>": 0.3652167676687162
        }
    ], 
    "<com.flowpowered.react.constraint.ContactPoint: void setWorldPointOnSecondBody(com.flowpowered.react.math.Vector3)>": [
        {
            "<Catalano.Imaging.Filters.GaussianBlur: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Concurrent.Filters.BradleyLocalThreshold: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.CosineTransform: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.BradleyLocalThreshold: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.UnsharpMasking: void <init>()>": 0.018184824186332698
        }
    ], 
    "<com.flowpowered.react.body.Body: boolean equals(java.lang.Object)>": [
        {
            "<Catalano.Imaging.Filters.BinaryWatershed: boolean isWithin(int,int,int,int,int)>": 0.4707347594386525
        }, 
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: boolean isFull()>": 0.4555314277810105
        }, 
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: boolean isEmpty()>": 0.4555314277810105
        }, 
        {
            "<Catalano.Core.Structs.DoubleArrayList: boolean isEmpty()>": 0.4555314277810105
        }, 
        {
            "<net.coobird.thumbnailator.ThumbnailParameter: boolean useOriginalImageType()>": 0.4555314277810105
        }
    ], 
    "<com.flowpowered.react.constraint.SliderJoint: float getMotorForce(float)>": [
        {
            "<net.smert.jreactphysics3d.constraint.HingeJoint: float getMotorTorque(float)>": 0.6371710526315789
        }, 
        {
            "<net.smert.jreactphysics3d.constraint.SliderJoint: float getMotorForce(float)>": 0.6371710526315789
        }, 
        {
            "<org.jbox2d.dynamics.joints.WheelJoint: float getMotorTorque(float)>": 0.6371710526315789
        }, 
        {
            "<org.jbox2d.dynamics.joints.PrismaticJoint: float getMotorForce(float)>": 0.6371710526315789
        }, 
        {
            "<org.jbox2d.dynamics.joints.FrictionJoint: float getReactionTorque(float)>": 0.6371710526315789
        }
    ], 
    "<com.flowpowered.react.constraint.ConstraintSolver: void solvePositionConstraints(com.flowpowered.react.engine.Island)>": [
        {
            "<boofcv.alg.transform.fft.GeneralPurposeFFT_F64_1D: int getReminder(int,int[])>": 0.33493766303014744
        }, 
        {
            "<boofcv.alg.transform.fft.GeneralPurposeFFT_F32_1D: int getReminder(int,int[])>": 0.33493766303014744
        }, 
        {
            "<Catalano.Math.Decompositions.LUDecomposition: double determinant()>": 0.3143767215165046
        }, 
        {
            "<Catalano.Math.Matrix: int Min(int[])>": 0.2929783424925369
        }, 
        {
            "<Catalano.Math.Matrix: int Max(int[])>": 0.2929783424925369
        }
    ], 
    "<com.flowpowered.react.math.Matrix2x2: void <init>(float,float,float,float)>": [
        {
            "<org.jbox2d.testbed.framework.j2d.DebugDrawJ2D$1: java.lang.Object newColor(float,float,float,float)>": 0.5422102328874971
        }, 
        {
            "<org.jbox2d.common.MathUtils: float clamp(float,float,float)>": 0.3989194321711351
        }, 
        {
            "<org.jbox2d.dynamics.contacts.Contact: float mixFriction(float,float)>": 0.39623342794259575
        }, 
        {
            "<org.jbox2d.common.Settings: float mixFriction(float,float)>": 0.39623342794259575
        }, 
        {
            "<net.smert.jreactphysics3d.engine.Profiler: float GetElapsedTimeSinceStart()>": 0.386681732438094
        }
    ], 
    "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 subtract(com.flowpowered.react.math.Matrix4x4)>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 abs()>": 0.3517105464432406
        }, 
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector3 toVector3()>": 0.3501787201706022
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 abs()>": 0.3491305406397294
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: net.smert.jreactphysics3d.mathematics.Vector3 abs()>": 0.34665225968207736
        }, 
        {
            "<org.jbox2d.common.Vec2: void absLocal()>": 0.34602535741879636
        }
    ], 
    "<com.flowpowered.react.engine.DynamicsWorld: void initVelocityArrays()>": [
        {
            "<org.jbox2d.collision.broadphase.Pair: int compareTo(java.lang.Object)>": 0.26631589087150553
        }, 
        {
            "<org.jbox2d.collision.broadphase.Pair: int compareTo(org.jbox2d.collision.broadphase.Pair)>": 0.26591660848864823
        }, 
        {
            "<boofcv.misc.BoofMiscOps: void boundRectangleInside(boofcv.struct.image.ImageBase,boofcv.struct.ImageRectangle)>": 0.26569592983010865
        }, 
        {
            "<Catalano.Imaging.Filters.HorizontalRunLengthSmoothing: void applyInPlace(Catalano.Imaging.FastBitmap)>": 0.26501638395313254
        }, 
        {
            "<Catalano.Imaging.Filters.BlobsFiltering: void applyInPlace(Catalano.Imaging.FastBitmap)>": 0.2636258359911145
        }
    ], 
    "<com.flowpowered.react.engine.Island: void addJoint(com.flowpowered.react.constraint.Joint)>": [
        {
            "<Catalano.Imaging.Tools.BlobDetection: void ShuffleColor()>": 0.3389044739320369
        }, 
        {
            "<Catalano.Statistics.Kernels.Polynomial: void setDegree(int)>": 0.32202941451867023
        }, 
        {
            "<Catalano.Statistics.Kernels.NormalizedPolynomial: void setDegree(int)>": 0.32202941451867023
        }, 
        {
            "<Catalano.Imaging.Concurrent.Filters.FastVariance: void setRadius(int)>": 0.32202941451867023
        }, 
        {
            "<Catalano.Imaging.Concurrent.Filters.Minimum: void setRadius(int)>": 0.32202941451867023
        }
    ], 
    "<com.flowpowered.react.engine.Material: void setBounciness(float)>": [
        {
            "<boofcv.alg.background.stationary.BackgroundStationaryBasic: void <init>(float,float,boofcv.struct.image.ImageType)>": 0.4714204807456763
        }, 
        {
            "<boofcv.alg.background.moving.BackgroundMovingBasic: void <init>(float,float,boofcv.struct.distort.PointTransformModel_F32,boofcv.struct.image.ImageType)>": 0.45275894691044183
        }, 
        {
            "<net.smert.jreactphysics3d.engine.Material: void setBounciness(float)>": 0.4147014521881332
        }, 
        {
            "<boofcv.factory.background.ConfigBackgroundGaussian: void checkValidity()>": 0.3693583441748565
        }, 
        {
            "<boofcv.factory.background.ConfigBackgroundBasic: void checkValidity()>": 0.3693307647242347
        }
    ], 
    "<com.flowpowered.react.collision.RayCaster: com.flowpowered.react.collision.RayCaster$IntersectedBody findClosestIntersectingBody(com.flowpowered.react.math.Vector3,com.flowpowered.react.math.Vector3,java.util.Collection)>": [
        {
            "<net.coobird.thumbnailator.makers.ThumbnailMaker$ReadinessTracker: boolean isReady()>": 0.3298046658830136
        }, 
        {
            "<net.coobird.thumbnailator.Thumbnails$Builder: void checkReadiness()>": 0.30273938926528254
        }, 
        {
            "<net.coobird.thumbnailator.Thumbnails$Builder: java.lang.Iterable iterableBufferedImages()>": 0.28586285349107826
        }, 
        {
            "<boofcv.alg.bow.LearnSceneFromFiles: void extractKeys(java.util.Map)>": 0.2625744422029756
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void resetContactManifoldListsOfBodies()>": 0.25254246685131343
        }
    ], 
    "<com.flowpowered.react.math.Vector2: com.flowpowered.react.math.Vector2 add(com.flowpowered.react.math.Vector2)>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 inverse()>": 0.4230515673767139
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 multiply(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": 0.4218578993006978
        }, 
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.4190822068715384
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 multiply(net.smert.jreactphysics3d.mathematics.Matrix2x2)>": 0.4182684766594068
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.41808352855820397
        }
    ], 
    "<com.flowpowered.react.collision.shape.CylinderShape: com.flowpowered.react.math.Vector3 getLocalSupportPointWithMargin(com.flowpowered.react.math.Vector3)>": [
        {
            "<Catalano.Math.Vector3: float Norm()>": 0.3163143098329244
        }, 
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector4 Abs()>": 0.31512029180931994
        }, 
        {
            "<Catalano.Math.Vector3: float Normalize()>": 0.3142662802508365
        }, 
        {
            "<Catalano.Math.Vector4: float Norm()>": 0.3121435842391297
        }, 
        {
            "<boofcv.alg.feature.detect.intensity.impl.ImplShiTomasiCorner_F32: float computeIntensity()>": 0.3104015773345862
        }
    ], 
    "<com.flowpowered.react.math.Quaternion: com.flowpowered.react.math.Quaternion subtract(com.flowpowered.react.math.Quaternion)>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 inverse()>": 0.448620986834405
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 multiply(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": 0.44733755433211364
        }, 
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.4443798466205574
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.4434344929545489
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 multiply(net.smert.jreactphysics3d.mathematics.Matrix2x2)>": 0.4433010632369433
        }
    ], 
    "<com.flowpowered.react.collision.shape.AABB: java.lang.String toString()>": [
        {
            "<net.smert.jreactphysics3d.collision.shapes.CollisionShape: java.lang.String toString()>": 0.5030898695800998
        }, 
        {
            "<boofcv.struct.feature.Match: java.lang.String toString()>": 0.47513753691579236
        }, 
        {
            "<boofcv.struct.geo.TrifocalTensor: java.lang.String toString()>": 0.44612721630011576
        }, 
        {
            "<org.jbox2d.common.Transform: java.lang.String toString()>": 0.4427499007260325
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Transform: java.lang.String toString()>": 0.43429707983399307
        }
    ], 
    "<com.flowpowered.react.body.CollisionBody: void updateAABB()>": [
        {
            "<boofcv.gui.DepthVideoAppBase: void mouseClicked(java.awt.event.MouseEvent)>": 0.1741844949042676
        }, 
        {
            "<boofcv.gui.StereoVideoAppBase: void mouseClicked(java.awt.event.MouseEvent)>": 0.1741844949042676
        }, 
        {
            "<boofcv.gui.VideoProcessAppBase: void mouseClicked(java.awt.event.MouseEvent)>": 0.16342394461260643
        }, 
        {
            "<boofcv.abst.sfm.d3.WrapVisOdomPixelDepthPnP: boolean isFault()>": 0.16260848423617932
        }, 
        {
            "<boofcv.abst.sfm.d3.VisOdomPixelDepthPnP_to_DepthVisualOdometry: boolean isFault()>": 0.16260848423617932
        }
    ], 
    "<com.flowpowered.react.collision.shape.AABB: void <init>()>": [
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.10842661409823065
        }, 
        {
            "<org.dyn4j.sandbox.Sandbox: void init(com.jogamp.opengl.GLAutoDrawable)>": 0.10132274924351498
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.TestbedMain: void main(java.lang.String[])>": 0.10036934567095813
        }, 
        {
            "<boofcv.gui.d3.Polygon3DSequenceViewer: void <init>()>": 0.09608221554494978
        }, 
        {
            "<boofcv.demonstrations.transform.pyramid.EdgeIntensitiesApp: void main(java.lang.String[])>": 0.09588360327593043
        }
    ], 
    "<com.flowpowered.react.math.Vector2: com.flowpowered.react.math.Vector2 multiply(com.flowpowered.react.math.Vector2,float)>": [
        {
            "<net.imglib2.type.numeric.complex.AbstractComplexType: void mul(float)>": 0.364563283810774
        }, 
        {
            "<org.jbox2d.common.Vec2: org.jbox2d.common.Vec2 mul(float)>": 0.34584102875995976
        }, 
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector3 toVector3()>": 0.32850796178833064
        }, 
        {
            "<org.jbox2d.dynamics.contacts.Contact: float mixFriction(float,float)>": 0.32445487431425557
        }, 
        {
            "<org.jbox2d.common.Settings: float mixFriction(float,float)>": 0.32445487431425557
        }
    ], 
    "<com.flowpowered.react.math.Matrix4x4: void set(int,int,float)>": [
        {
            "<net.coobird.thumbnailator.geometry.Positions$1: java.awt.Point calculate(int,int,int,int,int,int,int,int)>": 0.5234938234888701
        }, 
        {
            "<boofcv.core.image.border.ImageBorderValue$Value_I: void setOutside(int,int,int)>": 0.5197184294495419
        }, 
        {
            "<boofcv.core.image.border.ImageBorderValue$Value_F32: void setOutside(int,int,float)>": 0.5132106259401595
        }, 
        {
            "<org.dyn4j.examples.ExampleJOGL: void reshape(com.jogamp.opengl.GLAutoDrawable,int,int,int,int)>": 0.5124292156602955
        }, 
        {
            "<net.coobird.thumbnailator.geometry.Positions$4: java.awt.Point calculate(int,int,int,int,int,int,int,int)>": 0.4968651262712981
        }
    ], 
    "<com.flowpowered.react.collision.CollisionDetection: void removeBody(com.flowpowered.react.body.CollisionBody)>": [
        {
            "<org.dyn4j.sandbox.panels.LineGraphPanel: void setStaticSize(java.awt.Dimension)>": 0.0778498944161523
        }, 
        {
            "<org.jbox2d.testbed.tests.DrawingParticles: void step(org.jbox2d.testbed.framework.TestbedSettings)>": 0.07537783614444092
        }, 
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.0747080202248614
        }, 
        {
            "<boofcv.gui.feature.SelectRegionDescriptionPanel: void <init>()>": 0.07391404949863532
        }, 
        {
            "<boofcv.gui.d3.Polygon3DSequenceViewer: void <init>()>": 0.07317117587562046
        }
    ], 
    "<com.flowpowered.react.math.Quaternion: com.flowpowered.react.math.Quaternion set(com.flowpowered.react.math.Quaternion)>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 abs()>": 0.4256714634797857
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 abs()>": 0.4229558427748502
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: net.smert.jreactphysics3d.mathematics.Vector3 abs()>": 0.4201977893509872
        }, 
        {
            "<org.jbox2d.common.Vec2: void absLocal()>": 0.41973192911492135
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 invert()>": 0.41440393910442697
        }
    ], 
    "<com.flowpowered.react.engine.DynamicsWorld: void setSleepLinearVelocity(float)>": [
        {
            "<boofcv.factory.background.ConfigBackgroundGaussian: void checkValidity()>": 0.3576379882883496
        }, 
        {
            "<boofcv.alg.background.stationary.BackgroundStationaryBasic: void <init>(float,float,boofcv.struct.image.ImageType)>": 0.3415979091245608
        }, 
        {
            "<boofcv.alg.background.stationary.BackgroundStationaryGaussian: void <init>(float,float,boofcv.struct.image.ImageType)>": 0.3350401305321443
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void setSleepLinearVelocity(float)>": 0.3330403520701663
        }, 
        {
            "<net.smert.jreactphysics3d.body.RigidBody: void setMass(float)>": 0.3330403520701663
        }
    ], 
    "<com.flowpowered.react.body.Body: void <init>(int)>": [
        {
            "<boofcv.abst.feature.detect.extract.ConfigExtract: void <init>(int,float,int,boolean)>": 0.3184598912975374
        }, 
        {
            "<net.smert.jreactphysics3d.body.Body: void <init>(int)>": 0.30386463255202945
        }, 
        {
            "<boofcv.abst.feature.detect.extract.ConfigExtract: void <init>(int,float,int,boolean,boolean,boolean)>": 0.3035936792712486
        }, 
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: boolean overlap(int,int)>": 0.30346559815197005
        }, 
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: boolean isSubset(int,int)>": 0.30346559815197005
        }
    ], 
    "<com.flowpowered.react.math.Vector2: int getMaxAxis()>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Vector2: int getMaxAxis()>": 0.5697916666666667
        }, 
        {
            "<boofcv.abst.fiducial.CalibrationFiducialDetector: int totalFound()>": 0.43909242088545836
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: int getMaxAxis()>": 0.4354989515435984
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: int getMinAxis()>": 0.3941639721627793
        }, 
        {
            "<Catalano.Math.Vector3: int getMinIndex()>": 0.3941639721627793
        }
    ], 
    "<com.flowpowered.react.math.Matrix2x2: com.flowpowered.react.math.Vector2 multiply(com.flowpowered.react.math.Matrix2x2,com.flowpowered.react.math.Vector2)>": [
        {
            "<Catalano.Math.Vector3: Catalano.Math.Vector3 Cross(Catalano.Math.Vector3,Catalano.Math.Vector3)>": 0.4790512135639545
        }, 
        {
            "<org.jbox2d.common.Vec3: org.jbox2d.common.Vec3 cross(org.jbox2d.common.Vec3,org.jbox2d.common.Vec3)>": 0.4790512135639545
        }, 
        {
            "<org.jbox2d.common.Mat33: org.jbox2d.common.Vec2 mul22(org.jbox2d.common.Mat33,org.jbox2d.common.Vec2)>": 0.4458374175596212
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 inverse()>": 0.4450228087681998
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 multiply(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": 0.44364890435214865
        }
    ], 
    "<com.flowpowered.react.collision.shape.ConeShape: void <init>(float,float)>": [
        {
            "<boofcv.alg.weights.WeightDistanceSqGaussian_F32: float weight(float)>": 0.46744704616017413
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: void <init>(float,float,float,float,float,float,float,float,float)>": 0.44567650026328
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: void <init>(float,float,float,float)>": 0.43876125589830317
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Quaternion: void <init>(float,float,float,float)>": 0.43876125589830317
        }, 
        {
            "<org.jbox2d.common.MathUtils: float clamp(float,float,float)>": 0.43513135460309016
        }
    ], 
    "<com.flowpowered.react.collision.shape.BoxShape: boolean isEqualTo(com.flowpowered.react.collision.shape.CollisionShape)>": [
        {
            "<net.imglib2.type.logic.BoolType: boolean valueEquals(java.lang.Object)>": 0.21925758267861248
        }, 
        {
            "<boofcv.abst.sfm.d3.MonoOverhead_to_MonocularPlaneVisualOdometry: boolean process(boofcv.struct.image.ImageBase)>": 0.20628010561925886
        }, 
        {
            "<net.imglib2.type.logic.BoolType: boolean valueEquals(net.imglib2.type.logic.BoolType)>": 0.20539877699944162
        }, 
        {
            "<Catalano.Core.Structs.BinaryHeap: boolean isEmpty()>": 0.20284736150413218
        }, 
        {
            "<Catalano.Math.SparseArray: boolean isEmpty()>": 0.20284736150413218
        }
    ], 
    "<com.flowpowered.react.body.RigidBody: void applyForce(com.flowpowered.react.math.Vector3,com.flowpowered.react.math.Vector3)>": [
        {
            "<boofcv.gui.DepthVideoAppBase: void mouseClicked(java.awt.event.MouseEvent)>": 0.09629484003394656
        }, 
        {
            "<boofcv.gui.StereoVideoAppBase: void mouseClicked(java.awt.event.MouseEvent)>": 0.09629484003394656
        }, 
        {
            "<org.dyn4j.sandbox.Sandbox: void renderBody(com.jogamp.opengl.GL2,org.dyn4j.sandbox.SandboxBody)>": 0.09606420979495643
        }, 
        {
            "<net.imglib2.view.TransformBuilder: void <init>(net.imglib2.Interval,net.imglib2.RandomAccessible)>": 0.09570320609556604
        }, 
        {
            "<boofcv.gui.VideoProcessAppBase: void mouseClicked(java.awt.event.MouseEvent)>": 0.09561291547254987
        }
    ], 
    "<com.flowpowered.react.body.RigidBody: void setAngularDamping(float)>": [
        {
            "<boofcv.factory.background.ConfigBackgroundGaussian: void checkValidity()>": 0.3576379882883496
        }, 
        {
            "<boofcv.alg.background.stationary.BackgroundStationaryBasic: void <init>(float,float,boofcv.struct.image.ImageType)>": 0.3415979091245608
        }, 
        {
            "<boofcv.alg.background.stationary.BackgroundStationaryGaussian: void <init>(float,float,boofcv.struct.image.ImageType)>": 0.3350401305321443
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void setSleepLinearVelocity(float)>": 0.3330403520701663
        }, 
        {
            "<net.smert.jreactphysics3d.body.RigidBody: void setMass(float)>": 0.3330403520701663
        }
    ], 
    "<com.flowpowered.react.collision.narrowphase.EPA.EdgeEPA: int indexOfPreviousCounterClockwiseEdge(int)>": [
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.EPA.EdgeEPA: int indexOfPreviousCounterClockwiseEdge(int)>": 0.9026631481046514
        }, 
        {
            "<net.coobird.thumbnailator.geometry.Positions$5: java.awt.Point calculate(int,int,int,int,int,int,int,int)>": 0.5288175873104959
        }, 
        {
            "<Catalano.Statistics.Regression.RegressionAnalysis: void setMaxDegree(int)>": 0.5194369115453366
        }, 
        {
            "<Catalano.Statistics.Regression.PolynomialRegression: void setDegree(int)>": 0.5194369115453366
        }, 
        {
            "<Catalano.Imaging.Tools.FastRadialSymmetryTransform: void setRadius(int)>": 0.5194369115453366
        }
    ], 
    "<com.flowpowered.react.math.Quaternion: com.flowpowered.react.math.Quaternion multiply(com.flowpowered.react.math.Quaternion,float)>": [
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector4 Subtract(Catalano.Math.Vector4,float)>": 0.38179142812763506
        }, 
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector4 Add(Catalano.Math.Vector4,float)>": 0.38179142812763506
        }, 
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector4 Divide(Catalano.Math.Vector4,float)>": 0.38179142812763506
        }, 
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector4 Multiply(Catalano.Math.Vector4,float)>": 0.38179142812763506
        }, 
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector3 toVector3()>": 0.3795399567357523
        }
    ], 
    "<com.flowpowered.react.math.Vector3: void <init>(com.flowpowered.react.math.Vector3)>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 abs()>": 0.49491581896421805
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 abs()>": 0.491162351850003
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: net.smert.jreactphysics3d.mathematics.Vector3 abs()>": 0.48743683941301574
        }, 
        {
            "<org.jbox2d.common.Vec2: void absLocal()>": 0.48591668930476317
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector2: net.smert.jreactphysics3d.mathematics.Vector2 abs()>": 0.47708673608136803
        }
    ], 
    "<com.flowpowered.react.constraint.FixedJoint: void initBeforeSolve(com.flowpowered.react.constraint.ConstraintSolver$ConstraintSolverData)>": [
        {
            "<org.jbox2d.common.Vec2: boolean isValid()>": 0.1158001810012741
        }, 
        {
            "<boofcv.gui.DepthVideoAppBase: void mouseClicked(java.awt.event.MouseEvent)>": 0.11400360707731239
        }, 
        {
            "<boofcv.gui.StereoVideoAppBase: void mouseClicked(java.awt.event.MouseEvent)>": 0.11400360707731239
        }, 
        {
            "<org.box2d.proto.Box2D$PbJoint$Builder: com.google.protobuf.AbstractMessage$Builder mergeFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)>": 0.11151955138295497
        }, 
        {
            "<org.box2d.proto.Box2D$PbJoint$Builder: com.google.protobuf.AbstractMessageLite$Builder mergeFrom(com.google.protobuf.CodedInputStream,com.google.protobuf.ExtensionRegistryLite)>": 0.11151955138295497
        }
    ], 
    "<com.flowpowered.react.collision.narrowphase.EPA.TriangleEPA: boolean isVisibleFromVertex(com.flowpowered.react.math.Vector3[],int)>": [
        {
            "<Catalano.Math.Geometry.Line: boolean isHorizontal()>": 0.4696397189829293
        }, 
        {
            "<net.coobird.thumbnailator.util.exif.IfdStructure: boolean isOffset()>": 0.4090451262597107
        }, 
        {
            "<boofcv.alg.feature.detect.intensity.impl.ImplFastHelper_F32: boolean checkPixelLower(int)>": 0.4088353325185603
        }, 
        {
            "<boofcv.alg.feature.detect.intensity.impl.ImplFastHelper_F32: boolean checkPixelUpper(int)>": 0.4088353325185603
        }, 
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: boolean isFull()>": 0.4083319151622925
        }
    ], 
    "<com.flowpowered.react.engine.OverlappingPair: int getNbContactPoints()>": [
        {
            "<org.jbox2d.common.MathUtils: int max(int,int)>": 0.3652167676687162
        }, 
        {
            "<org.jbox2d.common.MathUtils: int min(int,int)>": 0.3652167676687162
        }, 
        {
            "<org.jbox2d.particle.ParticleSystem: int limitCapacity(int,int)>": 0.3652167676687162
        }, 
        {
            "<net.imglib2.display.ColorTable16: int get(int,int)>": 0.32170772231096606
        }, 
        {
            "<boofcv.core.image.border.ImageBorderValue$Value_I: int getOutside(int,int)>": 0.31672989028797055
        }
    ], 
    "<com.flowpowered.react.constraint.ConstraintSolver: void solveVelocityConstraints(com.flowpowered.react.engine.Island)>": [
        {
            "<boofcv.alg.transform.fft.GeneralPurposeFFT_F64_1D: int getReminder(int,int[])>": 0.36500417697604987
        }, 
        {
            "<boofcv.alg.transform.fft.GeneralPurposeFFT_F32_1D: int getReminder(int,int[])>": 0.36500417697604987
        }, 
        {
            "<boofcv.abst.feature.detect.extract.ConfigExtract: void checkValidity()>": 0.35612416222363
        }, 
        {
            "<Catalano.Math.Decompositions.LUDecomposition: double determinant()>": 0.35079554386951667
        }, 
        {
            "<boofcv.abst.feature.detect.interest.ConfigFast: void checkValidity()>": 0.32913483660489173
        }
    ], 
    "<com.flowpowered.react.engine.ContactSolver: void <init>(gnu.trove.map.TObjectIntMap)>": [
        {
            "<net.smert.jreactphysics3d.collision.broadphase.NoBroadPhaseAlgorithm: void <init>(net.smert.jreactphysics3d.collision.CollisionDetection)>": 0.16076175786697564
        }, 
        {
            "<boofcv.gui.VideoProcessAppBase: void setPause(boolean)>": 0.13258252147247768
        }, 
        {
            "<boofcv.factory.geo.ConfigHomography: void <init>(boolean)>": 0.13010412496663332
        }, 
        {
            "<net.smert.jreactphysics3d.collision.CollisionDetection: void <init>(net.smert.jreactphysics3d.engine.CollisionWorld)>": 0.12977359498523583
        }, 
        {
            "<org.dyn4j.geometry.IntervalTest: void includes()>": 0.1272631857690368
        }
    ], 
    "<com.flowpowered.react.collision.shape.ConvexMeshShape: com.flowpowered.react.math.Vector3 getLocalSupportPointWithMargin(com.flowpowered.react.math.Vector3)>": [
        {
            "<net.smert.jreactphysics3d.collision.shapes.ConvexMeshShape: net.smert.jreactphysics3d.mathematics.Vector3 getLocalSupportPointWithoutMargin(net.smert.jreactphysics3d.mathematics.Vector3,net.smert.jreactphysics3d.mathematics.Vector3)>": 0.302717656103799
        }, 
        {
            "<boofcv.io.SimpleStringNumberReader: boolean next()>": 0.2843283900199808
        }, 
        {
            "<Catalano.Core.Structs.BinaryHeap: void downHeap(int,java.lang.Comparable)>": 0.27419301286695746
        }, 
        {
            "<net.smert.jreactphysics3d.collision.shapes.ConvexMeshShape: net.smert.jreactphysics3d.mathematics.Vector3 getLocalSupportPointWithMargin(net.smert.jreactphysics3d.mathematics.Vector3,net.smert.jreactphysics3d.mathematics.Vector3)>": 0.27235551832060656
        }, 
        {
            "<net.imglib2.histogram.HistogramNd: boolean isOutside(java.util.List)>": 0.27213073937252136
        }
    ], 
    "<com.flowpowered.react.collision.broadphase.SweepAndPruneAlgorithm$AABBInt: void <init>(com.flowpowered.react.collision.shape.AABB,com.flowpowered.react.collision.broadphase.SweepAndPruneAlgorithm$1)>": [
        {
            "<net.smert.jreactphysics3d.collision.broadphase.AABBInt: void <init>(net.smert.jreactphysics3d.collision.shapes.AABB)>": 0.3764006805795395
        }, 
        {
            "<net.smert.jreactphysics3d.collision.broadphase.AABBInt: void <init>(long,long)>": 0.23387543453920628
        }, 
        {
            "<org.jbox2d.particle.ParticleSystem: long computeTag(float,float)>": 0.20915827442573576
        }, 
        {
            "<net.imglib2.position.transform.Round: void round(float[],long[])>": 0.20537829486930886
        }, 
        {
            "<net.imglib2.position.transform.Floor: void floor(float[],long[])>": 0.20537829486930886
        }
    ], 
    "<com.flowpowered.react.constraint.ConstraintSolver$ConstraintSolverData: void <init>(java.util.List,java.util.List,gnu.trove.map.TObjectIntMap)>": [
        {
            "<boofcv.gui.calibration.CalibratedImageGridPanel: void setResults(java.util.List,java.util.List)>": 0.3732996032650896
        }, 
        {
            "<boofcv.alg.geo.triangulate.ResidualsTriangulateSampson: void setObservations(java.util.List,java.util.List)>": 0.3732996032650896
        }, 
        {
            "<boofcv.gui.feature.AssociationScorePanel: void setLocation(java.util.List,java.util.List,java.util.List,java.util.List)>": 0.3656144910624291
        }, 
        {
            "<boofcv.demonstrations.feature.associate.VisualizeAssociationScoreApp$1: void <init>(boofcv.demonstrations.feature.associate.VisualizeAssociationScoreApp,javax.swing.ProgressMonitor,java.util.List,java.util.List,java.util.List,java.util.List)>": 0.3635403029062809
        }, 
        {
            "<boofcv.gui.feature.CompareTwoImagePanel: void setLocation(java.util.List,java.util.List)>": 0.36148231840325296
        }
    ], 
    "<com.flowpowered.react.collision.RayCaster: com.flowpowered.react.collision.RayCaster$IntersectedBody findFurthestIntersectingBody(com.flowpowered.react.math.Vector3,com.flowpowered.react.math.Vector3,java.util.Collection)>": [
        {
            "<net.coobird.thumbnailator.makers.ThumbnailMaker$ReadinessTracker: boolean isReady()>": 0.3298046658830136
        }, 
        {
            "<net.coobird.thumbnailator.Thumbnails$Builder: void checkReadiness()>": 0.30273938926528254
        }, 
        {
            "<net.coobird.thumbnailator.Thumbnails$Builder: java.lang.Iterable iterableBufferedImages()>": 0.28586285349107826
        }, 
        {
            "<boofcv.alg.bow.LearnSceneFromFiles: void extractKeys(java.util.Map)>": 0.2625744422029756
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void resetContactManifoldListsOfBodies()>": 0.25254246685131343
        }
    ], 
    "<com.flowpowered.react.collision.BroadPhasePair: com.flowpowered.react.Utilities$IntPair getBodiesIndexPair()>": [
        {
            "<Catalano.Imaging.Filters.GaussianBlur: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Concurrent.Filters.BradleyLocalThreshold: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.CosineTransform: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.BradleyLocalThreshold: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.UnsharpMasking: void <init>()>": 0.018184824186332698
        }
    ], 
    "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 multiply(com.flowpowered.react.math.Matrix4x4,com.flowpowered.react.math.Matrix4x4)>": [
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.5572922541188625
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 multiply(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": 0.5568704298660233
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.5563246717849858
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 inverse()>": 0.5562724855615393
        }, 
        {
            "<org.jbox2d.dynamics.contacts.PositionSolverManifold: void initialize(org.jbox2d.dynamics.contacts.ContactPositionConstraint,org.jbox2d.common.Transform,org.jbox2d.common.Transform,int)>": 0.5500355738000373
        }
    ], 
    "<com.flowpowered.react.collision.narrowphase.GJK.Simplex: boolean isProperSubset(int)>": [
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: boolean isProperSubset(int)>": 0.5051848611551637
        }, 
        {
            "<Catalano.Math.Matrix: boolean isNonNegative(float[][])>": 0.42401646209897864
        }, 
        {
            "<Catalano.Math.Matrix: boolean isZero(float[][])>": 0.42401646209897864
        }, 
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: boolean isValidSubset(int)>": 0.40359529254654997
        }, 
        {
            "<Catalano.Math.Matrix: boolean isZero(float[])>": 0.37659727289823197
        }
    ], 
    "<com.flowpowered.react.collision.broadphase.SweepAndPruneAlgorithm: void <init>(com.flowpowered.react.collision.CollisionDetection)>": [
        {
            "<org.dyn4j.dynamics.WorldTest: void listeners()>": 0.13210001056898782
        }, 
        {
            "<boofcv.struct.feature.NccFeatureQueue: void <init>(int)>": 0.1311958928514974
        }, 
        {
            "<boofcv.struct.feature.BriefFeatureQueue: void <init>(int)>": 0.1311958928514974
        }, 
        {
            "<boofcv.alg.filter.convolve.noborder.ConvolveImageUnrolled_S16_I16: boolean vertical(boofcv.struct.convolve.Kernel1D_I32,boofcv.struct.image.GrayS16,boofcv.struct.image.GrayI16)>": 0.12839909050582013
        }, 
        {
            "<boofcv.alg.filter.convolve.noborder.ConvolveImageUnrolled_S16_I16: boolean horizontal(boofcv.struct.convolve.Kernel1D_I32,boofcv.struct.image.GrayS16,boofcv.struct.image.GrayI16)>": 0.12839909050582013
        }
    ], 
    "<com.flowpowered.react.math.Matrix3x3: void setToIdentity()>": [
        {
            "<org.dyn4j.sandbox.utilities.ColorUtilities: java.awt.Color convertColor(float[])>": 0.14542646417797608
        }, 
        {
            "<org.dyn4j.sandbox.SandboxBody: void stencil(com.jogamp.opengl.GL2)>": 0.11654685752287638
        }, 
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.11644450194791639
        }, 
        {
            "<org.dyn4j.sandbox.Sandbox: void init(com.jogamp.opengl.GLAutoDrawable)>": 0.11512542048636089
        }, 
        {
            "<org.dyn4j.geometry.CapsuleTest: void getFoci()>": 0.11285898226026574
        }
    ], 
    "<com.flowpowered.react.constraint.HingeJoint: void <init>(com.flowpowered.react.constraint.HingeJoint$HingeJointInfo)>": [
        {
            "<boofcv.factory.background.ConfigBackgroundGaussian: void checkValidity()>": 0.14360832899881376
        }, 
        {
            "<boofcv.factory.background.ConfigBackgroundBasic: void checkValidity()>": 0.13752649543560497
        }, 
        {
            "<org.jbox2d.testbed.tests.MotorTest: void step(org.jbox2d.testbed.framework.TestbedSettings)>": 0.13702636992090056
        }, 
        {
            "<org.jbox2d.common.MathUtils: float abs(float)>": 0.13502327458533045
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 inverse()>": 0.1334278878346627
        }
    ], 
    "<com.flowpowered.react.math.Vector3: boolean isUnit()>": [
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.5063961160619108
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 inverse()>": 0.5058855531708116
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 multiply(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": 0.5053465582032152
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.5053438142934962
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: boolean isUnit()>": 0.5029787421346106
        }
    ], 
    "<com.flowpowered.react.collision.broadphase.SweepAndPruneAlgorithm$BoxAABB: void access$1500(com.flowpowered.react.collision.broadphase.SweepAndPruneAlgorithm$BoxAABB,int,int)>": [
        {
            "<boofcv.alg.feature.disparity.DisparityScoreWindowFive: void <init>(int,int,int,int)>": 0.5257296716521506
        }, 
        {
            "<boofcv.alg.feature.disparity.DisparityScoreSadRect: void <init>(int,int,int,int)>": 0.5257296716521506
        }, 
        {
            "<boofcv.struct.ImageRectangle: void <init>(int,int,int,int)>": 0.5232085702346165
        }, 
        {
            "<boofcv.factory.feature.disparity.FactoryStereoDisparityAlgs: boofcv.alg.feature.disparity.DisparitySparseScoreSadRect scoreDisparitySparseSadRect_F32(int,int,int,int)>": 0.5166880635976503
        }, 
        {
            "<boofcv.factory.feature.disparity.FactoryStereoDisparityAlgs: boofcv.alg.feature.disparity.DisparitySparseScoreSadRect scoreDisparitySparseSadRect_U8(int,int,int,int)>": 0.5166880635976503
        }
    ], 
    "<com.flowpowered.react.constraint.HingeJoint: void solvePositionConstraint(com.flowpowered.react.constraint.ConstraintSolver$ConstraintSolverData)>": [
        {
            "<org.jbox2d.common.MathUtils: float abs(float)>": 0.21113990903494473
        }, 
        {
            "<boofcv.abst.feature.detect.extract.NonMaxLimiter$LocalExtreme: float getValue()>": 0.20872229685925797
        }, 
        {
            "<Catalano.Math.Geometry.Line: void <init>(float,float,boolean)>": 0.20582532604719783
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 inverse()>": 0.20554148248715742
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector2: net.smert.jreactphysics3d.mathematics.Vector2 setUnitOrthogonal()>": 0.2045172554735681
        }
    ], 
    "<com.flowpowered.react.math.Vector3: void <init>(float,float,float)>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: void <init>(float,float,float,float,float,float,float,float,float)>": 0.6215615031380365
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: void <init>(float,float,float,float)>": 0.6096428276718958
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Quaternion: void <init>(float,float,float,float)>": 0.6096428276718958
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: void <init>(float,float,float)>": 0.5983705163570805
        }, 
        {
            "<org.jbox2d.testbed.pooling.ColorKey: void set(float,float,float)>": 0.5892334721287775
        }
    ], 
    "<com.flowpowered.react.math.Vector2: boolean equals(java.lang.Object)>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: boolean equals(java.lang.Object)>": 0.6381527672270493
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: boolean equals(java.lang.Object)>": 0.6312226098394296
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Quaternion: boolean equals(java.lang.Object)>": 0.6312226098394296
        }, 
        {
            "<org.jbox2d.testbed.pooling.ColorKey: boolean equals(java.lang.Object)>": 0.6297913228795095
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: boolean equals(java.lang.Object)>": 0.6214176095106706
        }
    ], 
    "<com.flowpowered.react.collision.shape.ConvexMeshShape: void recalculateBounds()>": [
        {
            "<Catalano.Math.Vector4: boolean equals(java.lang.Object)>": 0.26525111274432017
        }, 
        {
            "<Catalano.Math.Vector3: float getMin()>": 0.26359487772704765
        }, 
        {
            "<Catalano.Math.Vector3: float getMax()>": 0.26359487772704765
        }, 
        {
            "<boofcv.alg.distort.DistortImageOps: void updateBoundBox(boofcv.struct.distort.PixelTransform_F32,boofcv.struct.ImageRectangle_F32)>": 0.2609623712841416
        }, 
        {
            "<Catalano.Math.Vector3: boolean equals(java.lang.Object)>": 0.25750445867323707
        }
    ], 
    "<com.flowpowered.react.math.Vector4: com.flowpowered.react.math.Vector4 negate(com.flowpowered.react.math.Vector4)>": [
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector4 Abs()>": 0.38233862583916856
        }, 
        {
            "<Catalano.Math.Vector3: Catalano.Math.Vector3 Abs()>": 0.3737016701833154
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.DebugDrawJ2D$1: java.lang.Object newColor(float,float,float,float)>": 0.3626550530463196
        }, 
        {
            "<org.jbox2d.common.Mat22: org.jbox2d.common.Mat22 abs()>": 0.35783676058698904
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 abs()>": 0.35618595459207325
        }
    ], 
    "<com.flowpowered.react.collision.RayCaster: java.util.Map findIntersectingBodies(com.flowpowered.react.math.Vector3,com.flowpowered.react.math.Vector3,java.util.Collection)>": [
        {
            "<org.dyn4j.sandbox.input.Mouse: void clear()>": 0.2387052614521986
        }, 
        {
            "<Catalano.Core.Concurrent.MulticoreExecutor: java.util.List run(java.util.Collection)>": 0.23613720543214678
        }, 
        {
            "<org.dyn4j.dynamics.contact.SimpleContactManager: void shift(org.dyn4j.geometry.Vector2)>": 0.2326961853912396
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void updateRigidBodiesAABB()>": 0.2026770567988719
        }, 
        {
            "<boofcv.gui.binary.VisualizeBinaryData: void renderExternal(java.util.List,boolean,boolean,double,java.awt.Graphics2D)>": 0.1999434773369269
        }
    ], 
    "<com.flowpowered.react.collision.CollisionDetection: void addNoCollisionPair(com.flowpowered.react.body.CollisionBody,com.flowpowered.react.body.CollisionBody)>": [
        {
            "<net.smert.jreactphysics3d.collision.broadphase.NoBroadPhaseAlgorithm: void addObject(net.smert.jreactphysics3d.body.CollisionBody,net.smert.jreactphysics3d.collision.shapes.AABB)>": 0.08537180095963634
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void resetBodiesMovementVariable()>": 0.08040844011283461
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: net.smert.jreactphysics3d.body.RigidBody createRigidBody(net.smert.jreactphysics3d.mathematics.Transform,float,net.smert.jreactphysics3d.mathematics.Matrix3x3,net.smert.jreactphysics3d.collision.shapes.CollisionShape)>": 0.07784768210238668
        }, 
        {
            "<net.smert.jreactphysics3d.engine.CollisionWorld: void destroyCollisionBody(net.smert.jreactphysics3d.body.CollisionBody)>": 0.07614445613640354
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void resetContactManifoldListsOfBodies()>": 0.07530800950958866
        }
    ], 
    "<com.flowpowered.react.constraint.HingeJoint: void initBeforeSolve(com.flowpowered.react.constraint.ConstraintSolver$ConstraintSolverData)>": [
        {
            "<org.jbox2d.common.MathUtils: float abs(float)>": 0.26749440341902003
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 inverse()>": 0.2646986829487917
        }, 
        {
            "<Catalano.Math.Geometry.Line: void <init>(float,float,boolean)>": 0.2631423359676983
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector2: net.smert.jreactphysics3d.mathematics.Vector2 setUnitOrthogonal()>": 0.2630292488851708
        }, 
        {
            "<boofcv.abst.feature.detect.extract.NonMaxLimiter$LocalExtreme: float getValue()>": 0.26300161986042736
        }
    ], 
    "<com.flowpowered.react.constraint.ContactPoint$ContactPointInfo: void set(com.flowpowered.react.math.Vector3,float,com.flowpowered.react.math.Vector3,com.flowpowered.react.math.Vector3)>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: void <init>(float,float,float,float,float,float,float,float,float)>": 0.1421210468304241
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: void <init>(float,float,float,float)>": 0.13947156748544298
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Quaternion: void <init>(float,float,float,float)>": 0.13947156748544298
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: void <init>(float,float,float)>": 0.13692387584150637
        }, 
        {
            "<org.jbox2d.testbed.pooling.ColorKey: void set(float,float,float)>": 0.13502635784100145
        }
    ], 
    "<com.flowpowered.react.constraint.HingeJoint: float getMotorTorque(float)>": [
        {
            "<net.smert.jreactphysics3d.constraint.HingeJoint: float getMotorTorque(float)>": 0.6371710526315789
        }, 
        {
            "<net.smert.jreactphysics3d.constraint.SliderJoint: float getMotorForce(float)>": 0.6371710526315789
        }, 
        {
            "<org.jbox2d.dynamics.joints.WheelJoint: float getMotorTorque(float)>": 0.6371710526315789
        }, 
        {
            "<org.jbox2d.dynamics.joints.PrismaticJoint: float getMotorForce(float)>": 0.6371710526315789
        }, 
        {
            "<org.jbox2d.dynamics.joints.FrictionJoint: float getReactionTorque(float)>": 0.6371710526315789
        }
    ], 
    "<com.flowpowered.react.collision.broadphase.SweepAndPruneAlgorithm: void shrinkArrays()>": [
        {
            "<boofcv.alg.misc.ImageMiscOps: void rotateCCW(boofcv.struct.image.GrayS32,boofcv.struct.image.GrayS32)>": 0.3241831938751306
        }, 
        {
            "<boofcv.alg.misc.ImageMiscOps: void rotateCW(boofcv.struct.image.GrayS32,boofcv.struct.image.GrayS32)>": 0.3241831938751306
        }, 
        {
            "<org.dyn4j.dynamics.BodyIterator: void remove()>": 0.3163980263511945
        }, 
        {
            "<org.dyn4j.dynamics.JointIterator: void remove()>": 0.3163980263511945
        }, 
        {
            "<boofcv.alg.feature.disparity.impl.ImplSelectSparseStandardWta_S32: boolean select(java.lang.Object,int)>": 0.3162128290882903
        }
    ], 
    "<com.flowpowered.react.math.Quaternion: int hashCode()>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Quaternion: int hashCode()>": 0.5219197279242994
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: int hashCode()>": 0.5152018122410957
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: int hashCode()>": 0.5131060938244338
        }, 
        {
            "<org.jbox2d.testbed.pooling.ColorKey: int hashCode()>": 0.5113415777572576
        }, 
        {
            "<net.smert.jreactphysics3d.engine.Material: int hashCode()>": 0.5098894907733246
        }
    ], 
    "<com.flowpowered.react.engine.ContactSolver: com.flowpowered.react.engine.Impulse computeFriction1Impulse(float,com.flowpowered.react.engine.ContactSolver$ContactPointSolver)>": [
        {
            "<boofcv.alg.feature.detect.line.gridline.Edgel: void <init>(float,float,float)>": 0.04307120808965034
        }, 
        {
            "<net.imglib2.type.numeric.complex.AbstractComplexType: void setComplexNumber(float,float)>": 0.04070695472596215
        }, 
        {
            "<org.jbox2d.callbacks.DebugDraw: void setCamera(float,float,float)>": 0.0402025950625807
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.DebugDrawJ2D$1: java.awt.Color newColor(float,float,float,float)>": 0.0398741059208812
        }, 
        {
            "<Catalano.Core.FloatPoint: void <init>(float,float)>": 0.03903520302671684
        }
    ], 
    "<com.flowpowered.react.engine.DynamicsWorld: void setSolveFrictionAtContactManifoldCenterActive(boolean)>": [
        {
            "<boofcv.alg.feature.detect.extract.NonMaxBlockRelaxed: void <init>(boolean,boolean)>": 0.3438694806559756
        }, 
        {
            "<boofcv.alg.feature.detect.extract.NonMaxBlockStrict: void <init>(boolean,boolean)>": 0.3438694806559756
        }, 
        {
            "<boofcv.abst.feature.associate.EnforceUniqueByScore$Describe2D: void <init>(boofcv.abst.feature.associate.AssociateDescription2D,boolean,boolean)>": 0.3144163788737706
        }, 
        {
            "<boofcv.abst.feature.associate.EnforceUniqueByScore$Describe: void <init>(boofcv.abst.feature.associate.AssociateDescription,boolean,boolean)>": 0.3144163788737706
        }, 
        {
            "<boofcv.alg.geo.calibration.Zhang99ParamAll: void <init>(boolean,int,boolean)>": 0.3144163788737706
        }
    ], 
    "<com.flowpowered.react.math.Matrix2x2: com.flowpowered.react.math.Matrix2x2 subtract(com.flowpowered.react.math.Matrix2x2)>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 abs()>": 0.33945382875652896
        }, 
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector3 toVector3()>": 0.33828269503929276
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 abs()>": 0.33723161390719814
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: net.smert.jreactphysics3d.mathematics.Vector3 abs()>": 0.33499706909238114
        }, 
        {
            "<org.jbox2d.common.Vec2: void absLocal()>": 0.3347314984388654
        }
    ], 
    "<com.flowpowered.react.math.Vector3: boolean equals(java.lang.Object)>": [
        {
            "<org.jbox2d.common.Vec2: boolean equals(java.lang.Object)>": 0.7039424359964401
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: boolean equals(java.lang.Object)>": 0.6657001560298654
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: boolean equals(java.lang.Object)>": 0.6539333556738265
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Quaternion: boolean equals(java.lang.Object)>": 0.6539333556738265
        }, 
        {
            "<org.jbox2d.testbed.pooling.ColorKey: boolean equals(java.lang.Object)>": 0.6518288447088324
        }
    ], 
    "<com.flowpowered.react.collision.CollisionDetection: com.flowpowered.react.collision.narrowphase.NarrowPhaseAlgorithm selectNarrowPhaseAlgorithm(com.flowpowered.react.collision.shape.CollisionShape,com.flowpowered.react.collision.shape.CollisionShape)>": [
        {
            "<Catalano.Imaging.Filters.GaussianBlur: void <init>()>": 0.010838874619051498
        }, 
        {
            "<Catalano.Imaging.Concurrent.Filters.BradleyLocalThreshold: void <init>()>": 0.010838874619051498
        }, 
        {
            "<Catalano.Imaging.Filters.CosineTransform: void <init>()>": 0.010838874619051498
        }, 
        {
            "<Catalano.Imaging.Filters.BradleyLocalThreshold: void <init>()>": 0.010838874619051498
        }, 
        {
            "<Catalano.Imaging.Filters.UnsharpMasking: void <init>()>": 0.010838874619051498
        }
    ], 
    "<com.flowpowered.react.collision.shape.BoxShape: com.flowpowered.react.math.Vector3 getLocalSupportPointWithoutMargin(com.flowpowered.react.math.Vector3)>": [
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector4 Abs()>": 0.3287444213710996
        }, 
        {
            "<Catalano.Math.Vector3: Catalano.Math.Vector3 Abs()>": 0.32110468250700885
        }, 
        {
            "<net.smert.jreactphysics3d.collision.shapes.BoxShape: net.smert.jreactphysics3d.mathematics.Vector3 getLocalSupportPointWithMargin(net.smert.jreactphysics3d.mathematics.Vector3,net.smert.jreactphysics3d.mathematics.Vector3)>": 0.3124227742077698
        }, 
        {
            "<org.jbox2d.common.MathUtils: float reduceAngle(float)>": 0.3102169257830433
        }, 
        {
            "<org.jbox2d.dynamics.contacts.Contact: float mixFriction(float,float)>": 0.30847245247024957
        }
    ], 
    "<com.flowpowered.react.engine.DynamicsWorld: com.flowpowered.react.body.RigidBody createRigidBody(com.flowpowered.react.math.Transform,float,com.flowpowered.react.collision.shape.CollisionShape)>": [
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: net.smert.jreactphysics3d.body.RigidBody createRigidBody(net.smert.jreactphysics3d.mathematics.Transform,float,net.smert.jreactphysics3d.mathematics.Matrix3x3,net.smert.jreactphysics3d.collision.shapes.CollisionShape)>": 0.17044828175122603
        }, 
        {
            "<boofcv.factory.feature.detect.extract.FactoryFeatureExtractor: boofcv.abst.feature.detect.extract.NonMaxSuppression nonmax(boofcv.abst.feature.detect.extract.ConfigExtract)>": 0.13885151859057557
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void updateRigidBodiesAABB()>": 0.13866691733518008
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void setInterpolationFactorToAllBodies()>": 0.13202838639001538
        }, 
        {
            "<net.imglib2.view.TransformBuilder: void simplifyTransforms()>": 0.13161611851821636
        }
    ], 
    "<com.flowpowered.react.math.Matrix3x3: com.flowpowered.react.math.Matrix3x3 set(com.flowpowered.react.math.Matrix3x3)>": [
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector4 Abs()>": 0.4141491966212041
        }, 
        {
            "<Catalano.Math.Vector3: Catalano.Math.Vector3 Abs()>": 0.40510333768308204
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.DebugDrawJ2D$1: java.lang.Object newColor(float,float,float,float)>": 0.39233973131595373
        }, 
        {
            "<org.jbox2d.common.Mat22: org.jbox2d.common.Mat22 abs()>": 0.3881693482395997
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 abs()>": 0.38291992756933246
        }
    ], 
    "<com.flowpowered.react.collision.broadphase.BroadPhaseAlgorithm: void <init>(com.flowpowered.react.collision.CollisionDetection)>": [
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.10115513757351567
        }, 
        {
            "<org.dyn4j.sandbox.Sandbox: void init(com.jogamp.opengl.GLAutoDrawable)>": 0.09549225149960087
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.TestbedMain: void main(java.lang.String[])>": 0.09363821838346235
        }, 
        {
            "<org.dyn4j.sandbox.panels.LineGraphPanel: void setStaticSize(java.awt.Dimension)>": 0.09223309842157773
        }, 
        {
            "<boofcv.gui.d3.Polygon3DSequenceViewer: void <init>()>": 0.09199750902424841
        }
    ], 
    "<com.flowpowered.react.constraint.ContactPoint$ContactPointInfo: void setSecondLocalPoint(com.flowpowered.react.math.Vector3)>": [
        {
            "<Catalano.Imaging.Filters.GaussianBlur: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Concurrent.Filters.BradleyLocalThreshold: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.CosineTransform: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.BradleyLocalThreshold: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.UnsharpMasking: void <init>()>": 0.018184824186332698
        }
    ], 
    "<com.flowpowered.react.constraint.ContactPoint$ContactPointInfo: void <init>()>": [
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.09961069363314852
        }, 
        {
            "<org.dyn4j.sandbox.Sandbox: void init(com.jogamp.opengl.GLAutoDrawable)>": 0.09260950726228533
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.TestbedMain: void main(java.lang.String[])>": 0.09220854330774995
        }, 
        {
            "<boofcv.demonstrations.transform.pyramid.EdgeIntensitiesApp: void main(java.lang.String[])>": 0.08808752638635535
        }, 
        {
            "<boofcv.demonstrations.tracker.CirculantVisualizationPanel: void <init>(boofcv.demonstrations.tracker.CirculantVisualizationPanel$Listener)>": 0.08723142242728905
        }
    ], 
    "<com.flowpowered.react.math.Transform: boolean equals(java.lang.Object)>": [
        {
            "<org.dyn4j.sandbox.panels.PulleyJointPanel: boolean isValidInput()>": 0.3239429599645206
        }, 
        {
            "<org.dyn4j.sandbox.panels.AngleJointPanel: boolean isValidInput()>": 0.2856255274351019
        }, 
        {
            "<org.dyn4j.sandbox.panels.RopeJointPanel: boolean isValidInput()>": 0.2856255274351019
        }, 
        {
            "<boofcv.demonstrations.sfm.d2.ImageMotionInfoPanel: boolean resetRequested()>": 0.2697033414772155
        }, 
        {
            "<org.dyn4j.collision.broadphase.BroadphaseKey: boolean equals(java.lang.Object)>": 0.255957046336312
        }
    ], 
    "<com.flowpowered.react.math.Matrix3x3: com.flowpowered.react.math.Matrix3x3 computeSkewSymmetricMatrixForCrossProduct(com.flowpowered.react.math.Vector3)>": [
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector4 Abs()>": 0.36161047776665844
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.DebugDrawJ2D$1: java.lang.Object newColor(float,float,float,float)>": 0.35912108781071517
        }, 
        {
            "<Catalano.Math.Vector3: Catalano.Math.Vector3 Abs()>": 0.353344032161056
        }, 
        {
            "<org.jbox2d.common.Vec3: org.jbox2d.common.Vec3 negate()>": 0.3458326990562683
        }, 
        {
            "<org.jbox2d.common.Mat22: org.jbox2d.common.Mat22 abs()>": 0.337318317446949
        }
    ], 
    "<com.flowpowered.react.collision.narrowphase.EPA.TrianglesStore: com.flowpowered.react.collision.narrowphase.EPA.TriangleEPA last()>": [
        {
            "<boofcv.alg.segmentation.watershed.WatershedVincentSoille1991: int getTotalRegions()>": 0.32365754272865316
        }, 
        {
            "<net.imglib2.img.planar.PlanarImg: net.imglib2.img.basictypeaccess.array.ArrayDataAccess update(java.lang.Object)>": 0.2731509819648409
        }, 
        {
            "<net.imglib2.util.RealSum: void <init>(int)>": 0.26643257711159624
        }, 
        {
            "<Catalano.Imaging.Tools.BlobDetection: void ShuffleColor()>": 0.2660708698003367
        }, 
        {
            "<boofcv.alg.filter.binary.LinearContourLabelChang2004: void process(boofcv.struct.image.GrayU8,boofcv.struct.image.GrayS32)>": 0.2630286282295772
        }
    ], 
    "<com.flowpowered.react.collision.shape.ConvexMeshShape: void getLocalBounds(com.flowpowered.react.math.Vector3,com.flowpowered.react.math.Vector3)>": [
        {
            "<Catalano.Imaging.Filters.GaussianBlur: void <init>()>": 0.009356014857063997
        }, 
        {
            "<Catalano.Imaging.Concurrent.Filters.BradleyLocalThreshold: void <init>()>": 0.009356014857063997
        }, 
        {
            "<Catalano.Imaging.Filters.CosineTransform: void <init>()>": 0.009356014857063997
        }, 
        {
            "<Catalano.Imaging.Filters.BradleyLocalThreshold: void <init>()>": 0.009356014857063997
        }, 
        {
            "<Catalano.Imaging.Filters.UnsharpMasking: void <init>()>": 0.009356014857063997
        }
    ], 
    "<com.flowpowered.react.Utilities$IntPair: void <init>(int,int)>": [
        {
            "<boofcv.alg.misc.PixelMath: void plus_A(int[],int,int,int,int,int,int[],int,int,int,int)>": 0.5147169131090034
        }, 
        {
            "<boofcv.alg.misc.PixelMath: void minus_B(int[],int,int,int,int,int,int[],int,int,int,int)>": 0.5147169131090034
        }, 
        {
            "<boofcv.alg.misc.PixelMath: void minus_A(int[],int,int,int,int,int,int[],int,int,int,int)>": 0.5147169131090034
        }, 
        {
            "<boofcv.alg.misc.PixelMath: void minus_A(byte[],int,int,int,int,int,byte[],int,int,int,int)>": 0.5117942040273815
        }, 
        {
            "<boofcv.alg.misc.PixelMath: void plus_A(byte[],int,int,int,int,int,byte[],int,int,int,int)>": 0.5117942040273815
        }
    ], 
    "<com.flowpowered.react.collision.narrowphase.EPA.TrianglesStore: com.flowpowered.react.collision.narrowphase.EPA.TriangleEPA get(int)>": [
        {
            "<boofcv.core.image.border.ImageBorderValue$Value_I: void setOutside(int,int,int)>": 0.4966616068166122
        }, 
        {
            "<org.dyn4j.examples.ExampleJOGL: void reshape(com.jogamp.opengl.GLAutoDrawable,int,int,int,int)>": 0.4893146606557609
        }, 
        {
            "<net.coobird.thumbnailator.geometry.Positions$1: java.awt.Point calculate(int,int,int,int,int,int,int,int)>": 0.47437111780712504
        }, 
        {
            "<Catalano.Imaging.Tools.IntegralImage: int getInternalData(int,int)>": 0.46420451256364215
        }, 
        {
            "<net.coobird.thumbnailator.geometry.Coordinate: java.awt.Point calculate(int,int,int,int,int,int,int,int)>": 0.4578204272586427
        }
    ], 
    "<com.flowpowered.react.math.Vector4: com.flowpowered.react.math.Vector4 getAbsoluteVector()>": [
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector4 Abs()>": 0.48862274836942077
        }, 
        {
            "<Catalano.Math.Vector3: Catalano.Math.Vector3 Abs()>": 0.47727150516944095
        }, 
        {
            "<org.jbox2d.common.Mat22: org.jbox2d.common.Mat22 abs()>": 0.4588223275804128
        }, 
        {
            "<org.jbox2d.common.Vec2: org.jbox2d.common.Vec2 abs()>": 0.4485610059407519
        }, 
        {
            "<org.jbox2d.common.Vec2: org.jbox2d.common.Vec2 abs(org.jbox2d.common.Vec2)>": 0.4313679231206226
        }
    ], 
    "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 add(com.flowpowered.react.math.Matrix4x4)>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 abs()>": 0.3517105464432406
        }, 
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector3 toVector3()>": 0.3501787201706022
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 abs()>": 0.3491305406397294
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: net.smert.jreactphysics3d.mathematics.Vector3 abs()>": 0.34665225968207736
        }, 
        {
            "<org.jbox2d.common.Vec2: void absLocal()>": 0.34602535741879636
        }
    ], 
    "<com.flowpowered.react.body.RigidBody: void <init>(com.flowpowered.react.math.Transform,float,com.flowpowered.react.math.Matrix3x3,com.flowpowered.react.collision.shape.CollisionShape,int)>": [
        {
            "<boofcv.alg.weights.WeightDistanceUniform_F32: void <init>(float)>": 0.15049636667471072
        }, 
        {
            "<boofcv.alg.interpolate.impl.ImplPolynomialPixel_F32: void <init>(int,float,float)>": 0.14052076874261993
        }, 
        {
            "<boofcv.alg.interpolate.impl.ImplPolynomialPixel_I: void <init>(int,float,float)>": 0.14052076874261993
        }, 
        {
            "<boofcv.alg.feature.detect.intensity.impl.ImplHarrisCornerWeighted_S16: void <init>(int,float)>": 0.13951077647080284
        }, 
        {
            "<boofcv.alg.feature.detect.intensity.impl.ImplHarrisCorner_S16: void <init>(int,float)>": 0.13951077647080284
        }
    ], 
    "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 multiply(float)>": [
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector3 toVector3()>": 0.27604749429682685
        }, 
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector4 Subtract(Catalano.Math.Vector4,Catalano.Math.Vector4)>": 0.2639817964249126
        }, 
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector4 Multiply(Catalano.Math.Vector4,Catalano.Math.Vector4)>": 0.2639817964249126
        }, 
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector4 Divide(Catalano.Math.Vector4,Catalano.Math.Vector4)>": 0.2639817964249126
        }, 
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector4 Add(Catalano.Math.Vector4,Catalano.Math.Vector4)>": 0.2639817964249126
        }
    ], 
    "<com.flowpowered.react.math.Vector4: void setAllValues(float,float,float,float)>": [
        {
            "<org.jbox2d.common.MathUtils: float clamp(float,float,float)>": 0.5142989057862314
        }, 
        {
            "<org.jbox2d.dynamics.contacts.Contact: float mixFriction(float,float)>": 0.5108382314201412
        }, 
        {
            "<org.jbox2d.common.Settings: float mixFriction(float,float)>": 0.5108382314201412
        }, 
        {
            "<net.smert.jreactphysics3d.engine.Profiler: float GetElapsedTimeSinceStart()>": 0.49852844439741095
        }, 
        {
            "<boofcv.alg.color.ColorRgb: float rgbToGray_Weighted(float,float,float)>": 0.4958849490150633
        }
    ], 
    "<com.flowpowered.react.math.Matrix3x3: float get(int,int)>": [
        {
            "<boofcv.alg.weights.WeightPixelUniform_F32: float weight(int,int)>": 0.5495285270308691
        }, 
        {
            "<boofcv.core.image.border.ImageBorderValue$Value_F32: float getOutside(int,int)>": 0.5495285270308691
        }, 
        {
            "<boofcv.core.image.border.ImageBorderValue$Value_F32: void setOutside(int,int,float)>": 0.5183933767987647
        }, 
        {
            "<boofcv.core.image.border.ImageBorderValue$Value_I: void setOutside(int,int,int)>": 0.5073434279468665
        }, 
        {
            "<org.dyn4j.examples.ExampleJOGL: void reshape(com.jogamp.opengl.GLAutoDrawable,int,int,int,int)>": 0.500393775723844
        }
    ], 
    "<com.flowpowered.react.constraint.SliderJoint: void solveVelocityConstraint(com.flowpowered.react.constraint.ConstraintSolver$ConstraintSolverData)>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 inverse()>": 0.29008955538960157
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 multiply(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": 0.2862563037578704
        }, 
        {
            "<org.jbox2d.dynamics.contacts.PositionSolverManifold: void initialize(org.jbox2d.dynamics.contacts.ContactPositionConstraint,org.jbox2d.common.Transform,org.jbox2d.common.Transform,int)>": 0.2855847836860357
        }, 
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.28435492483392966
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.28383006035492475
        }
    ], 
    "<com.flowpowered.react.collision.broadphase.PairManager: boolean isDifferentPair(com.flowpowered.react.collision.broadphase.PairManager$BodyPair,int,int)>": [
        {
            "<boofcv.struct.image.ImageBase: boolean isInBounds(int,int)>": 0.6310932009032825
        }, 
        {
            "<boofcv.struct.flow.ImageFlow: boolean isInBounds(int,int)>": 0.6310932009032825
        }, 
        {
            "<boofcv.struct.feature.MatrixOfList: boolean isInBounds(int,int)>": 0.6310932009032825
        }, 
        {
            "<boofcv.core.image.border.ImageBorderValue$Value_I: void setOutside(int,int,int)>": 0.5924673496599778
        }, 
        {
            "<org.dyn4j.examples.ExampleJOGL: void reshape(com.jogamp.opengl.GLAutoDrawable,int,int,int,int)>": 0.5854825557165404
        }
    ], 
    "<com.flowpowered.react.constraint.BallAndSocketJoint: void solveVelocityConstraint(com.flowpowered.react.constraint.ConstraintSolver$ConstraintSolverData)>": [
        {
            "<org.dyn4j.collision.manifold.IndexedManifoldPointId: boolean equals(java.lang.Object)>": 0.06102938425066391
        }, 
        {
            "<boofcv.struct.image.ImageBase: boolean isInBounds(int,int)>": 0.05985120452487043
        }, 
        {
            "<boofcv.struct.flow.ImageFlow: boolean isInBounds(int,int)>": 0.05985120452487043
        }, 
        {
            "<boofcv.struct.feature.MatrixOfList: boolean isInBounds(int,int)>": 0.05985120452487043
        }, 
        {
            "<Catalano.Imaging.Filters.VerticalRunLengthSmoothing: void applyInPlace(Catalano.Imaging.FastBitmap)>": 0.05977875136353449
        }
    ], 
    "<com.flowpowered.react.collision.CollisionDetection: void addBody(com.flowpowered.react.body.CollisionBody)>": [
        {
            "<org.dyn4j.sandbox.panels.LineGraphPanel: void setStaticSize(java.awt.Dimension)>": 0.06666666666666665
        }, 
        {
            "<org.jbox2d.testbed.tests.DrawingParticles: void step(org.jbox2d.testbed.framework.TestbedSettings)>": 0.06454972243679029
        }, 
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.06397612635199752
        }, 
        {
            "<boofcv.gui.feature.SelectRegionDescriptionPanel: void <init>()>": 0.06329621044272916
        }, 
        {
            "<boofcv.gui.d3.Polygon3DSequenceViewer: void <init>()>": 0.06266005147845038
        }
    ], 
    "<com.flowpowered.react.collision.narrowphase.GJK.Simplex: boolean computeClosestPoint(com.flowpowered.react.math.Vector3)>": [
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: boolean isValidSubset(int)>": 0.47266314776645896
        }, 
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: boolean computeClosestPoint(net.smert.jreactphysics3d.mathematics.Vector3)>": 0.46549928757319103
        }, 
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: boolean isProperSubset(int)>": 0.41684146252223486
        }, 
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: void addPoint(net.smert.jreactphysics3d.mathematics.Vector3,net.smert.jreactphysics3d.mathematics.Vector3,net.smert.jreactphysics3d.mathematics.Vector3)>": 0.38981059220174735
        }, 
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: void backupClosestPointInSimplex(net.smert.jreactphysics3d.mathematics.Vector3)>": 0.38442512087692216
        }
    ], 
    "<com.flowpowered.react.collision.shape.ConeShape: void <init>(float,float,float)>": [
        {
            "<boofcv.alg.weights.WeightDistanceSqGaussian_F32: float weight(float)>": 0.42891252699474586
        }, 
        {
            "<boofcv.alg.feature.detect.intensity.impl.ImplShiTomasiCorner_F32: float computeIntensity()>": 0.41065326632511245
        }, 
        {
            "<boofcv.alg.feature.detect.intensity.impl.ImplShiTomasiCornerWeighted_F32: float computeResponse()>": 0.41065326632511245
        }, 
        {
            "<org.jbox2d.common.MathUtils: float clamp(float,float,float)>": 0.40525161538002746
        }, 
        {
            "<org.jbox2d.dynamics.contacts.Contact: float mixFriction(float,float)>": 0.40152671789373096
        }
    ], 
    "<com.flowpowered.react.constraint.FixedJoint: void <init>(com.flowpowered.react.constraint.FixedJoint$FixedJointInfo)>": [
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.08916648909004606
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.TestbedMain: void main(java.lang.String[])>": 0.08254045595887138
        }, 
        {
            "<org.dyn4j.sandbox.Sandbox: void init(com.jogamp.opengl.GLAutoDrawable)>": 0.08201642678591467
        }, 
        {
            "<boofcv.demonstrations.transform.pyramid.EdgeIntensitiesApp: void main(java.lang.String[])>": 0.07885152862628281
        }, 
        {
            "<boofcv.demonstrations.tracker.CirculantVisualizationPanel: void <init>(boofcv.demonstrations.tracker.CirculantVisualizationPanel$Listener)>": 0.07730172394930596
        }
    ], 
    "<com.flowpowered.react.collision.shape.CylinderShape: float getHeight()>": [
        {
            "<net.smert.jreactphysics3d.collision.shapes.CylinderShape: float getHeight()>": 0.4907407407407407
        }, 
        {
            "<net.smert.jreactphysics3d.collision.shapes.CapsuleShape: float getHeight()>": 0.4907407407407407
        }, 
        {
            "<net.smert.jreactphysics3d.collision.shapes.ConeShape: float getHeight()>": 0.4907407407407407
        }, 
        {
            "<net.smert.jreactphysics3d.constraint.HingeJoint: float getMotorTorque(float)>": 0.48845356531534173
        }, 
        {
            "<net.smert.jreactphysics3d.constraint.SliderJoint: float getMotorForce(float)>": 0.48845356531534173
        }
    ], 
    "<com.flowpowered.react.constraint.Joint$JointListElement: void <init>(com.flowpowered.react.constraint.Joint,com.flowpowered.react.constraint.Joint$JointListElement)>": [
        {
            "<org.dyn4j.sandbox.panels.LineGraphPanel: void setStaticSize(java.awt.Dimension)>": 0.049690399499995326
        }, 
        {
            "<org.jbox2d.testbed.tests.DrawingParticles: void step(org.jbox2d.testbed.framework.TestbedSettings)>": 0.048112522432468816
        }, 
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.04768498915339404
        }, 
        {
            "<boofcv.gui.feature.SelectRegionDescriptionPanel: void <init>()>": 0.047178209756024825
        }, 
        {
            "<boofcv.gui.d3.Polygon3DSequenceViewer: void <init>()>": 0.046704044859817086
        }
    ], 
    "<com.flowpowered.react.collision.shape.CylinderShape: void <init>(float,float,float)>": [
        {
            "<boofcv.factory.background.ConfigBackgroundGaussian: void checkValidity()>": 0.44460164979067474
        }, 
        {
            "<boofcv.factory.background.ConfigBackgroundBasic: void checkValidity()>": 0.40255652009330645
        }, 
        {
            "<boofcv.alg.background.stationary.BackgroundStationaryGaussian: void <init>(float,float,boofcv.struct.image.ImageType)>": 0.3823040490493085
        }, 
        {
            "<boofcv.alg.background.stationary.BackgroundStationaryBasic: void <init>(float,float,boofcv.struct.image.ImageType)>": 0.3708600087861736
        }, 
        {
            "<boofcv.alg.background.moving.BackgroundMovingGaussian: void <init>(float,float,boofcv.struct.distort.PointTransformModel_F32,boofcv.struct.image.ImageType)>": 0.37044442959271573
        }
    ], 
    "<com.flowpowered.react.math.Quaternion: void setAllValues(float,float,float,float)>": [
        {
            "<org.jbox2d.common.MathUtils: float clamp(float,float,float)>": 0.5142989057862314
        }, 
        {
            "<org.jbox2d.dynamics.contacts.Contact: float mixFriction(float,float)>": 0.5108382314201412
        }, 
        {
            "<org.jbox2d.common.Settings: float mixFriction(float,float)>": 0.5108382314201412
        }, 
        {
            "<net.smert.jreactphysics3d.engine.Profiler: float GetElapsedTimeSinceStart()>": 0.49852844439741095
        }, 
        {
            "<boofcv.alg.color.ColorRgb: float rgbToGray_Weighted(float,float,float)>": 0.4958849490150633
        }
    ], 
    "<com.flowpowered.react.math.Vector4: int getMinAxis()>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: int getMaxAxis()>": 0.4061820467193259
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: int getMinAxis()>": 0.4037701911177416
        }, 
        {
            "<Catalano.Math.Vector3: int getMinIndex()>": 0.4037701911177416
        }, 
        {
            "<Catalano.Math.Vector3: int getMaxIndex()>": 0.4037701911177416
        }, 
        {
            "<Catalano.Math.Vector4: int getMinIndex()>": 0.3832475293258679
        }
    ], 
    "<com.flowpowered.react.collision.narrowphase.EPA.TriangleEPA: boolean isClosestPointInternalToTriangle()>": [
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.EPA.TriangleEPA: boolean isClosestPointInternalToTriangle()>": 0.6036229395604396
        }, 
        {
            "<Catalano.Core.FloatRange: boolean IsOverlapping(Catalano.Core.FloatRange)>": 0.49511829796732376
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Mathematics: boolean ApproxEqual(float,float,float)>": 0.47760321143579343
        }, 
        {
            "<Catalano.Core.FloatRange: boolean isInside(float)>": 0.4709173404976543
        }, 
        {
            "<Catalano.Math.Geometry.Line: boolean isHorizontal()>": 0.4669177083297892
        }
    ], 
    "<com.flowpowered.react.engine.DynamicsWorld: void destroyRigidBodyImmediately(com.flowpowered.react.body.RigidBody)>": [
        {
            "<boofcv.demonstrations.tracker.VideoTrackerObjectQuadApp: void process(boofcv.io.image.SimpleImageSequence)>": 0.14653254766818377
        }, 
        {
            "<boofcv.alg.feature.detect.interest.GeneralFeatureDetector: void <init>(boofcv.abst.feature.detect.intensity.GeneralFeatureIntensity,boofcv.abst.feature.detect.extract.NonMaxSuppression)>": 0.1426499791656161
        }, 
        {
            "<net.imglib2.view.TransformBuilder: void simplifyTransforms()>": 0.14052506793137565
        }, 
        {
            "<org.dyn4j.sandbox.Sandbox: void renderBody(com.jogamp.opengl.GL2,org.dyn4j.sandbox.SandboxBody)>": 0.14009294220688076
        }, 
        {
            "<boofcv.demonstrations.fiducial.FiducialTrackerApp: void process(boofcv.io.image.SimpleImageSequence)>": 0.13965075937499577
        }
    ], 
    "<com.flowpowered.react.engine.ContactManifold: void addContactPoint(com.flowpowered.react.constraint.ContactPoint)>": [
        {
            "<boofcv.alg.feature.detect.template.TemplateNCC$U8: void setupTemplate(boofcv.struct.image.GrayU8)>": 0.16654436225459432
        }, 
        {
            "<boofcv.alg.flow.DenseOpticalFlowBlockPyramid: void checkNeighbors(int,int,boofcv.struct.flow.ImageFlow$D,boofcv.struct.flow.ImageFlow,float)>": 0.16650009726194154
        }, 
        {
            "<org.jbox2d.particle.ParticleSystem: org.jbox2d.particle.ParticleGroup createParticleGroup(org.jbox2d.particle.ParticleGroupDef)>": 0.16646548568804545
        }, 
        {
            "<boofcv.alg.feature.detect.template.TemplateNCC$F32: void setupTemplate(boofcv.struct.image.GrayF32)>": 0.1663306455850393
        }, 
        {
            "<boofcv.alg.feature.disparity.impl.ImplSelectSparseStandardWta_F32: boolean select(java.lang.Object,int)>": 0.16432900762467975
        }
    ], 
    "<com.flowpowered.react.collision.broadphase.NoBroadPhaseAlgorithm: void <init>(com.flowpowered.react.collision.CollisionDetection)>": [
        {
            "<net.smert.jreactphysics3d.collision.broadphase.NoBroadPhaseAlgorithm: void <init>(net.smert.jreactphysics3d.collision.CollisionDetection)>": 0.3055555555555556
        }, 
        {
            "<net.smert.jreactphysics3d.collision.CollisionDetection: void <init>(net.smert.jreactphysics3d.engine.CollisionWorld)>": 0.20329429139583322
        }, 
        {
            "<net.smert.jreactphysics3d.engine.CollisionWorld: void <init>()>": 0.20325575774738594
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void <init>(net.smert.jreactphysics3d.mathematics.Vector3,float)>": 0.18838352306263006
        }, 
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.12795225270399505
        }
    ], 
    "<com.flowpowered.react.math.Matrix3x3: com.flowpowered.react.math.Matrix3x3 add(com.flowpowered.react.math.Matrix3x3,com.flowpowered.react.math.Matrix3x3)>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 abs()>": 0.44000705763487014
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 abs()>": 0.43667075188014437
        }, 
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector3 toVector3()>": 0.43529788976448547
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: net.smert.jreactphysics3d.mathematics.Vector3 abs()>": 0.4335084999809011
        }, 
        {
            "<org.jbox2d.common.Vec2: void absLocal()>": 0.43239551268294096
        }
    ], 
    "<com.flowpowered.react.engine.Island: void addBody(com.flowpowered.react.body.RigidBody)>": [
        {
            "<org.dyn4j.dynamics.Body: void setAutoSleepingEnabled(boolean)>": 0.2883841471381636
        }, 
        {
            "<Catalano.Imaging.Tools.QuadrilateralTransformation: void setNewWidth(int)>": 0.2847730365646276
        }, 
        {
            "<Catalano.Imaging.Tools.QuadrilateralTransformation: void setNewHeight(int)>": 0.2847730365646276
        }, 
        {
            "<Catalano.Imaging.Tools.BlobDetection: void ShuffleColor()>": 0.28250388734591414
        }, 
        {
            "<boofcv.alg.shapes.polygon.BinaryPolygonDetector: void setNumberOfSides(int,int)>": 0.28180982018796985
        }
    ], 
    "<com.flowpowered.react.engine.DynamicsWorld: void tick()>": [
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void computeIslands()>": 0.3519913582687932
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void update()>": 0.3492402192484675
        }, 
        {
            "<Catalano.Imaging.Tools.ShapeDescriptors: java.util.List UltimateErodedPoints(Catalano.Imaging.FastBitmap)>": 0.3095123082080368
        }, 
        {
            "<net.imglib2.KDTree: boolean verifyDimensions(java.util.List,int)>": 0.2950285683117256
        }, 
        {
            "<Catalano.Imaging.Filters.VerticalRunLengthSmoothing: void applyInPlace(Catalano.Imaging.FastBitmap)>": 0.2865260063443637
        }
    ], 
    "<com.flowpowered.react.math.Mathematics: boolean approxEquals(float,float,float)>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Mathematics: boolean ApproxEqual(float,float,float)>": 1.0
        }, 
        {
            "<Catalano.Core.FloatRange: boolean IsOverlapping(Catalano.Core.FloatRange)>": 0.5318046064335171
        }, 
        {
            "<Catalano.Core.FloatRange: boolean isInside(float)>": 0.5213138327324309
        }, 
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.EPA.TriangleEPA: boolean isClosestPointInternalToTriangle()>": 0.47760321143579343
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Mathematics: float Clamp(float,float,float)>": 0.45783267043262843
        }
    ], 
    "<com.flowpowered.react.collision.shape.SphereShape: void getLocalBounds(com.flowpowered.react.math.Vector3,com.flowpowered.react.math.Vector3)>": [
        {
            "<boofcv.factory.background.FactoryBackgroundModel: boofcv.alg.background.stationary.BackgroundStationaryGaussian stationaryGaussian(boofcv.factory.background.ConfigBackgroundGaussian,boofcv.struct.image.ImageType)>": 0.3294685472116049
        }, 
        {
            "<boofcv.factory.background.FactoryBackgroundModel: boofcv.alg.background.moving.BackgroundMovingGaussian movingGaussian(boofcv.factory.background.ConfigBackgroundGaussian,boofcv.struct.distort.PointTransformModel_F32,boofcv.struct.image.ImageType)>": 0.31542162930486545
        }, 
        {
            "<net.imglib2.type.numeric.complex.AbstractComplexType: void setComplexNumber(float,float)>": 0.3140962566271016
        }, 
        {
            "<boofcv.factory.background.FactoryBackgroundModel: boofcv.alg.background.stationary.BackgroundStationaryBasic stationaryBasic(boofcv.factory.background.ConfigBackgroundBasic,boofcv.struct.image.ImageType)>": 0.30771136075016814
        }, 
        {
            "<org.jbox2d.callbacks.DebugDraw: void setCamera(float,float,float)>": 0.30701656751770257
        }
    ], 
    "<com.flowpowered.react.collision.RayCaster$IntersectedBody: void <init>(com.flowpowered.react.body.CollisionBody,com.flowpowered.react.math.Vector3)>": [
        {
            "<org.dyn4j.sandbox.panels.LineGraphPanel: void setStaticSize(java.awt.Dimension)>": 0.0563436169819011
        }, 
        {
            "<org.jbox2d.testbed.tests.DrawingParticles: void step(org.jbox2d.testbed.framework.TestbedSettings)>": 0.0545544725589981
        }, 
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.05406969538743988
        }, 
        {
            "<boofcv.gui.feature.SelectRegionDescriptionPanel: void <init>()>": 0.05349506156386412
        }, 
        {
            "<boofcv.gui.d3.Polygon3DSequenceViewer: void <init>()>": 0.05295740910852022
        }
    ], 
    "<com.flowpowered.react.math.Transform: void setOrientation(com.flowpowered.react.math.Quaternion)>": [
        {
            "<Catalano.Imaging.Filters.GaussianBlur: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Concurrent.Filters.BradleyLocalThreshold: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.CosineTransform: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.BradleyLocalThreshold: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.UnsharpMasking: void <init>()>": 0.018184824186332698
        }
    ], 
    "<com.flowpowered.react.math.Transform: int hashCode()>": [
        {
            "<Catalano.Core.IntPoint: int hashCode()>": 0.39244301178161445
        }, 
        {
            "<boofcv.alg.feature.describe.DescribeSiftCommon: int getDescriptorLength()>": 0.3869035467634413
        }, 
        {
            "<boofcv.alg.filter.misc.ImplAverageDownSampleN: void down(boofcv.struct.image.GrayS8,int,boofcv.struct.image.GrayI8)>": 0.38300339920480586
        }, 
        {
            "<boofcv.alg.filter.misc.ImplAverageDownSampleN: void down(boofcv.struct.image.GrayU8,int,boofcv.struct.image.GrayI8)>": 0.38222131364607825
        }, 
        {
            "<boofcv.alg.filter.misc.ImplAverageDownSampleN: void down(boofcv.struct.image.GrayU16,int,boofcv.struct.image.GrayI16)>": 0.38073072326680907
        }
    ], 
    "<com.flowpowered.react.engine.ContactManifold: void clear()>": [
        {
            "<net.smert.jreactphysics3d.engine.ContactManifold: void clear()>": 0.2857582808382636
        }, 
        {
            "<Catalano.Imaging.Filters.HistogramStretch: int getMaxGray(Catalano.Imaging.FastBitmap)>": 0.2717749828079053
        }, 
        {
            "<Catalano.Imaging.Tools.BlobDetection: void ShuffleColor()>": 0.26698093205087026
        }, 
        {
            "<org.jbox2d.collision.broadphase.Pair: int compareTo(org.jbox2d.collision.broadphase.Pair)>": 0.2576696457996196
        }, 
        {
            "<Catalano.Imaging.Tools.HoughLine: int compareTo(java.lang.Object)>": 0.2561303361961954
        }
    ], 
    "<com.flowpowered.react.math.Vector4: com.flowpowered.react.math.Vector4 multiply(com.flowpowered.react.math.Vector4,float)>": [
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector4 Subtract(Catalano.Math.Vector4,float)>": 0.38179142812763506
        }, 
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector4 Add(Catalano.Math.Vector4,float)>": 0.38179142812763506
        }, 
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector4 Divide(Catalano.Math.Vector4,float)>": 0.38179142812763506
        }, 
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector4 Multiply(Catalano.Math.Vector4,float)>": 0.38179142812763506
        }, 
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector3 toVector3()>": 0.3795399567357523
        }
    ], 
    "<com.flowpowered.react.math.Matrix4x4: int hashCode()>": [
        {
            "<net.smert.jreactphysics3d.collision.BodyIndexPair: int hashCode()>": 0.3689007215729643
        }, 
        {
            "<net.smert.jreactphysics3d.collision.shapes.CollisionShape: int hashCode()>": 0.3538254133993859
        }, 
        {
            "<boofcv.alg.feature.describe.DescribeSiftCommon: int getDescriptorLength()>": 0.33927307554618297
        }, 
        {
            "<boofcv.alg.fiducial.square.DetectFiducialSquareBinary: int getTotalGridElements()>": 0.33481327372611813
        }, 
        {
            "<boofcv.app.CreateFiducialSquareBinary: int numberOfElements()>": 0.33481327372611813
        }
    ], 
    "<com.flowpowered.react.body.Body: boolean isGreaterThan(com.flowpowered.react.body.Body)>": [
        {
            "<Catalano.Core.IntRange: boolean IsOverlapping(Catalano.Core.IntRange)>": 0.5725764884716898
        }, 
        {
            "<Catalano.Imaging.Texture.BinaryPattern.UniformLocalBinaryPattern: boolean isUniform(int)>": 0.5646786348748001
        }, 
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: boolean isFull()>": 0.5639875819199924
        }, 
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.GJK.Simplex: boolean isEmpty()>": 0.5639875819199924
        }, 
        {
            "<Catalano.Core.Structs.DoubleArrayList: boolean isEmpty()>": 0.5639875819199924
        }
    ], 
    "<com.flowpowered.react.math.Matrix3x3: com.flowpowered.react.math.Vector3 multiply(com.flowpowered.react.math.Matrix3x3,com.flowpowered.react.math.Vector3)>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 inverse()>": 0.5113476315598734
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 multiply(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": 0.5091537670612456
        }, 
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.5083847070111135
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.5075165346092152
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Quaternion: net.smert.jreactphysics3d.mathematics.Quaternion fromMatrix(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": 0.5025132450465032
        }
    ], 
    "<com.flowpowered.react.collision.narrowphase.EPA.TriangleEPA: com.flowpowered.react.math.Vector3 computeClosestPointOfObject(com.flowpowered.react.math.Vector3[])>": [
        {
            "<net.smert.jreactphysics3d.collision.broadphase.SweepAndPruneAlgorithm: boolean testIntersect2D(net.smert.jreactphysics3d.collision.broadphase.BoxAABB,net.smert.jreactphysics3d.collision.broadphase.BoxAABB,int,int)>": 0.2617865372557212
        }, 
        {
            "<Catalano.Math.Dissimilarities.Dissimilarity: double Yule(int[],int[])>": 0.2562186862050214
        }, 
        {
            "<Catalano.Math.Dissimilarities.Dissimilarity: double SokalMichener(int[],int[])>": 0.2558506241068462
        }, 
        {
            "<Catalano.Math.Dissimilarities.Dissimilarity: double RogersTanimoto(int[],int[])>": 0.2558506241068462
        }, 
        {
            "<Catalano.Math.Dissimilarities.Dissimilarity: double Jaccard(int[],int[])>": 0.2527215924463465
        }
    ], 
    "<com.flowpowered.react.math.Matrix3x3: void <init>(com.flowpowered.react.math.Matrix3x3)>": [
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector4 Abs()>": 0.49335901376062063
        }, 
        {
            "<Catalano.Math.Vector3: Catalano.Math.Vector3 Abs()>": 0.48225475298559706
        }, 
        {
            "<org.jbox2d.common.Mat22: org.jbox2d.common.Mat22 abs()>": 0.46382356451529644
        }, 
        {
            "<org.jbox2d.common.Vec2: org.jbox2d.common.Vec2 abs()>": 0.45389830267596776
        }, 
        {
            "<org.jbox2d.common.Vec2: org.jbox2d.common.Vec2 abs(org.jbox2d.common.Vec2)>": 0.43779809587110663
        }
    ], 
    "<com.flowpowered.react.math.Vector4: com.flowpowered.react.math.Vector4 divide(com.flowpowered.react.math.Vector4,float)>": [
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector3 toVector3()>": 0.36851988661573315
        }, 
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector4 Subtract(Catalano.Math.Vector4,Catalano.Math.Vector4)>": 0.35378934591824385
        }, 
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector4 Multiply(Catalano.Math.Vector4,Catalano.Math.Vector4)>": 0.35378934591824385
        }, 
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector4 Divide(Catalano.Math.Vector4,Catalano.Math.Vector4)>": 0.35378934591824385
        }, 
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector4 Add(Catalano.Math.Vector4,Catalano.Math.Vector4)>": 0.35378934591824385
        }
    ], 
    "<com.flowpowered.react.engine.ContactManifold: void <init>(com.flowpowered.react.body.CollisionBody,com.flowpowered.react.body.CollisionBody)>": [
        {
            "<org.jbox2d.common.Color3f: void <init>()>": 0.10484701076891838
        }, 
        {
            "<org.jbox2d.common.Vec3: void <init>()>": 0.10484701076891838
        }, 
        {
            "<boofcv.alg.distort.DistortImageOps: georegression.struct.shapes.RectangleLength2D_F32 boundBox_F32(int,int,boofcv.struct.distort.PixelTransform_F32)>": 0.1013185531961442
        }, 
        {
            "<net.imglib2.type.numeric.complex.AbstractComplexType: void setComplexNumber(float,float)>": 0.09882973245595689
        }, 
        {
            "<boofcv.alg.distort.LensDistortionOps: georegression.struct.shapes.RectangleLength2D_F32 boundBoxInside(int,int,boofcv.struct.distort.PixelTransform_F32)>": 0.09803874967142331
        }
    ], 
    "<com.flowpowered.react.math.Quaternion: com.flowpowered.react.math.Matrix3x3 getMatrix()>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Quaternion: net.smert.jreactphysics3d.mathematics.Matrix3x3 getMatrix(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": 0.47662189316331444
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 inverse()>": 0.47023458785384337
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 multiply(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": 0.46805871499285456
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 multiply(net.smert.jreactphysics3d.mathematics.Matrix2x2)>": 0.46315543914556523
        }, 
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.462921811369456
        }
    ], 
    "<com.flowpowered.react.collision.narrowphase.EPA.TriangleEPA: void <init>(int,int,int)>": [
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.EPA.TriangleEPA: void <init>(int,int,int)>": 0.4465242477080186
        }, 
        {
            "<net.imglib2.img.basictypeaccess.array.IntArray: void setValue(int,int)>": 0.414245088828168
        }, 
        {
            "<Sort10: void swapKeys(int[],int,int)>": 0.4015103683470023
        }, 
        {
            "<Sort09: void swapKeys(int[],int,int)>": 0.4015103683470023
        }, 
        {
            "<org.jbox2d.particle.ParticleSystem: int[] reallocateBuffer(org.jbox2d.particle.ParticleSystem$ParticleBufferInt,int,int,boolean)>": 0.37010268812145247
        }
    ], 
    "<com.flowpowered.react.collision.RayCaster: boolean intersects(com.flowpowered.react.math.Vector3,com.flowpowered.react.math.Vector3,com.flowpowered.react.collision.shape.ConeShape,com.flowpowered.react.math.Vector3)>": [
        {
            "<org.jbox2d.dynamics.contacts.ContactSolver: void solveVelocityConstraints()>": 0.48434918378411573
        }, 
        {
            "<boofcv.alg.interpolate.kernel.BicubicKernel_F32: float compute(float)>": 0.4746892671875818
        }, 
        {
            "<org.jbox2d.particle.ParticleSystem: void solveElastic(org.jbox2d.dynamics.TimeStep)>": 0.4693455826877031
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: float getDeterminant()>": 0.46639035053172617
        }, 
        {
            "<boofcv.alg.distort.radtan.AddRadialPtoN_F32: void compute(float,float,georegression.struct.point.Point2D_F32)>": 0.4659685817093987
        }
    ], 
    "<com.flowpowered.react.math.Vector3: com.flowpowered.react.math.Vector3 multiply(com.flowpowered.react.math.Vector3,float)>": [
        {
            "<org.jbox2d.common.Vec3: org.jbox2d.common.Vec3 mul(float)>": 0.37374127873230995
        }, 
        {
            "<Catalano.Math.Vector3: Catalano.Math.Vector3 Divide(Catalano.Math.Vector3,float)>": 0.3640466997609855
        }, 
        {
            "<Catalano.Math.Vector3: Catalano.Math.Vector3 Multiply(Catalano.Math.Vector3,float)>": 0.3640466997609855
        }, 
        {
            "<Catalano.Math.Vector3: Catalano.Math.Vector3 Subtract(Catalano.Math.Vector3,float)>": 0.3640466997609855
        }, 
        {
            "<Catalano.Math.Vector3: Catalano.Math.Vector3 Add(Catalano.Math.Vector3,float)>": 0.3640466997609855
        }
    ], 
    "<com.flowpowered.react.collision.shape.ConvexMeshShape: void <init>(float)>": [
        {
            "<org.dyn4j.sandbox.persist.XmlReader: void <init>()>": 0.21769180720128462
        }, 
        {
            "<boofcv.alg.fiducial.calib.squares.RegularClustersIntoGrids: void <init>(int)>": 0.21492372507235674
        }, 
        {
            "<boofcv.gui.feature.ScaleSpacePyramidPointPanel: void <init>(double)>": 0.2146364729243479
        }, 
        {
            "<boofcv.alg.filter.binary.Contour: void <init>()>": 0.21453962839632285
        }, 
        {
            "<boofcv.demonstrations.calibration.ParseStereoCalibrationConfig: void <init>()>": 0.21453962839632285
        }
    ], 
    "<com.flowpowered.react.collision.shape.CapsuleShape: com.flowpowered.react.math.Vector3 getLocalSupportPointWithoutMargin(com.flowpowered.react.math.Vector3)>": [
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector4 Abs()>": 0.22617954295740564
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.DebugDrawJ2D$1: java.lang.Object newColor(float,float,float,float)>": 0.22571148437246188
        }, 
        {
            "<Catalano.Math.Vector3: Catalano.Math.Vector3 Abs()>": 0.2223182458446016
        }, 
        {
            "<org.jbox2d.common.Vec3: org.jbox2d.common.Vec3 negate()>": 0.21885688981825285
        }, 
        {
            "<boofcv.alg.feature.detect.line.gridline.Edgel: void <init>(float,float,float)>": 0.21469096261114579
        }
    ], 
    "<com.flowpowered.react.math.Vector2: com.flowpowered.react.math.Vector2 set(com.flowpowered.react.math.Vector2)>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 abs()>": 0.38402883168464874
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 abs()>": 0.382024345403456
        }, 
        {
            "<org.jbox2d.common.Vec2: void absLocal()>": 0.3798743149894491
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: net.smert.jreactphysics3d.mathematics.Vector3 abs()>": 0.3797985200017505
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 invert()>": 0.37376976198165995
        }
    ], 
    "<com.flowpowered.react.math.Vector3: float length()>": [
        {
            "<Catalano.Math.Vector3: float Norm()>": 0.5507537299939401
        }, 
        {
            "<Catalano.Math.Vector4: float Norm()>": 0.5323335658011416
        }, 
        {
            "<boofcv.alg.weights.WeightDistanceSqGaussian_F32: float weight(float)>": 0.513232074456281
        }, 
        {
            "<Catalano.Math.Vector3: float Normalize()>": 0.5048759667538303
        }, 
        {
            "<Catalano.Core.FloatPoint: float DistanceTo(Catalano.Core.FloatPoint)>": 0.4991734130431723
        }
    ], 
    "<com.flowpowered.react.constraint.SliderJoint: void enableMotor(boolean)>": [
        {
            "<Catalano.Imaging.Filters.Mirror: void <init>(boolean,boolean)>": 0.23077673742847993
        }, 
        {
            "<boofcv.alg.feature.detect.extract.NonMaxBlock: void <init>(boolean,boolean)>": 0.23077673742847993
        }, 
        {
            "<net.smert.jreactphysics3d.body.Body: void setIsSleeping(boolean)>": 0.22731469077833558
        }, 
        {
            "<boofcv.gui.calibration.CalibratedImageGridPanel: void setDisplay(boolean,boolean,boolean,boolean,boolean,double)>": 0.2221314806981181
        }, 
        {
            "<boofcv.demonstrations.calibration.SubpixelGridTargetDisplay: void setShow(boolean,boolean)>": 0.2217906806678106
        }
    ], 
    "<com.flowpowered.react.collision.narrowphase.EPA.EdgeEPA: int getTargetVertexIndex()>": [
        {
            "<org.jbox2d.common.MathUtils: int max(int,int)>": 0.45842710541514103
        }, 
        {
            "<org.jbox2d.common.MathUtils: int min(int,int)>": 0.45842710541514103
        }, 
        {
            "<org.jbox2d.particle.ParticleSystem: int limitCapacity(int,int)>": 0.45842710541514103
        }, 
        {
            "<Catalano.Imaging.Filters.Add: void <init>(int,int,int)>": 0.45059070310044413
        }, 
        {
            "<Catalano.Imaging.Filters.Subtract: void <init>(int,int,int)>": 0.45059070310044413
        }
    ], 
    "<com.flowpowered.react.engine.CollisionWorld: com.flowpowered.react.collision.RayCaster$IntersectedBody findFurthestIntersectingBody(com.flowpowered.react.math.Vector3,com.flowpowered.react.math.Vector3)>": [
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void resetBodiesMovementVariable()>": 0.05836576777194364
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: int getNumJoints()>": 0.05796736197002104
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: int getNumRigidBodies()>": 0.05796736197002104
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void resetContactManifoldListsOfBodies()>": 0.050201208056406176
        }, 
        {
            "<net.smert.jreactphysics3d.collision.broadphase.NoBroadPhaseAlgorithm: void addObject(net.smert.jreactphysics3d.body.CollisionBody,net.smert.jreactphysics3d.collision.shapes.AABB)>": 0.04634237486658291
        }
    ], 
    "<com.flowpowered.react.math.Vector4: void <init>(float,float,float,float)>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: void <init>(float,float,float,float,float,float,float,float,float)>": 0.6305295083505689
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: void <init>(float,float,float,float)>": 0.6180618128461138
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Quaternion: void <init>(float,float,float,float)>": 0.6180618128461138
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: void <init>(float,float,float)>": 0.6064048416899118
        }, 
        {
            "<org.jbox2d.testbed.pooling.ColorKey: void set(float,float,float)>": 0.597555262225389
        }
    ], 
    "<com.flowpowered.react.math.Vector3: com.flowpowered.react.math.Vector3 add(com.flowpowered.react.math.Vector3)>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 inverse()>": 0.4415537706457983
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 multiply(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": 0.4402962298374487
        }, 
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.43738954717008904
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.4364218371647653
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 multiply(net.smert.jreactphysics3d.mathematics.Matrix2x2)>": 0.4363988569550697
        }
    ], 
    "<com.flowpowered.react.math.Vector3: java.lang.String toString()>": [
        {
            "<org.jbox2d.common.Vec2: java.lang.String toString()>": 0.6473409227624575
        }, 
        {
            "<org.jbox2d.common.Vec3: java.lang.String toString()>": 0.6153151500677482
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector2: java.lang.String toString()>": 0.5737803692071419
        }, 
        {
            "<org.jbox2d.common.Rot: java.lang.String toString()>": 0.5737803692071419
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: java.lang.String toString()>": 0.566311297410341
        }
    ], 
    "<com.flowpowered.react.engine.ContactManifold$ContactManifoldListElement: void <init>(com.flowpowered.react.engine.ContactManifold,com.flowpowered.react.engine.ContactManifold$ContactManifoldListElement)>": [
        {
            "<org.dyn4j.sandbox.panels.LineGraphPanel: void setStaticSize(java.awt.Dimension)>": 0.049690399499995326
        }, 
        {
            "<org.jbox2d.testbed.tests.DrawingParticles: void step(org.jbox2d.testbed.framework.TestbedSettings)>": 0.048112522432468816
        }, 
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.04768498915339404
        }, 
        {
            "<boofcv.gui.feature.SelectRegionDescriptionPanel: void <init>()>": 0.047178209756024825
        }, 
        {
            "<boofcv.gui.d3.Polygon3DSequenceViewer: void <init>()>": 0.046704044859817086
        }
    ], 
    "<com.flowpowered.react.math.Matrix2x2: com.flowpowered.react.math.Matrix2x2 multiply(com.flowpowered.react.math.Matrix2x2,float)>": [
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector4 Subtract(Catalano.Math.Vector4,float)>": 0.39584760399929764
        }, 
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector4 Add(Catalano.Math.Vector4,float)>": 0.39584760399929764
        }, 
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector4 Divide(Catalano.Math.Vector4,float)>": 0.39584760399929764
        }, 
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector4 Multiply(Catalano.Math.Vector4,float)>": 0.39584760399929764
        }, 
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector3 toVector3()>": 0.3901745312746726
        }
    ], 
    "<com.flowpowered.react.collision.broadphase.NoBroadPhaseAlgorithm: void addObject(com.flowpowered.react.body.CollisionBody,com.flowpowered.react.collision.shape.AABB)>": [
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void setIsSleepingEnabled(boolean)>": 0.39491664520336467
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void updateRigidBodiesAABB()>": 0.382328270594698
        }, 
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void resetContactManifoldListsOfBodies()>": 0.3629517299094094
        }, 
        {
            "<net.coobird.thumbnailator.makers.ThumbnailMaker$ReadinessTracker: boolean isReady()>": 0.3559556869708223
        }, 
        {
            "<boofcv.alg.bow.LearnSceneFromFiles: void extractKeys(java.util.Map)>": 0.35492274895481113
        }
    ], 
    "<com.flowpowered.react.math.Matrix4x4: float getDeterminant()>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: float getDeterminant()>": 0.43015509501359456
        }, 
        {
            "<Catalano.Math.Matrix3x3: float Determinant()>": 0.42874686951387336
        }, 
        {
            "<org.jbox2d.dynamics.contacts.PositionSolverManifold: void initialize(org.jbox2d.dynamics.contacts.ContactPositionConstraint,org.jbox2d.common.Transform,org.jbox2d.common.Transform,int)>": 0.42651101976658434
        }, 
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.423453007992395
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.4226628209740789
        }
    ], 
    "<com.flowpowered.react.math.Matrix2x2: boolean equals(java.lang.Object)>": [
        {
            "<org.dyn4j.sandbox.utilities.RenderUtilities: void drawJoint(com.jogamp.opengl.GL2,org.dyn4j.dynamics.joint.Joint,double)>": 0.3014091411625745
        }, 
        {
            "<net.imglib2.img.ImgView: boolean supportsOptimizedCursor(net.imglib2.Interval)>": 0.29353607108458485
        }, 
        {
            "<boofcv.abst.sfm.d3.WrapVisOdomDualTrackPnP: boolean isFault()>": 0.286818420922638
        }, 
        {
            "<org.dyn4j.sandbox.utilities.RenderUtilities: void drawShape(com.jogamp.opengl.GL2,org.dyn4j.geometry.Shape,boolean)>": 0.26491584913468075
        }, 
        {
            "<org.dyn4j.sandbox.utilities.RenderUtilities: void fillShape(com.jogamp.opengl.GL2,org.dyn4j.geometry.Shape)>": 0.2645981390263522
        }
    ], 
    "<com.flowpowered.react.engine.DynamicsWorld: void notifyAddedOverlappingPair(com.flowpowered.react.collision.BroadPhasePair)>": [
        {
            "<net.coobird.thumbnailator.Thumbnails$Builder: net.coobird.thumbnailator.Thumbnails$Builder keepAspectRatio(boolean)>": 0.1448554267352194
        }, 
        {
            "<net.coobird.thumbnailator.Thumbnails$Builder: net.coobird.thumbnailator.Thumbnails$Builder height(int)>": 0.11100318946315055
        }, 
        {
            "<net.coobird.thumbnailator.Thumbnails$Builder: net.coobird.thumbnailator.Thumbnails$Builder width(int)>": 0.11100318946315055
        }, 
        {
            "<net.coobird.thumbnailator.Thumbnails$Builder: net.coobird.thumbnailator.Thumbnails$Builder resizer(net.coobird.thumbnailator.resizers.Resizer)>": 0.10957471792699452
        }, 
        {
            "<net.coobird.thumbnailator.Thumbnails$Builder: net.coobird.thumbnailator.Thumbnails$Builder scalingMode(net.coobird.thumbnailator.resizers.configurations.ScalingMode)>": 0.10875650315907348
        }
    ], 
    "<com.flowpowered.react.collision.RayCaster: boolean intersects(com.flowpowered.react.math.Vector3,com.flowpowered.react.math.Vector3,com.flowpowered.react.collision.shape.CylinderShape,com.flowpowered.react.math.Vector3)>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Quaternion: net.smert.jreactphysics3d.mathematics.Quaternion fromMatrix(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": 0.4467196580594343
        }, 
        {
            "<org.jbox2d.collision.shapes.PolygonShape: void computeAABB(org.jbox2d.collision.AABB,org.jbox2d.common.Transform,int)>": 0.44644250411909914
        }, 
        {
            "<org.jbox2d.collision.shapes.PolygonShape: boolean raycast(org.jbox2d.collision.RayCastOutput,org.jbox2d.collision.RayCastInput,org.jbox2d.common.Transform,int)>": 0.44535183984512994
        }, 
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.44511919226833724
        }, 
        {
            "<org.jbox2d.collision.shapes.CircleShape: boolean raycast(org.jbox2d.collision.RayCastOutput,org.jbox2d.collision.RayCastInput,org.jbox2d.common.Transform,int)>": 0.44472451697009746
        }
    ], 
    "<com.flowpowered.react.collision.shape.CapsuleShape: float getHeight()>": [
        {
            "<net.smert.jreactphysics3d.collision.shapes.CylinderShape: float getHeight()>": 0.4907407407407407
        }, 
        {
            "<net.smert.jreactphysics3d.collision.shapes.CapsuleShape: float getHeight()>": 0.4907407407407407
        }, 
        {
            "<net.smert.jreactphysics3d.collision.shapes.ConeShape: float getHeight()>": 0.4907407407407407
        }, 
        {
            "<net.smert.jreactphysics3d.constraint.HingeJoint: float getMotorTorque(float)>": 0.48845356531534173
        }, 
        {
            "<net.smert.jreactphysics3d.constraint.SliderJoint: float getMotorForce(float)>": 0.48845356531534173
        }
    ], 
    "<com.flowpowered.react.math.Matrix3x3: void set(int,int,float)>": [
        {
            "<net.coobird.thumbnailator.geometry.Positions$1: java.awt.Point calculate(int,int,int,int,int,int,int,int)>": 0.5234938234888701
        }, 
        {
            "<boofcv.core.image.border.ImageBorderValue$Value_I: void setOutside(int,int,int)>": 0.5197184294495419
        }, 
        {
            "<boofcv.core.image.border.ImageBorderValue$Value_F32: void setOutside(int,int,float)>": 0.5132106259401595
        }, 
        {
            "<org.dyn4j.examples.ExampleJOGL: void reshape(com.jogamp.opengl.GLAutoDrawable,int,int,int,int)>": 0.5124292156602955
        }, 
        {
            "<net.coobird.thumbnailator.geometry.Positions$4: java.awt.Point calculate(int,int,int,int,int,int,int,int)>": 0.4968651262712981
        }
    ], 
    "<com.flowpowered.react.math.Vector4: boolean equals(java.lang.Object)>": [
        {
            "<org.jbox2d.common.Vec3: boolean equals(java.lang.Object)>": 0.722999818401871
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: boolean equals(java.lang.Object)>": 0.6763003407722021
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: boolean equals(java.lang.Object)>": 0.662009833403327
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Quaternion: boolean equals(java.lang.Object)>": 0.662009833403327
        }, 
        {
            "<org.jbox2d.testbed.pooling.ColorKey: boolean equals(java.lang.Object)>": 0.6595477313968572
        }
    ], 
    "<com.flowpowered.react.math.Quaternion: com.flowpowered.react.math.Vector3 multiply(com.flowpowered.react.math.Quaternion,com.flowpowered.react.math.Vector3)>": [
        {
            "<boofcv.factory.background.FactoryBackgroundModel: boofcv.alg.background.stationary.BackgroundStationaryGaussian stationaryGaussian(boofcv.factory.background.ConfigBackgroundGaussian,boofcv.struct.image.ImageType)>": 0.1716149258141996
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.DebugDrawJ2D$1: java.awt.Color newColor(float,float,float,float)>": 0.17107879835954956
        }, 
        {
            "<org.jbox2d.callbacks.DebugDraw: void setCamera(float,float,float)>": 0.16905210962927486
        }, 
        {
            "<org.jbox2d.testbed.framework.TestbedCamera: void setCamera(org.jbox2d.common.Vec2,float)>": 0.16755621344971272
        }, 
        {
            "<org.jbox2d.common.Mat33: void <init>(float,float,float,float,float,float,float,float,float)>": 0.16638856574741467
        }
    ], 
    "<com.flowpowered.react.collision.broadphase.SweepAndPruneAlgorithm$BoxAABB: java.lang.String toString()>": [
        {
            "<org.jbox2d.common.Vec2: java.lang.String toString()>": 0.546441415032163
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Transform: java.lang.String toString()>": 0.5021607118071807
        }, 
        {
            "<net.imglib2.util.Util: java.lang.String printCoordinates(int[])>": 0.49522969302410214
        }, 
        {
            "<org.jbox2d.common.Vec3: java.lang.String toString()>": 0.4944180567813118
        }, 
        {
            "<net.imglib2.type.numeric.complex.AbstractComplexType: java.lang.String toString()>": 0.48324645424656154
        }
    ], 
    "<com.flowpowered.react.engine.Timer: void setTimeStep(double)>": [
        {
            "<Catalano.Math.Distances.MinkowskiDistance: void setOrder(double)>": 0.4736842105263157
        }, 
        {
            "<org.dyn4j.dynamics.joint.FrictionJoint: void setMaximumForce(double)>": 0.43327162387679946
        }, 
        {
            "<org.dyn4j.dynamics.joint.PinJoint: void setFrequency(double)>": 0.43327162387679946
        }, 
        {
            "<org.dyn4j.dynamics.BodyFixture: void setFriction(double)>": 0.43327162387679946
        }, 
        {
            "<org.dyn4j.dynamics.joint.PrismaticJoint: void setMaximumMotorForce(double)>": 0.43327162387679946
        }
    ], 
    "<com.flowpowered.react.collision.broadphase.PairManager: com.flowpowered.react.collision.broadphase.PairManager$BodyPair sortBodiesUsingID(com.flowpowered.react.body.CollisionBody,com.flowpowered.react.body.CollisionBody)>": [
        {
            "<org.jbox2d.collision.broadphase.Pair: int compareTo(org.jbox2d.collision.broadphase.Pair)>": 0.21926950134742634
        }, 
        {
            "<Catalano.Imaging.Filters.HysteresisThreshold: void applyInPlace(Catalano.Imaging.FastBitmap)>": 0.21916024465887432
        }, 
        {
            "<Catalano.Imaging.Shapes.IntRectangle: boolean isInside(int,int)>": 0.2179420492846087
        }, 
        {
            "<boofcv.misc.BoofMiscOps: void boundRectangleInside(boofcv.struct.image.ImageBase,boofcv.struct.ImageRectangle)>": 0.21716671752797861
        }, 
        {
            "<org.jbox2d.collision.broadphase.Pair: int compareTo(java.lang.Object)>": 0.21684122775032244
        }
    ], 
    "<com.flowpowered.react.engine.DynamicsWorld: void setContactsPositionCorrectionTechnique(com.flowpowered.react.ReactDefaults$ContactsPositionCorrectionTechnique)>": [
        {
            "<boofcv.demonstrations.fiducial.FiducialTrackerApp: void process(boofcv.io.image.SimpleImageSequence)>": 0.10883925584302587
        }, 
        {
            "<boofcv.gui.StandardAlgConfigPanel: void <init>()>": 0.10702501252028128
        }, 
        {
            "<boofcv.struct.feature.NccFeatureQueue: void <init>(int)>": 0.10447399127850501
        }, 
        {
            "<boofcv.struct.feature.BriefFeatureQueue: void <init>(int)>": 0.10447399127850501
        }, 
        {
            "<boofcv.demonstrations.shapes.DetectPolygonControlPanel: void configureSpinnerFloat(javax.swing.JSpinner)>": 0.10409496476252574
        }
    ], 
    "<com.flowpowered.react.math.Quaternion: void <init>(float,com.flowpowered.react.math.Vector3)>": [
        {
            "<org.jbox2d.testbed.perf.MathPerf: void runSinLUTTest(float)>": 0.5210251203418338
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 abs()>": 0.5163052203874557
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 abs()>": 0.5122097433874673
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: net.smert.jreactphysics3d.mathematics.Vector3 abs()>": 0.5082060306057847
        }, 
        {
            "<org.jbox2d.common.Vec2: void absLocal()>": 0.5064033324079965
        }
    ], 
    "<com.flowpowered.react.math.Vector2: com.flowpowered.react.math.Vector2 negate()>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 abs()>": 0.5026313927082032
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 abs()>": 0.49923798608800896
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: net.smert.jreactphysics3d.mathematics.Vector3 abs()>": 0.4956910955116653
        }, 
        {
            "<org.jbox2d.common.Vec2: void absLocal()>": 0.4945863716159368
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector2: net.smert.jreactphysics3d.mathematics.Vector2 abs()>": 0.4856209193864653
        }
    ], 
    "<com.flowpowered.react.collision.broadphase.PairManager: void removePairWithHashValue(int,int)>": [
        {
            "<net.smert.jreactphysics3d.collision.broadphase.PairManager: void removePairWithHashValue(int,int,int,int)>": 0.5580637514630934
        }, 
        {
            "<net.smert.jreactphysics3d.collision.broadphase.PairManager: int computeHashBodies(int,int)>": 0.49476265851921886
        }, 
        {
            "<net.smert.jreactphysics3d.collision.broadphase.PairManager: net.smert.jreactphysics3d.collision.broadphase.BodyPair addPair(net.smert.jreactphysics3d.body.CollisionBody,net.smert.jreactphysics3d.body.CollisionBody)>": 0.4770780028449081
        }, 
        {
            "<net.smert.jreactphysics3d.collision.broadphase.PairManager: net.smert.jreactphysics3d.collision.broadphase.BodyPair findPair(int,int)>": 0.4645506819185017
        }, 
        {
            "<net.smert.jreactphysics3d.collision.broadphase.PairManager: boolean removePair(int,int)>": 0.45512406778413445
        }
    ], 
    "<com.flowpowered.react.constraint.HingeJoint: void setMaxAngleLimit(float)>": [
        {
            "<boofcv.factory.background.ConfigBackgroundGaussian: void checkValidity()>": 0.28714537318674566
        }, 
        {
            "<boofcv.factory.background.ConfigBackgroundBasic: void checkValidity()>": 0.2782560345840117
        }, 
        {
            "<boofcv.alg.background.stationary.BackgroundStationaryBasic: void <init>(float,float,boofcv.struct.image.ImageType)>": 0.26751378625806155
        }, 
        {
            "<boofcv.alg.background.moving.BackgroundMovingBasic: void <init>(float,float,boofcv.struct.distort.PointTransformModel_F32,boofcv.struct.image.ImageType)>": 0.2578982059819657
        }, 
        {
            "<net.smert.jreactphysics3d.constraint.HingeJoint: void setMinAngleLimit(float)>": 0.24710901029030485
        }
    ], 
    "<com.flowpowered.react.collision.shape.ConeShape: void getLocalBounds(com.flowpowered.react.math.Vector3,com.flowpowered.react.math.Vector3)>": [
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector4 Abs()>": 0.37459054146133736
        }, 
        {
            "<Catalano.Math.Vector3: Catalano.Math.Vector3 Abs()>": 0.36741823249897065
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 abs()>": 0.36218707709157216
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 abs()>": 0.35985362687442163
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: net.smert.jreactphysics3d.mathematics.Vector3 abs()>": 0.3574903423294967
        }
    ], 
    "<com.flowpowered.react.math.Matrix4x4: void setToZero()>": [
        {
            "<org.dyn4j.sandbox.utilities.ColorUtilities: java.awt.Color convertColor(float[])>": 0.14028118492710157
        }, 
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.12515500864855553
        }, 
        {
            "<org.dyn4j.sandbox.SandboxBody: void stencil(com.jogamp.opengl.GL2)>": 0.12131947381846823
        }, 
        {
            "<org.dyn4j.sandbox.Sandbox: void init(com.jogamp.opengl.GLAutoDrawable)>": 0.11966422766319242
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.TestbedMain: void main(java.lang.String[])>": 0.11821656093586509
        }
    ], 
    "<com.flowpowered.react.math.Vector2: com.flowpowered.react.math.Vector2 negate(com.flowpowered.react.math.Vector2)>": [
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector4 Abs()>": 0.3188969205791563
        }, 
        {
            "<Catalano.Math.Vector3: Catalano.Math.Vector3 Abs()>": 0.31200363067814585
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.DebugDrawJ2D$1: java.lang.Object newColor(float,float,float,float)>": 0.30275727033932187
        }, 
        {
            "<org.jbox2d.common.Mat22: org.jbox2d.common.Mat22 abs()>": 0.29860453720514724
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 abs()>": 0.29600391573226126
        }
    ], 
    "<com.flowpowered.react.math.Vector3: com.flowpowered.react.math.Vector3 negate()>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 abs()>": 0.5206146675935647
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 abs()>": 0.5167424406904956
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: net.smert.jreactphysics3d.mathematics.Vector3 abs()>": 0.5128537380055944
        }, 
        {
            "<org.jbox2d.common.Vec2: void absLocal()>": 0.5112921956993629
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector2: net.smert.jreactphysics3d.mathematics.Vector2 abs()>": 0.5020010631649129
        }
    ], 
    "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Matrix4x4 multiply(float,com.flowpowered.react.math.Matrix4x4)>": [
        {
            "<boofcv.alg.feature.detect.line.gridline.Edgel: void <init>(float,float,float)>": 0.1490551505581848
        }, 
        {
            "<org.jbox2d.common.MathUtils: float map(float,float,float,float,float)>": 0.14096019152099476
        }, 
        {
            "<Catalano.Math.Matrix3x3: void <init>(float,float,float,float,float,float,float,float,float)>": 0.14047546561061652
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 set(float,float,float,float,float,float,float,float,float)>": 0.14034914351761746
        }, 
        {
            "<net.smert.jreactphysics3d.engine.Profiler: float GetElapsedTimeSinceStart()>": 0.1400270254342746
        }
    ], 
    "<com.flowpowered.react.collision.narrowphase.GJK.GJKAlgorithm: void <init>()>": [
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.12795225270399505
        }, 
        {
            "<org.dyn4j.sandbox.Sandbox: void init(com.jogamp.opengl.GLAutoDrawable)>": 0.12078920545454729
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.TestbedMain: void main(java.lang.String[])>": 0.11844401845279641
        }, 
        {
            "<org.dyn4j.sandbox.panels.LineGraphPanel: void setStaticSize(java.awt.Dimension)>": 0.11666666666666665
        }, 
        {
            "<boofcv.gui.d3.Polygon3DSequenceViewer: void <init>()>": 0.11636866703140784
        }
    ], 
    "<com.flowpowered.react.math.Quaternion: com.flowpowered.react.math.Quaternion getConjugate()>": [
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector4 Abs()>": 0.3724501668612509
        }, 
        {
            "<Catalano.Math.Vector3: Catalano.Math.Vector3 Abs()>": 0.3644772242807997
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.DebugDrawJ2D$1: java.lang.Object newColor(float,float,float,float)>": 0.361079201431516
        }, 
        {
            "<org.jbox2d.common.Vec3: org.jbox2d.common.Vec3 negate()>": 0.34855378005642756
        }, 
        {
            "<org.jbox2d.common.Mat22: org.jbox2d.common.Mat22 abs()>": 0.3482891069803387
        }
    ], 
    "<com.flowpowered.react.collision.shape.BoxShape: com.flowpowered.react.math.Vector3 getExtent()>": [
        {
            "<boofcv.factory.background.FactoryBackgroundModel: boofcv.alg.background.stationary.BackgroundStationaryGaussian stationaryGaussian(boofcv.factory.background.ConfigBackgroundGaussian,boofcv.struct.image.ImageType)>": 0.22808401584273488
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.DebugDrawJ2D$1: java.awt.Color newColor(float,float,float,float)>": 0.22199533244577585
        }, 
        {
            "<org.jbox2d.callbacks.DebugDraw: void setCamera(float,float,float)>": 0.2202302927432248
        }, 
        {
            "<org.jbox2d.testbed.framework.TestbedCamera: void setCamera(org.jbox2d.common.Vec2,float)>": 0.21965620854237702
        }, 
        {
            "<boofcv.factory.background.FactoryBackgroundModel: boofcv.alg.background.moving.BackgroundMovingGaussian movingGaussian(boofcv.factory.background.ConfigBackgroundGaussian,boofcv.struct.distort.PointTransformModel_F32,boofcv.struct.image.ImageType)>": 0.21781442406659612
        }
    ], 
    "<com.flowpowered.react.math.Matrix3x3: float getDeterminant()>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: float getDeterminant()>": 0.43372542852032814
        }, 
        {
            "<org.jbox2d.dynamics.contacts.PositionSolverManifold: void initialize(org.jbox2d.dynamics.contacts.ContactPositionConstraint,org.jbox2d.common.Transform,org.jbox2d.common.Transform,int)>": 0.42459213430897635
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 inverse()>": 0.42433309070757447
        }, 
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.4237771623143874
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.42295169148246026
        }
    ], 
    "<com.flowpowered.react.collision.shape.CollisionShape: void updateAABB(com.flowpowered.react.collision.shape.AABB,com.flowpowered.react.math.Transform)>": [
        {
            "<boofcv.factory.background.FactoryBackgroundModel: boofcv.alg.background.stationary.BackgroundStationaryGaussian stationaryGaussian(boofcv.factory.background.ConfigBackgroundGaussian,boofcv.struct.image.ImageType)>": 0.16476353154096096
        }, 
        {
            "<boofcv.factory.background.FactoryBackgroundModel: boofcv.alg.background.moving.BackgroundMovingGaussian movingGaussian(boofcv.factory.background.ConfigBackgroundGaussian,boofcv.struct.distort.PointTransformModel_F32,boofcv.struct.image.ImageType)>": 0.15749253954044307
        }, 
        {
            "<boofcv.factory.background.FactoryBackgroundModel: boofcv.alg.background.stationary.BackgroundStationaryBasic stationaryBasic(boofcv.factory.background.ConfigBackgroundBasic,boofcv.struct.image.ImageType)>": 0.15403769023403455
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.DebugDrawJ2D$1: java.awt.Color newColor(float,float,float,float)>": 0.1508905073161549
        }, 
        {
            "<org.jbox2d.callbacks.DebugDraw: void setCamera(float,float,float)>": 0.1504081021267952
        }
    ], 
    "<com.flowpowered.react.body.RigidBody: void removeJointFromJointsList(com.flowpowered.react.constraint.Joint)>": [
        {
            "<net.coobird.thumbnailator.makers.FixedSizeThumbnailMaker: net.coobird.thumbnailator.makers.FixedSizeThumbnailMaker size(int,int)>": 0.07894919259608874
        }, 
        {
            "<boofcv.factory.background.ConfigBackgroundGaussian: void checkValidity()>": 0.07416934518601233
        }, 
        {
            "<boofcv.abst.feature.detect.extract.ConfigExtract: void checkValidity()>": 0.07112750405389515
        }, 
        {
            "<boofcv.core.image.GImageGrayDistorted: java.lang.Class getImageType()>": 0.07028433019170012
        }, 
        {
            "<boofcv.core.image.GImageGrayDistorted: boofcv.struct.image.ImageGray getImage()>": 0.07028433019170012
        }
    ], 
    "<com.flowpowered.react.engine.ContactManifold: com.flowpowered.react.constraint.ContactPoint getContactPoint(int)>": [
        {
            "<boofcv.core.image.border.ImageBorderValue$Value_I: void setOutside(int,int,int)>": 0.4842941572208985
        }, 
        {
            "<org.dyn4j.examples.ExampleJOGL: void reshape(com.jogamp.opengl.GLAutoDrawable,int,int,int,int)>": 0.4774872263127061
        }, 
        {
            "<net.coobird.thumbnailator.geometry.Positions$1: java.awt.Point calculate(int,int,int,int,int,int,int,int)>": 0.4645173257870838
        }, 
        {
            "<boofcv.core.image.GImageGrayDistorted: void set(int,int,java.lang.Number)>": 0.45907655239053047
        }, 
        {
            "<Catalano.Imaging.Tools.IntegralImage: int getInternalData(int,int)>": 0.452961529810083
        }
    ], 
    "<com.flowpowered.react.math.Matrix4x4: com.flowpowered.react.math.Vector4 getRow(int)>": [
        {
            "<boofcv.core.image.border.ImageBorderValue$Value_I: void setOutside(int,int,int)>": 0.4966616068166122
        }, 
        {
            "<org.dyn4j.examples.ExampleJOGL: void reshape(com.jogamp.opengl.GLAutoDrawable,int,int,int,int)>": 0.4893146606557609
        }, 
        {
            "<net.coobird.thumbnailator.geometry.Positions$1: java.awt.Point calculate(int,int,int,int,int,int,int,int)>": 0.47437111780712504
        }, 
        {
            "<Catalano.Imaging.Tools.IntegralImage: int getInternalData(int,int)>": 0.46420451256364215
        }, 
        {
            "<net.coobird.thumbnailator.geometry.Coordinate: java.awt.Point calculate(int,int,int,int,int,int,int,int)>": 0.4578204272586427
        }
    ], 
    "<com.flowpowered.react.constraint.HingeJoint$HingeJointInfo: void <init>(com.flowpowered.react.body.RigidBody,com.flowpowered.react.body.RigidBody,com.flowpowered.react.math.Vector3,com.flowpowered.react.math.Vector3,float,float)>": [
        {
            "<org.jbox2d.common.MathUtils: float clamp(float,float,float)>": 0.3140826236378521
        }, 
        {
            "<org.jbox2d.dynamics.contacts.Contact: float mixFriction(float,float)>": 0.312278622418633
        }, 
        {
            "<org.jbox2d.common.Settings: float mixFriction(float,float)>": 0.312278622418633
        }, 
        {
            "<net.smert.jreactphysics3d.engine.Profiler: float GetElapsedTimeSinceStart()>": 0.3053995219127824
        }, 
        {
            "<boofcv.alg.color.ColorRgb: float rgbToGray_Weighted(float,float,float)>": 0.30401202356422163
        }
    ], 
    "<com.flowpowered.react.math.Transform: void <init>(com.flowpowered.react.math.Vector3,com.flowpowered.react.math.Quaternion)>": [
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.07119861999396519
        }, 
        {
            "<org.dyn4j.sandbox.Sandbox: void init(com.jogamp.opengl.GLAutoDrawable)>": 0.06653384854014885
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.TestbedMain: void main(java.lang.String[])>": 0.06590779358834647
        }, 
        {
            "<boofcv.gui.d3.Polygon3DSequenceViewer: void <init>()>": 0.06309263836797029
        }, 
        {
            "<boofcv.demonstrations.transform.pyramid.EdgeIntensitiesApp: void main(java.lang.String[])>": 0.06296221910157838
        }
    ], 
    "<com.flowpowered.react.engine.DynamicsWorld: void <init>(com.flowpowered.react.math.Vector3,float)>": [
        {
            "<net.smert.jreactphysics3d.engine.DynamicsWorld: void <init>(net.smert.jreactphysics3d.mathematics.Vector3,float)>": 0.32505012799277816
        }, 
        {
            "<net.smert.jreactphysics3d.engine.CollisionWorld: void <init>()>": 0.30851711948749627
        }, 
        {
            "<net.smert.jreactphysics3d.collision.broadphase.NoBroadPhaseAlgorithm: void <init>(net.smert.jreactphysics3d.collision.CollisionDetection)>": 0.26145723513664515
        }, 
        {
            "<net.imglib2.PointSampleList: void <init>(int)>": 0.25616536325457706
        }, 
        {
            "<boofcv.gui.feature.FancyInterestPointRender: void <init>()>": 0.24444210616106568
        }
    ], 
    "<com.flowpowered.react.math.Vector4: java.lang.String toString()>": [
        {
            "<org.jbox2d.common.Vec2: java.lang.String toString()>": 0.605588241414918
        }, 
        {
            "<org.jbox2d.common.Vec3: java.lang.String toString()>": 0.5867486461516431
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: java.lang.String toString()>": 0.5493326001194485
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector2: java.lang.String toString()>": 0.5483852914447129
        }, 
        {
            "<org.jbox2d.common.Rot: java.lang.String toString()>": 0.5483852914447129
        }
    ], 
    "<com.flowpowered.react.engine.ContactSolver$ContactPointSolver: void <init>()>": [
        {
            "<org.jbox2d.testbed.framework.TestList: void populateModel(org.jbox2d.testbed.framework.TestbedModel)>": 0.08366689800778684
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.TestbedMain: void main(java.lang.String[])>": 0.07744954388921926
        }, 
        {
            "<org.dyn4j.sandbox.Sandbox: void init(com.jogamp.opengl.GLAutoDrawable)>": 0.07693153429297092
        }, 
        {
            "<boofcv.demonstrations.transform.pyramid.EdgeIntensitiesApp: void main(java.lang.String[])>": 0.07398814140445686
        }, 
        {
            "<boofcv.demonstrations.tracker.CirculantVisualizationPanel: void <init>(boofcv.demonstrations.tracker.CirculantVisualizationPanel$Listener)>": 0.07251058742534171
        }
    ], 
    "<com.flowpowered.react.collision.broadphase.PairManager: void shrinkMemory()>": [
        {
            "<net.smert.jreactphysics3d.collision.broadphase.PairManager: void shrinkMemory()>": 0.4681717322216593
        }, 
        {
            "<net.smert.jreactphysics3d.collision.broadphase.PairManager: net.smert.jreactphysics3d.collision.broadphase.BodyPair addPair(net.smert.jreactphysics3d.body.CollisionBody,net.smert.jreactphysics3d.body.CollisionBody)>": 0.4497403160531196
        }, 
        {
            "<boofcv.alg.feature.disparity.impl.ImplSelectRectStandardBase_S32: void process(int,int[])>": 0.4329025217165891
        }, 
        {
            "<boofcv.alg.feature.disparity.impl.ImplSelectRectStandardBase_S32: void process(int,java.lang.Object)>": 0.4323467386394553
        }, 
        {
            "<net.smert.jreactphysics3d.collision.broadphase.PairManager: void reallocatePairs()>": 0.4293353497941876
        }
    ], 
    "<com.flowpowered.react.ReactDefaults$ContactsPositionCorrectionTechnique: void <init>(java.lang.String,int)>": [
        {
            "<net.smert.jreactphysics3d.configuration.ContactsPositionCorrectionTechnique: void <init>(java.lang.String,int)>": 0.4415584415584415
        }, 
        {
            "<net.smert.jreactphysics3d.constraint.JointType: void <init>(java.lang.String,int)>": 0.4415584415584415
        }, 
        {
            "<net.smert.jreactphysics3d.collision.shapes.CollisionShapeType: void <init>(java.lang.String,int)>": 0.4415584415584415
        }, 
        {
            "<net.smert.jreactphysics3d.configuration.JointsPositionCorrectionTechnique: void <init>(java.lang.String,int)>": 0.4415584415584415
        }, 
        {
            "<Catalano.Statistics.Analysis.PrincipalComponentAnalysis$AnalysisMethod: void <init>(java.lang.String,int)>": 0.4415584415584415
        }
    ], 
    "<com.flowpowered.react.constraint.FixedJoint: void solveVelocityConstraint(com.flowpowered.react.constraint.ConstraintSolver$ConstraintSolverData)>": [
        {
            "<Catalano.Core.IntRange: boolean IsOverlapping(Catalano.Core.IntRange)>": 0.05497920148083911
        }, 
        {
            "<net.imglib2.img.cell.CellCursor: boolean hasNext()>": 0.05403268341319039
        }, 
        {
            "<net.imglib2.img.cell.CellLocalizingCursor: boolean hasNext()>": 0.05403268341319039
        }, 
        {
            "<boofcv.io.wrapper.images.JpegByteImageSequence: boolean hasNext()>": 0.0527097339240401
        }, 
        {
            "<org.dyn4j.collision.manifold.IndexedManifoldPointId: boolean equals(java.lang.Object)>": 0.052164860363669796
        }
    ], 
    "<com.flowpowered.react.collision.narrowphase.EPA.TriangleEPA: boolean computeClosestPoint(com.flowpowered.react.math.Vector3[])>": [
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.EPA.TriangleEPA: boolean computeClosestPoint(net.smert.jreactphysics3d.mathematics.Vector3[])>": 0.3606532514346463
        }, 
        {
            "<org.jbox2d.dynamics.contacts.ContactSolver: void solveVelocityConstraints()>": 0.33670905381005234
        }, 
        {
            "<boofcv.alg.interpolate.kernel.BicubicKernel_F32: float compute(float)>": 0.33660434815672574
        }, 
        {
            "<org.jbox2d.dynamics.contacts.ContactSolver: boolean solvePositionConstraints()>": 0.33466936353127297
        }, 
        {
            "<boofcv.alg.distort.radtan.RemoveRadialPtoN_F32: void compute(float,float,georegression.struct.point.Point2D_F32)>": 0.33387422667237765
        }
    ], 
    "<com.flowpowered.react.math.Matrix3x3: com.flowpowered.react.math.Matrix3x3 getAbsoluteMatrix()>": [
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector4 Abs()>": 0.4657051888110301
        }, 
        {
            "<Catalano.Math.Vector3: Catalano.Math.Vector3 Abs()>": 0.4545292957779006
        }, 
        {
            "<org.jbox2d.common.Mat22: org.jbox2d.common.Mat22 abs()>": 0.43705267859362573
        }, 
        {
            "<org.jbox2d.common.Vec2: org.jbox2d.common.Vec2 abs()>": 0.42650442828306034
        }, 
        {
            "<org.jbox2d.common.Vec2: org.jbox2d.common.Vec2 abs(org.jbox2d.common.Vec2)>": 0.4111082149988157
        }
    ], 
    "<com.flowpowered.react.math.Matrix3x3: void <init>(float,float,float,float,float,float,float,float,float)>": [
        {
            "<org.jbox2d.testbed.framework.j2d.DebugDrawJ2D$1: java.lang.Object newColor(float,float,float,float)>": 0.6271247649115854
        }, 
        {
            "<org.jbox2d.common.MathUtils: float clamp(float,float,float)>": 0.4638937067876
        }, 
        {
            "<org.jbox2d.dynamics.contacts.Contact: float mixFriction(float,float)>": 0.46076656617798384
        }, 
        {
            "<org.jbox2d.common.Settings: float mixFriction(float,float)>": 0.46076656617798384
        }, 
        {
            "<net.smert.jreactphysics3d.engine.Profiler: float GetElapsedTimeSinceStart()>": 0.4496515969496133
        }
    ], 
    "<com.flowpowered.react.math.Vector2: com.flowpowered.react.math.Vector2 subtract(com.flowpowered.react.math.Vector2,com.flowpowered.react.math.Vector2)>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 abs()>": 0.33504727325988715
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 abs()>": 0.332501895878842
        }, 
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector3 toVector3()>": 0.33192521430159905
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: net.smert.jreactphysics3d.mathematics.Vector3 abs()>": 0.3300894130493818
        }, 
        {
            "<org.jbox2d.common.Vec2: void absLocal()>": 0.3293957108051163
        }
    ], 
    "<com.flowpowered.react.ReactDefaults$ContactsPositionCorrectionTechnique: com.flowpowered.react.ReactDefaults$ContactsPositionCorrectionTechnique valueOf(java.lang.String)>": [
        {
            "<net.smert.jreactphysics3d.collision.shapes.CollisionShapeType: net.smert.jreactphysics3d.collision.shapes.CollisionShapeType valueOf(java.lang.String)>": 0.260989010989011
        }, 
        {
            "<net.smert.jreactphysics3d.configuration.ContactsPositionCorrectionTechnique: net.smert.jreactphysics3d.configuration.ContactsPositionCorrectionTechnique valueOf(java.lang.String)>": 0.260989010989011
        }, 
        {
            "<net.smert.jreactphysics3d.configuration.JointsPositionCorrectionTechnique: net.smert.jreactphysics3d.configuration.JointsPositionCorrectionTechnique valueOf(java.lang.String)>": 0.260989010989011
        }, 
        {
            "<net.smert.jreactphysics3d.constraint.JointType: net.smert.jreactphysics3d.constraint.JointType valueOf(java.lang.String)>": 0.260989010989011
        }, 
        {
            "<Catalano.Statistics.Analysis.PrincipalComponentAnalysis$AnalysisMethod: Catalano.Statistics.Analysis.PrincipalComponentAnalysis$AnalysisMethod valueOf(java.lang.String)>": 0.260989010989011
        }
    ], 
    "<com.flowpowered.react.math.Matrix3x3: com.flowpowered.react.math.Matrix3x3 add(com.flowpowered.react.math.Matrix3x3)>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 abs()>": 0.34880039863177614
        }, 
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector3 toVector3()>": 0.34735736895278224
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 abs()>": 0.34631274344848256
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: net.smert.jreactphysics3d.mathematics.Vector3 abs()>": 0.3438966623718137
        }, 
        {
            "<org.jbox2d.common.Vec2: void absLocal()>": 0.343366647582108
        }
    ], 
    "<com.flowpowered.react.collision.shape.CapsuleShape: boolean isEqualTo(com.flowpowered.react.collision.shape.CollisionShape)>": [
        {
            "<net.smert.jreactphysics3d.collision.shapes.CylinderShape: boolean isEqualTo(net.smert.jreactphysics3d.collision.shapes.CollisionShape)>": 0.5034313725490196
        }, 
        {
            "<net.smert.jreactphysics3d.collision.shapes.CapsuleShape: boolean isEqualTo(net.smert.jreactphysics3d.collision.shapes.CollisionShape)>": 0.5034313725490196
        }, 
        {
            "<net.smert.jreactphysics3d.collision.shapes.ConeShape: boolean isEqualTo(net.smert.jreactphysics3d.collision.shapes.CollisionShape)>": 0.5034313725490196
        }, 
        {
            "<Catalano.Core.FloatRange: boolean IsOverlapping(Catalano.Core.FloatRange)>": 0.4935671393399216
        }, 
        {
            "<Catalano.Core.FloatRange: boolean isInside(float)>": 0.48314364433359824
        }
    ], 
    "<com.flowpowered.react.collision.broadphase.SweepAndPruneAlgorithm$BoxAABB: void <init>()>": [
        {
            "<boofcv.alg.feature.describe.DescribePointBinaryCompare: void <init>(boofcv.alg.feature.describe.brief.BinaryCompareDefinition_I32)>": 0.45723323652978476
        }, 
        {
            "<boofcv.alg.interpolate.impl.ImplBilinearPixel_IL_U8: void <init>(int)>": 0.45387239109776173
        }, 
        {
            "<boofcv.alg.interpolate.impl.ImplBilinearPixel_IL_S32: void <init>(int)>": 0.45387239109776173
        }, 
        {
            "<boofcv.alg.interpolate.impl.ImplBilinearPixel_IL_S16: void <init>(int)>": 0.45387239109776173
        }, 
        {
            "<net.smert.jreactphysics3d.collision.broadphase.BoxAABB: void <init>()>": 0.44358974358974357
        }
    ], 
    "<com.flowpowered.react.constraint.HingeJoint$HingeJointInfo: void <init>(com.flowpowered.react.body.RigidBody,com.flowpowered.react.body.RigidBody,com.flowpowered.react.math.Vector3,com.flowpowered.react.math.Vector3,float,float,float,float)>": [
        {
            "<org.jbox2d.common.MathUtils: float clamp(float,float,float)>": 0.42099674049191566
        }, 
        {
            "<org.jbox2d.dynamics.contacts.Contact: float mixFriction(float,float)>": 0.4182259835061025
        }, 
        {
            "<org.jbox2d.common.Settings: float mixFriction(float,float)>": 0.4182259835061025
        }, 
        {
            "<net.smert.jreactphysics3d.engine.Profiler: float GetElapsedTimeSinceStart()>": 0.4082775193911592
        }, 
        {
            "<boofcv.alg.color.ColorRgb: float rgbToGray_Weighted(float,float,float)>": 0.406159126617719
        }
    ], 
    "<com.flowpowered.react.math.Vector2: void <init>(float,float)>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: void <init>(float,float,float,float,float,float,float,float,float)>": 0.5980111707315988
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: void <init>(float,float,float,float)>": 0.587286033968297
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Quaternion: void <init>(float,float,float,float)>": 0.587286033968297
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: void <init>(float,float,float)>": 0.5768797800488626
        }, 
        {
            "<org.jbox2d.testbed.pooling.ColorKey: void set(float,float,float)>": 0.5673017162663833
        }
    ], 
    "<com.flowpowered.react.math.Vector3: void set(int,float)>": [
        {
            "<boofcv.core.image.border.ImageBorderValue$Value_F32: void setOutside(int,int,float)>": 0.38172392186585524
        }, 
        {
            "<boofcv.alg.weights.WeightPixelUniform_F32: float weight(int,int)>": 0.38071702804323315
        }, 
        {
            "<boofcv.core.image.border.ImageBorderValue$Value_F32: float getOutside(int,int)>": 0.38071702804323315
        }, 
        {
            "<Catalano.Imaging.Tools.GradientImage: float getOrientation(int,int)>": 0.342796734599184
        }, 
        {
            "<Catalano.Imaging.Tools.GradientImage: float getMagnitude(int,int)>": 0.342796734599184
        }
    ], 
    "<com.flowpowered.react.engine.ContactSolver: void setSplitVelocitiesArrays(com.flowpowered.react.math.Vector3[],com.flowpowered.react.math.Vector3[])>": [
        {
            "<boofcv.factory.background.ConfigBackgroundGaussian: void checkValidity()>": 0.24558197479523
        }, 
        {
            "<boofcv.abst.feature.detect.extract.ConfigExtract: void checkValidity()>": 0.23643292370623695
        }, 
        {
            "<boofcv.core.image.GImageGrayDistorted: java.lang.Class getImageType()>": 0.23104192695741527
        }, 
        {
            "<boofcv.core.image.GImageGrayDistorted: boofcv.struct.image.ImageGray getImage()>": 0.23104192695741527
        }, 
        {
            "<Catalano.Statistics.Distributions.BinomialDistribution: void <init>(int,double)>": 0.22297502277467293
        }
    ], 
    "<com.flowpowered.react.collision.shape.CollisionShape: boolean equals(java.lang.Object)>": [
        {
            "<Catalano.Core.FloatRange: boolean IsOverlapping(Catalano.Core.FloatRange)>": 0.4155151940308793
        }, 
        {
            "<Catalano.Math.Geometry.Line: boolean isHorizontal()>": 0.4005492494888041
        }, 
        {
            "<net.imglib2.type.logic.BoolType: void not()>": 0.3906881952264146
        }, 
        {
            "<boofcv.demonstrations.tracker.VisualizeTldTrackerApp: void togglePause()>": 0.3906881952264146
        }, 
        {
            "<boofcv.demonstrations.tracker.VisualizeCirculantTrackerApp: void togglePause()>": 0.3906881952264146
        }
    ], 
    "<com.flowpowered.react.constraint.Joint: boolean isActive()>": [
        {
            "<boofcv.abst.sfm.d3.WrapVisOdomPixelDepthPnP: boolean isFault()>": 0.5312000961653445
        }, 
        {
            "<boofcv.abst.sfm.d3.VisOdomPixelDepthPnP_to_DepthVisualOdometry: boolean isFault()>": 0.5312000961653445
        }, 
        {
            "<boofcv.io.javacv.JavaCVVideoImageSequence: boolean hasNext()>": 0.5312000961653445
        }, 
        {
            "<net.imglib2.KDTree$KDTreeCursor: boolean hasNext()>": 0.4897004091326671
        }, 
        {
            "<boofcv.struct.flow.ImageFlow$D: boolean isValid()>": 0.4897004091326671
        }
    ], 
    "<com.flowpowered.react.math.Vector3: com.flowpowered.react.math.Vector3 subtract(com.flowpowered.react.math.Vector3)>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 inverse()>": 0.4415537706457983
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 multiply(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": 0.4402962298374487
        }, 
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.43738954717008904
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.4364218371647653
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix2x2: net.smert.jreactphysics3d.mathematics.Matrix2x2 multiply(net.smert.jreactphysics3d.mathematics.Matrix2x2)>": 0.4363988569550697
        }
    ], 
    "<com.flowpowered.react.engine.ContactManifold: void update(com.flowpowered.react.math.Transform,com.flowpowered.react.math.Transform)>": [
        {
            "<boofcv.alg.distort.ImageDistortCache_SB: void apply(boofcv.struct.image.ImageBase,boofcv.struct.image.ImageBase,int,int,int,int)>": 0.2224998475698356
        }, 
        {
            "<org.jbox2d.particle.ParticleSystem: void joinParticleGroups(org.jbox2d.particle.ParticleGroup,org.jbox2d.particle.ParticleGroup)>": 0.22167185838528147
        }, 
        {
            "<boofcv.alg.distort.ImageDistortCache_SB: void apply(boofcv.struct.image.ImageGray,boofcv.struct.image.ImageGray,int,int,int,int)>": 0.22039707007258322
        }, 
        {
            "<boofcv.alg.misc.ImageMiscOps: void rotateCW(boofcv.struct.image.GrayF32,boofcv.struct.image.GrayF32)>": 0.21981313456489623
        }, 
        {
            "<boofcv.alg.misc.ImageMiscOps: void rotateCCW(boofcv.struct.image.GrayF32,boofcv.struct.image.GrayF32)>": 0.21981313456489623
        }
    ], 
    "<com.flowpowered.react.constraint.Joint$JointInfo: void <init>(com.flowpowered.react.constraint.Joint$JointType)>": [
        {
            "<boofcv.factory.geo.ConfigHomography: void <init>(boolean)>": 0.10224414231722057
        }, 
        {
            "<boofcv.gui.VideoProcessAppBase: void stopWorker()>": 0.09785852775349542
        }, 
        {
            "<boofcv.gui.DepthVideoAppBase: void stopWorker()>": 0.09785852775349542
        }, 
        {
            "<boofcv.gui.StereoVideoAppBase: void stopWorker()>": 0.09785852775349542
        }, 
        {
            "<Catalano.Imaging.Concurrent.Filters.SobelEdgeDetector: void <init>()>": 0.09505135099164813
        }
    ], 
    "<com.flowpowered.react.collision.BroadPhasePair: boolean isNotEqualTo(com.flowpowered.react.collision.BroadPhasePair)>": [
        {
            "<boofcv.abst.sfm.d3.WrapVisOdomPixelDepthPnP: boolean isFault()>": 0.4338373554509977
        }, 
        {
            "<boofcv.abst.sfm.d3.VisOdomPixelDepthPnP_to_DepthVisualOdometry: boolean isFault()>": 0.4338373554509977
        }, 
        {
            "<boofcv.io.javacv.JavaCVVideoImageSequence: boolean hasNext()>": 0.4338373554509977
        }, 
        {
            "<net.imglib2.KDTree$KDTreeCursor: boolean hasNext()>": 0.4001190461197689
        }, 
        {
            "<boofcv.struct.flow.ImageFlow$D: boolean isValid()>": 0.4001190461197689
        }
    ], 
    "<com.flowpowered.react.math.Matrix4x4: void setAllValues(float,float,float,float,float,float,float,float,float,float,float,float,float,float,float,float)>": [
        {
            "<org.jbox2d.testbed.framework.j2d.DebugDrawJ2D$1: java.awt.Color newColor(float,float,float,float)>": 0.5540249444222061
        }, 
        {
            "<org.jbox2d.callbacks.DebugDraw: void setCamera(float,float,float)>": 0.5430460063572535
        }, 
        {
            "<org.jbox2d.common.Mat33: void <init>(float,float,float,float,float,float,float,float,float)>": 0.538544696518804
        }, 
        {
            "<boofcv.alg.feature.detect.line.gridline.Edgel: void <init>(float,float,float)>": 0.5285640495586527
        }, 
        {
            "<net.imglib2.type.numeric.complex.AbstractComplexType: void setComplexNumber(float,float)>": 0.4908539856342903
        }
    ], 
    "<com.flowpowered.react.collision.narrowphase.EPA.EPAAlgorithm$TriangleComparison: int compare(java.lang.Object,java.lang.Object)>": [
        {
            "<net.smert.jreactphysics3d.collision.narrowphase.EPA.TriangleComparison: int compare(java.lang.Object,java.lang.Object)>": 0.33478479264357125
        }, 
        {
            "<net.imglib2.type.numeric.real.FloatType: int compareTo(java.lang.Object)>": 0.2757935166529757
        }, 
        {
            "<net.imglib2.type.label.BasePairCharType: int compareTo(java.lang.Object)>": 0.247613527010277
        }, 
        {
            "<net.imglib2.type.numeric.real.FloatType: int compareTo(net.imglib2.type.numeric.real.FloatType)>": 0.24748584813087787
        }, 
        {
            "<net.imglib2.type.numeric.real.FloatType: int compareTo(net.imglib2.type.numeric.real.AbstractRealType)>": 0.23513030356894457
        }
    ], 
    "<com.flowpowered.react.math.Matrix2x2: com.flowpowered.react.math.Vector2 getColumn(int)>": [
        {
            "<boofcv.alg.interpolate.impl.ImplPolynomialPixel_F32: void <init>(int,float,float)>": 0.21602451877987636
        }, 
        {
            "<boofcv.alg.interpolate.impl.ImplPolynomialPixel_I: void <init>(int,float,float)>": 0.21602451877987636
        }, 
        {
            "<boofcv.struct.distort.SequencePointTransform_F32: void compute(float,float,georegression.struct.point.Point2D_F32)>": 0.211556591819939
        }, 
        {
            "<boofcv.factory.background.FactoryBackgroundModel: boofcv.alg.background.stationary.BackgroundStationaryGaussian stationaryGaussian(boofcv.factory.background.ConfigBackgroundGaussian,boofcv.struct.image.ImageType)>": 0.19874878381611694
        }, 
        {
            "<boofcv.factory.background.FactoryBackgroundModel: boofcv.alg.background.moving.BackgroundMovingGaussian movingGaussian(boofcv.factory.background.ConfigBackgroundGaussian,boofcv.struct.distort.PointTransformModel_F32,boofcv.struct.image.ImageType)>": 0.1902904556801045
        }
    ], 
    "<com.flowpowered.react.math.Matrix2x2: void set(int,int,float)>": [
        {
            "<net.coobird.thumbnailator.geometry.Positions$1: java.awt.Point calculate(int,int,int,int,int,int,int,int)>": 0.5234938234888701
        }, 
        {
            "<boofcv.core.image.border.ImageBorderValue$Value_I: void setOutside(int,int,int)>": 0.5197184294495419
        }, 
        {
            "<boofcv.core.image.border.ImageBorderValue$Value_F32: void setOutside(int,int,float)>": 0.5132106259401595
        }, 
        {
            "<org.dyn4j.examples.ExampleJOGL: void reshape(com.jogamp.opengl.GLAutoDrawable,int,int,int,int)>": 0.5124292156602955
        }, 
        {
            "<net.coobird.thumbnailator.geometry.Positions$4: java.awt.Point calculate(int,int,int,int,int,int,int,int)>": 0.4968651262712981
        }
    ], 
    "<com.flowpowered.react.body.RigidBody: void applyForceToCenter(com.flowpowered.react.math.Vector3)>": [
        {
            "<org.dyn4j.sandbox.Sandbox: void renderBody(com.jogamp.opengl.GL2,org.dyn4j.sandbox.SandboxBody)>": 0.15066219776353326
        }, 
        {
            "<boofcv.gui.DepthVideoAppBase: void mouseClicked(java.awt.event.MouseEvent)>": 0.14795005126048627
        }, 
        {
            "<boofcv.gui.StereoVideoAppBase: void mouseClicked(java.awt.event.MouseEvent)>": 0.14795005126048627
        }, 
        {
            "<net.imglib2.view.TransformBuilder: void <init>(net.imglib2.Interval,net.imglib2.RandomAccessible)>": 0.14727912127904344
        }, 
        {
            "<boofcv.gui.VideoProcessAppBase: void mouseClicked(java.awt.event.MouseEvent)>": 0.14607290547234328
        }
    ], 
    "<com.flowpowered.react.body.RigidBody: void setInertiaTensorLocal(com.flowpowered.react.math.Matrix3x3)>": [
        {
            "<Catalano.Imaging.Filters.GaussianBlur: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Concurrent.Filters.BradleyLocalThreshold: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.CosineTransform: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.BradleyLocalThreshold: void <init>()>": 0.018184824186332698
        }, 
        {
            "<Catalano.Imaging.Filters.UnsharpMasking: void <init>()>": 0.018184824186332698
        }
    ], 
    "<com.flowpowered.react.constraint.ContactPoint$ContactPointInfo: void <init>(com.flowpowered.react.math.Vector3,float,com.flowpowered.react.math.Vector3,com.flowpowered.react.math.Vector3)>": [
        {
            "<org.jbox2d.common.MathUtils: float clamp(float,float,float)>": 0.08164766915396891
        }, 
        {
            "<Catalano.Math.Vector3: void <init>(float,float,float)>": 0.08150230280370006
        }, 
        {
            "<org.jbox2d.common.Color3f: void <init>(float,float,float)>": 0.08150230280370006
        }, 
        {
            "<org.jbox2d.common.Vec3: void <init>(float,float,float)>": 0.08150230280370006
        }, 
        {
            "<Catalano.Core.FloatPoint: void <init>(float,float)>": 0.0813612528618656
        }
    ], 
    "<com.flowpowered.react.collision.broadphase.SweepAndPruneAlgorithm: boolean testIntersect1DSortedAABBs(com.flowpowered.react.collision.broadphase.SweepAndPruneAlgorithm$BoxAABB,com.flowpowered.react.collision.broadphase.SweepAndPruneAlgorithm$AABBInt,com.flowpowered.react.collision.broadphase.SweepAndPruneAlgorithm$EndPoint[],int)>": [
        {
            "<net.smert.jreactphysics3d.collision.broadphase.SweepAndPruneAlgorithm: boolean testIntersect1DSortedAABBs(net.smert.jreactphysics3d.collision.broadphase.BoxAABB,net.smert.jreactphysics3d.collision.broadphase.AABBInt,net.smert.jreactphysics3d.collision.broadphase.EndPoint[],int)>": 0.5163491614181144
        }, 
        {
            "<boofcv.gui.feature.AssociationPanel: boolean isValidPoint(int)>": 0.45591218561637836
        }, 
        {
            "<net.smert.jreactphysics3d.collision.broadphase.SweepAndPruneAlgorithm: void updateObjectIntegerAABB(net.smert.jreactphysics3d.body.CollisionBody,net.smert.jreactphysics3d.collision.broadphase.AABBInt)>": 0.44262983542426904
        }, 
        {
            "<net.smert.jreactphysics3d.collision.broadphase.SweepAndPruneAlgorithm: void updateObject(net.smert.jreactphysics3d.body.CollisionBody,net.smert.jreactphysics3d.collision.shapes.AABB)>": 0.44211763453636976
        }, 
        {
            "<Catalano.Imaging.Texture.BinaryPattern.UniformLocalBinaryPattern: boolean isUniform(int)>": 0.43873688506550196
        }
    ], 
    "<com.flowpowered.react.collision.shape.CapsuleShape: void getLocalBounds(com.flowpowered.react.math.Vector3,com.flowpowered.react.math.Vector3)>": [
        {
            "<Catalano.Math.Vector4: Catalano.Math.Vector4 Abs()>": 0.35341510552979716
        }, 
        {
            "<Catalano.Math.Vector3: Catalano.Math.Vector3 Abs()>": 0.3472225103772357
        }, 
        {
            "<org.jbox2d.testbed.framework.j2d.DebugDrawJ2D$1: java.lang.Object newColor(float,float,float,float)>": 0.3427965154444935
        }, 
        {
            "<org.jbox2d.common.Vec3: org.jbox2d.common.Vec3 negate()>": 0.3325453641242935
        }, 
        {
            "<org.jbox2d.common.Mat22: org.jbox2d.common.Mat22 abs()>": 0.3308448043679072
        }
    ], 
    "<com.flowpowered.react.math.Vector3: com.flowpowered.react.math.Vector3 divide(float)>": [
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.4075619451385534
        }, 
        {
            "<org.jbox2d.common.Vec2: float normalize()>": 0.40691211783900194
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.406784762318223
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 multiply(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": 0.4059161516098273
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 inverse()>": 0.4058453801044448
        }
    ], 
    "<com.flowpowered.react.collision.shape.CollisionShape: void finalize()>": [
        {
            "<boofcv.app.CreateFiducialSquareImage: void printPatternDefinitions()>": 0.4600697955864245
        }, 
        {
            "<boofcv.app.CommandParserFiducialSquare: void execute(java.lang.String[],boofcv.app.BaseFiducialSquare)>": 0.4550025830608218
        }, 
        {
            "<org.dyn4j.Version: void main(java.lang.String[])>": 0.44886430473943023
        }, 
        {
            "<boofcv.app.BatchRemoveLensDistortion: void main(java.lang.String[])>": 0.4454116570414307
        }, 
        {
            "<org.jbox2d.tests.math.SinCosTest: void main(java.lang.String[])>": 0.445329336327556
        }
    ], 
    "<com.flowpowered.react.body.CollisionBody: com.flowpowered.react.math.Transform getInterpolatedTransform()>": [
        {
            "<net.smert.jreactphysics3d.collision.shapes.CylinderShape: float getHeight()>": 0.07136240321480626
        }, 
        {
            "<net.smert.jreactphysics3d.collision.shapes.CapsuleShape: float getHeight()>": 0.07136240321480626
        }, 
        {
            "<net.smert.jreactphysics3d.collision.shapes.ConeShape: float getHeight()>": 0.07136240321480626
        }, 
        {
            "<org.jbox2d.dynamics.Profile$ProfileEntry: void accum(float)>": 0.07136240321480626
        }, 
        {
            "<org.jbox2d.dynamics.joints.ConstantVolumeJoint: void inflate(float)>": 0.07136240321480626
        }
    ], 
    "<com.flowpowered.react.collision.narrowphase.EPA.TriangleEPA: void setAdjacentEdge(int,com.flowpowered.react.collision.narrowphase.EPA.EdgeEPA)>": [
        {
            "<boofcv.alg.shapes.polygon.BinaryPolygonDetector: void setNumberOfSides(int,int)>": 0.28037176250230156
        }, 
        {
            "<net.coobird.thumbnailator.builders.ThumbnailParameterBuilder: net.coobird.thumbnailator.builders.ThumbnailParameterBuilder size(int,int)>": 0.27418874561578027
        }, 
        {
            "<boofcv.abst.feature.detect.extract.ConfigExtract: void checkValidity()>": 0.2617584672398665
        }, 
        {
            "<boofcv.core.image.border.BorderIndex1D_Exception: int getIndex(int)>": 0.2589228882289297
        }, 
        {
            "<boofcv.core.image.GImageGrayDistorted: float getF(int)>": 0.2512684631014482
        }
    ], 
    "<com.flowpowered.react.math.Vector2: float lengthSquare()>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Vector2: float lengthSquare()>": 0.5221025910364147
        }, 
        {
            "<org.jbox2d.common.Vec2: float lengthSquared()>": 0.5221025910364147
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector3: float lengthSquare()>": 0.5105658075134625
        }, 
        {
            "<Catalano.Math.Vector3: float Square()>": 0.5105658075134625
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 inverse()>": 0.5090235622388002
        }
    ], 
    "<com.flowpowered.react.math.Mathematics: float clamp(float,float,float)>": [
        {
            "<net.smert.jreactphysics3d.mathematics.Mathematics: float Clamp(float,float,float)>": 0.8481071928653616
        }, 
        {
            "<org.jbox2d.common.MathUtils: float clamp(float,float,float)>": 0.590858731243624
        }, 
        {
            "<org.jbox2d.dynamics.contacts.Contact: float mixFriction(float,float)>": 0.5501418189925111
        }, 
        {
            "<org.jbox2d.common.Settings: float mixFriction(float,float)>": 0.5501418189925111
        }, 
        {
            "<org.jbox2d.common.MathUtils: float min(float,float)>": 0.5338622158740999
        }
    ], 
    "<com.flowpowered.react.engine.DynamicsWorld: void integrateRigidBodiesPositions()>": [
        {
            "<Catalano.Math.Matrix: int Min(int[][])>": 0.18213278599709365
        }, 
        {
            "<Catalano.Math.Matrix: int Max(int[][])>": 0.18213278599709365
        }, 
        {
            "<Catalano.Math.Matrix: float Sum(float[][])>": 0.16187401832916698
        }, 
        {
            "<Catalano.Math.Matrix: double Sum(double[][])>": 0.16021558652260026
        }, 
        {
            "<Catalano.Imaging.Texture.RunLengthFeatures: double RunPercentage(double[][],int)>": 0.156221922146729
        }
    ], 
    "<com.flowpowered.react.math.Matrix2x2: void setToZero()>": [
        {
            "<org.dyn4j.sandbox.utilities.ColorUtilities: java.awt.Color convertColor(float[])>": 0.13775447382868714
        }, 
        {
            "<net.imglib2.display.screenimage.awt.AWTScreenImageUtil: int numElements(long[])>": 0.13472217233515754
        }, 
        {
            "<net.imglib2.img.planar.PlanarImg: int getIndex(int[])>": 0.12617041656630076
        }, 
        {
            "<boofcv.gui.image.AnimatePanel: void <init>(int,java.awt.image.BufferedImage[])>": 0.12525472351717706
        }, 
        {
            "<org.dyn4j.geometry.CapsuleTest: void getFoci()>": 0.12380994956025623
        }
    ], 
    "<com.flowpowered.react.constraint.HingeJoint: void enableMotor(boolean)>": [
        {
            "<Catalano.Imaging.Filters.Mirror: void <init>(boolean,boolean)>": 0.23077673742847993
        }, 
        {
            "<boofcv.alg.feature.detect.extract.NonMaxBlock: void <init>(boolean,boolean)>": 0.23077673742847993
        }, 
        {
            "<net.smert.jreactphysics3d.body.Body: void setIsSleeping(boolean)>": 0.22731469077833558
        }, 
        {
            "<boofcv.gui.calibration.CalibratedImageGridPanel: void setDisplay(boolean,boolean,boolean,boolean,boolean,double)>": 0.2221314806981181
        }, 
        {
            "<boofcv.demonstrations.calibration.SubpixelGridTargetDisplay: void setShow(boolean,boolean)>": 0.2217906806678106
        }
    ], 
    "<com.flowpowered.react.math.Vector4: com.flowpowered.react.math.Vector4 multiply(float,com.flowpowered.react.math.Vector4)>": [
        {
            "<boofcv.alg.feature.detect.line.gridline.Edgel: void <init>(float,float,float)>": 0.1490551505581848
        }, 
        {
            "<org.jbox2d.common.MathUtils: float map(float,float,float,float,float)>": 0.14096019152099476
        }, 
        {
            "<Catalano.Math.Matrix3x3: void <init>(float,float,float,float,float,float,float,float,float)>": 0.14047546561061652
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 set(float,float,float,float,float,float,float,float,float)>": 0.14034914351761746
        }, 
        {
            "<net.smert.jreactphysics3d.engine.Profiler: float GetElapsedTimeSinceStart()>": 0.1400270254342746
        }
    ], 
    "<com.flowpowered.react.constraint.HingeJoint$HingeJointInfo: void <init>(com.flowpowered.react.body.RigidBody,com.flowpowered.react.body.RigidBody,com.flowpowered.react.math.Vector3,com.flowpowered.react.math.Vector3)>": [
        {
            "<boofcv.alg.weights.WeightDistanceUniform_F32: void <init>(float)>": 0.1292707041662332
        }, 
        {
            "<Catalano.Imaging.Filters.UnsharpMasking: void setWeight(float)>": 0.12655812053261423
        }, 
        {
            "<org.jbox2d.particle.ParticleSystem: void setParticleDensity(float)>": 0.12631637772818127
        }, 
        {
            "<boofcv.abst.feature.detect.extract.NonMaxLimiter$LocalExtreme: float getValue()>": 0.12321401916996114
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Vector2: boolean isUnit()>": 0.12229626827123637
        }
    ], 
    "<com.flowpowered.react.math.Vector4: com.flowpowered.react.math.Vector4 multiply(float)>": [
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.43874493646245855
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.43775489116415234
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 multiply(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": 0.43691133691560585
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 inverse()>": 0.43649087343064297
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Quaternion: net.smert.jreactphysics3d.mathematics.Quaternion fromMatrix(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": 0.4329518328300564
        }
    ], 
    "<com.flowpowered.react.engine.ContactSolver: void solve()>": [
        {
            "<org.jbox2d.collision.shapes.ChainShape: void computeAABB(org.jbox2d.collision.AABB,org.jbox2d.common.Transform,int)>": 0.21584761139814448
        }, 
        {
            "<org.jbox2d.particle.ParticleSystem: void raycast(org.jbox2d.callbacks.ParticleRaycastCallback,org.jbox2d.common.Vec2,org.jbox2d.common.Vec2)>": 0.21436865804886376
        }, 
        {
            "<org.jbox2d.particle.ParticleSystem: void solve(org.jbox2d.dynamics.TimeStep)>": 0.2138687777462764
        }, 
        {
            "<org.jbox2d.dynamics.Island: void solve(org.jbox2d.dynamics.Profile,org.jbox2d.dynamics.TimeStep,org.jbox2d.common.Vec2,boolean)>": 0.21273446455678263
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 inverse()>": 0.2124471867379483
        }
    ], 
    "<com.flowpowered.react.math.Vector4: boolean isZero()>": [
        {
            "<Catalano.Math.Matrix3x3: void Multiply(Catalano.Math.Matrix3x3)>": 0.5188667388028934
        }, 
        {
            "<Catalano.Math.Matrix3x3: Catalano.Math.Matrix3x3 Multiply(Catalano.Math.Matrix3x3,Catalano.Math.Matrix3x3)>": 0.517830949020989
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 multiply(net.smert.jreactphysics3d.mathematics.Matrix3x3)>": 0.5173689591005264
        }, 
        {
            "<net.smert.jreactphysics3d.mathematics.Matrix3x3: net.smert.jreactphysics3d.mathematics.Matrix3x3 inverse()>": 0.5162979716912651
        }, 
        {
            "<org.jbox2d.dynamics.contacts.PositionSolverManifold: void initialize(org.jbox2d.dynamics.contacts.ContactPositionConstraint,org.jbox2d.common.Transform,org.jbox2d.common.Transform,int)>": 0.5107501169002404
        }
    ], 
    "<com.flowpowered.react.constraint.Joint$JointType: void <init>(java.lang.String,int)>": [
        {
            "<net.smert.jreactphysics3d.configuration.ContactsPositionCorrectionTechnique: void <init>(java.lang.String,int)>": 0.4415584415584415
        }, 
        {
            "<net.smert.jreactphysics3d.constraint.JointType: void <init>(java.lang.String,int)>": 0.4415584415584415
        }, 
        {
            "<net.smert.jreactphysics3d.collision.shapes.CollisionShapeType: void <init>(java.lang.String,int)>": 0.4415584415584415
        }, 
        {
            "<net.smert.jreactphysics3d.configuration.JointsPositionCorrectionTechnique: void <init>(java.lang.String,int)>": 0.4415584415584415
        }, 
        {
            "<Catalano.Statistics.Analysis.PrincipalComponentAnalysis$AnalysisMethod: void <init>(java.lang.String,int)>": 0.4415584415584415
        }
    ], 
    "<com.flowpowered.react.constraint.ContactPoint: void <init>(com.flowpowered.react.constraint.ContactPoint$ContactPointInfo)>": [
        {
            "<boofcv.factory.background.ConfigBackgroundGaussian: void checkValidity()>": 0.09165081681661569
        }, 
        {
            "<boofcv.factory.background.ConfigBackgroundBasic: void checkValidity()>": 0.0839132101262072
        }, 
        {
            "<boofcv.alg.background.stationary.BackgroundStationaryBasic: void <init>(float,float,boofcv.struct.image.ImageType)>": 0.06895504501201286
        }, 
        {
            "<boofcv.alg.background.stationary.BackgroundStationaryGaussian: void <init>(float,float,boofcv.struct.image.ImageType)>": 0.06743826259369137
        }, 
        {
            "<Catalano.Imaging.Filters.SaturationCorrection: void <init>(float)>": 0.06713867047387266
        }
    ], 
    "<com.flowpowered.react.math.Matrix3x3: com.flowpowered.react.math.Vector3 get(int)>": [
        {
            "<boofcv.core.image.border.ImageBorderValue$Value_I: void setOutside(int,int,int)>": 0.4966616068166122
        }, 
        {
            "<org.dyn4j.examples.ExampleJOGL: void reshape(com.jogamp.opengl.GLAutoDrawable,int,int,int,int)>": 0.4893146606557609
        }, 
        {
            "<net.coobird.thumbnailator.geometry.Positions$1: java.awt.Point calculate(int,int,int,int,int,int,int,int)>": 0.47437111780712504
        }, 
        {
            "<Catalano.Imaging.Tools.IntegralImage: int getInternalData(int,int)>": 0.46420451256364215
        }, 
        {
            "<net.coobird.thumbnailator.geometry.Coordinate: java.awt.Point calculate(int,int,int,int,int,int,int,int)>": 0.4578204272586427
        }
    ], 
    "<com.flowpowered.react.collision.narrowphase.EPA.EdgeEPA: void set(com.flowpowered.react.collision.narrowphase.EPA.EdgeEPA)>": [
        {
            "<net.imglib2.type.numeric.ARGBType: void div(net.imglib2.type.numeric.ARGBType)>": 0.20009359125431325
        }, 
        {
            "<net.imglib2.type.numeric.ARGBType: void mul(net.imglib2.type.numeric.ARGBType)>": 0.20009359125431325
        }, 
        {
            "<net.imglib2.type.numeric.ARGBType: void add(net.imglib2.type.numeric.ARGBType)>": 0.20009359125431325
        }, 
        {
            "<net.imglib2.type.numeric.ARGBType: void sub(net.imglib2.type.numeric.ARGBType)>": 0.20009359125431325
        }, 
        {
            "<Catalano.Imaging.Filters.Add: void <init>(int,int,int)>": 0.1979966055474272
        }
    ], 
    "<com.flowpowered.react.constraint.BallAndSocketJoint: void warmstart(com.flowpowered.react.constraint.ConstraintSolver$ConstraintSolverData)>": [
        {
            "<org.dyn4j.collision.manifold.IndexedManifoldPointId: boolean equals(java.lang.Object)>": 0.09084890466952295
        }, 
        {
            "<boofcv.struct.image.ImageBase: boolean isInBounds(int,int)>": 0.08915832667684373
        }, 
        {
            "<boofcv.struct.flow.ImageFlow: boolean isInBounds(int,int)>": 0.08915832667684373
        }, 
        {
            "<boofcv.struct.feature.MatrixOfList: boolean isInBounds(int,int)>": 0.08915832667684373
        }, 
        {
            "<Catalano.Imaging.Filters.VerticalRunLengthSmoothing: void applyInPlace(Catalano.Imaging.FastBitmap)>": 0.08898950637613257
        }
    ], 
    "<com.flowpowered.react.math.Quaternion: com.flowpowered.react.math.Vector3 getVectorV()>": [
        {
            "<org.jbox2d.testbed.framework.j2d.DebugDrawJ2D$1: java.awt.Color newColor(float,float,float,float)>": 0.3062981075712914
        }, 
        {
            "<org.jbox2d.callbacks.DebugDraw: void setCamera(float,float,float)>": 0.30487344996269494
        }, 
        {
            "<org.jbox2d.testbed.framework.TestbedCamera: void setCamera(org.jbox2d.common.Vec2,float)>": 0.3002340469704574
        }, 
        {
            "<boofcv.factory.background.FactoryBackgroundModel: boofcv.alg.background.stationary.BackgroundStationaryGaussian stationaryGaussian(boofcv.factory.background.ConfigBackgroundGaussian,boofcv.struct.image.ImageType)>": 0.29691624494118124
        }, 
        {
            "<org.jbox2d.common.Mat33: void <init>(float,float,float,float,float,float,float,float,float)>": 0.2954417959623127
        }
    ], 
    "<com.flowpowered.react.engine.ContactManifold: int getMaxArea(float,float,float,float)>": [
        {
            "<net.smert.jreactphysics3d.engine.ContactManifold: int getMaxArea(float,float,float,float)>": 0.9769573327227103
        }, 
        {
            "<net.imglib2.util.Util: boolean isApproxEqual(float,float,float)>": 0.4110231615457697
        }, 
        {
            "<boofcv.alg.color.ColorHsv: void rgbToHsv(float,float,float,float[])>": 0.3393111286938496
        }, 
        {
            "<boofcv.alg.filter.kernel.KernelMath: float minAbs(float[],int,float)>": 0.3244085960973922
        }, 
        {
            "<boofcv.alg.tracker.klt.KltTracker: boolean isFullyInside(float,float)>": 0.32380493625921725
        }
    ], 
    "<com.flowpowered.react.engine.ContactManifold: int getIndexOfDeepestPenetration(com.flowpowered.react.constraint.ContactPoint)>": [
        {
            "<net.smert.jreactphysics3d.engine.ContactManifold: int getIndexOfDeepestPenetration(net.smert.jreactphysics3d.constraint.ContactPoint)>": 0.3607617629795943
        }, 
        {
            "<boofcv.examples.sfm.ExampleMultiviewSceneReconstruction: int findBestFit(double[][],int)>": 0.3375882771393607
        }, 
        {
            "<org.jbox2d.particle.ParticleSystem: void computeDepthForGroup(org.jbox2d.particle.ParticleGroup)>": 0.2673290900045418
        }, 
        {
            "<org.jbox2d.collision.broadphase.Pair: int compareTo(org.jbox2d.collision.broadphase.Pair)>": 0.2640445733575882
        }, 
        {
            "<boofcv.io.image.ConvertRaster: int getOffset(sun.awt.image.IntegerInterleavedRaster)>": 0.2612175199074477
        }
    ], 
    "<com.flowpowered.react.collision.broadphase.SweepAndPruneAlgorithm: void removeObject(com.flowpowered.react.body.CollisionBody)>": [
        {
            "<net.smert.jreactphysics3d.collision.broadphase.SweepAndPruneAlgorithm: void removeObject(net.smert.jreactphysics3d.body.CollisionBody)>": 0.37414304336741444
        }, 
        {
            "<net.smert.jreactphysics3d.collision.broadphase.SweepAndPruneAlgorithm: void updateObjectIntegerAABB(net.smert.jreactphysics3d.body.CollisionBody,net.smert.jreactphysics3d.collision.broadphase.AABBInt)>": 0.3693121053224032
        }, 
        {
            "<net.smert.jreactphysics3d.collision.broadphase.SweepAndPruneAlgorithm: void updateObject(net.smert.jreactphysics3d.body.CollisionBody,net.smert.jreactphysics3d.collision.shapes.AABB)>": 0.36913421542243324
        }, 
        {
            "<net.smert.jreactphysics3d.collision.broadphase.SweepAndPruneAlgorithm: void addObject(net.smert.jreactphysics3d.body.CollisionBody,net.smert.jreactphysics3d.collision.shapes.AABB)>": 0.3288294411188499
        }, 
        {
            "<net.imglib2.view.iteration.SlicingCursor: void <init>(net.imglib2.Cursor,net.imglib2.transform.integer.Slicing)>": 0.3245726348929676
        }
    ]
}